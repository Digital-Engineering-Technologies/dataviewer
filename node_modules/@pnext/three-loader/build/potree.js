!function(g,I){"object"==typeof exports&&"object"==typeof module?module.exports=I(require("three")):"function"==typeof define&&define.amd?define("potree",["three"],I):"object"==typeof exports?exports.potree=I(require("three")):g.potree=I(g.three)}(self,(__WEBPACK_EXTERNAL_MODULE__604__=>(()=>{"use strict";var __webpack_modules__={414:(__unused_webpack_module,__webpack_exports__,__webpack_require__)=>{eval('__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   "default": () => (__WEBPACK_DEFAULT_EXPORT__)\n/* harmony export */ });\n/* harmony default export */ const __WEBPACK_DEFAULT_EXPORT__ = ("precision highp float;\\nprecision highp int;\\n\\nuniform mat4 projectionMatrix;\\n\\nuniform float screenWidth;\\nuniform float screenHeight;\\n\\nuniform sampler2D map;\\n\\nvarying vec2 vUv;\\n\\nvoid main() {\\n\\n\\tfloat dx = 1.0 / screenWidth;\\n\\tfloat dy = 1.0 / screenHeight;\\n\\n\\tvec3 color = vec3(0.0, 0.0, 0.0);\\n\\tcolor += texture2D(map, vUv + vec2(-dx, -dy)).rgb;\\n\\tcolor += texture2D(map, vUv + vec2(  0, -dy)).rgb;\\n\\tcolor += texture2D(map, vUv + vec2(+dx, -dy)).rgb;\\n\\tcolor += texture2D(map, vUv + vec2(-dx,   0)).rgb;\\n\\tcolor += texture2D(map, vUv + vec2(  0,   0)).rgb;\\n\\tcolor += texture2D(map, vUv + vec2(+dx,   0)).rgb;\\n\\tcolor += texture2D(map, vUv + vec2(-dx,  dy)).rgb;\\n\\tcolor += texture2D(map, vUv + vec2(  0,  dy)).rgb;\\n\\tcolor += texture2D(map, vUv + vec2(+dx,  dy)).rgb;\\n    \\n\\tcolor = color / 9.0;\\n\\t\\n\\tgl_FragColor = vec4(color, 1.0);\\n\\t\\n\\t\\n}");//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiNDE0LmpzIiwibWFwcGluZ3MiOiI7Ozs7QUFBQSIsInNvdXJjZXMiOlsid2VicGFjazovL3BvdHJlZS8uL3NyYy9tYXRlcmlhbHMvc2hhZGVycy9ibHVyLmZyYWc/MjI5MyJdLCJzb3VyY2VzQ29udGVudCI6WyJleHBvcnQgZGVmYXVsdCBcInByZWNpc2lvbiBoaWdocCBmbG9hdDtcXG5wcmVjaXNpb24gaGlnaHAgaW50O1xcblxcbnVuaWZvcm0gbWF0NCBwcm9qZWN0aW9uTWF0cml4O1xcblxcbnVuaWZvcm0gZmxvYXQgc2NyZWVuV2lkdGg7XFxudW5pZm9ybSBmbG9hdCBzY3JlZW5IZWlnaHQ7XFxuXFxudW5pZm9ybSBzYW1wbGVyMkQgbWFwO1xcblxcbnZhcnlpbmcgdmVjMiB2VXY7XFxuXFxudm9pZCBtYWluKCkge1xcblxcblxcdGZsb2F0IGR4ID0gMS4wIC8gc2NyZWVuV2lkdGg7XFxuXFx0ZmxvYXQgZHkgPSAxLjAgLyBzY3JlZW5IZWlnaHQ7XFxuXFxuXFx0dmVjMyBjb2xvciA9IHZlYzMoMC4wLCAwLjAsIDAuMCk7XFxuXFx0Y29sb3IgKz0gdGV4dHVyZTJEKG1hcCwgdlV2ICsgdmVjMigtZHgsIC1keSkpLnJnYjtcXG5cXHRjb2xvciArPSB0ZXh0dXJlMkQobWFwLCB2VXYgKyB2ZWMyKCAgMCwgLWR5KSkucmdiO1xcblxcdGNvbG9yICs9IHRleHR1cmUyRChtYXAsIHZVdiArIHZlYzIoK2R4LCAtZHkpKS5yZ2I7XFxuXFx0Y29sb3IgKz0gdGV4dHVyZTJEKG1hcCwgdlV2ICsgdmVjMigtZHgsICAgMCkpLnJnYjtcXG5cXHRjb2xvciArPSB0ZXh0dXJlMkQobWFwLCB2VXYgKyB2ZWMyKCAgMCwgICAwKSkucmdiO1xcblxcdGNvbG9yICs9IHRleHR1cmUyRChtYXAsIHZVdiArIHZlYzIoK2R4LCAgIDApKS5yZ2I7XFxuXFx0Y29sb3IgKz0gdGV4dHVyZTJEKG1hcCwgdlV2ICsgdmVjMigtZHgsICBkeSkpLnJnYjtcXG5cXHRjb2xvciArPSB0ZXh0dXJlMkQobWFwLCB2VXYgKyB2ZWMyKCAgMCwgIGR5KSkucmdiO1xcblxcdGNvbG9yICs9IHRleHR1cmUyRChtYXAsIHZVdiArIHZlYzIoK2R4LCAgZHkpKS5yZ2I7XFxuICAgIFxcblxcdGNvbG9yID0gY29sb3IgLyA5LjA7XFxuXFx0XFxuXFx0Z2xfRnJhZ0NvbG9yID0gdmVjNChjb2xvciwgMS4wKTtcXG5cXHRcXG5cXHRcXG59XCI7Il0sIm5hbWVzIjpbXSwic291cmNlUm9vdCI6IiJ9\n//# sourceURL=webpack-internal:///414\n')},575:(__unused_webpack_module,__webpack_exports__,__webpack_require__)=>{eval('__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   "default": () => (__WEBPACK_DEFAULT_EXPORT__)\n/* harmony export */ });\n/* harmony default export */ const __WEBPACK_DEFAULT_EXPORT__ = ("precision highp float;\\nprecision highp int;\\n\\nattribute vec3 position;\\nattribute vec2 uv;\\n\\nuniform mat4 modelViewMatrix;\\nuniform mat4 projectionMatrix;\\n\\nvarying vec2 vUv;\\n\\nvoid main() {\\n    vUv = uv;\\n\\n    gl_Position =   projectionMatrix * modelViewMatrix * vec4(position, 1.0);\\n}");//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiNTc1LmpzIiwibWFwcGluZ3MiOiI7Ozs7QUFBQSIsInNvdXJjZXMiOlsid2VicGFjazovL3BvdHJlZS8uL3NyYy9tYXRlcmlhbHMvc2hhZGVycy9ibHVyLnZlcnQ/NWRiYyJdLCJzb3VyY2VzQ29udGVudCI6WyJleHBvcnQgZGVmYXVsdCBcInByZWNpc2lvbiBoaWdocCBmbG9hdDtcXG5wcmVjaXNpb24gaGlnaHAgaW50O1xcblxcbmF0dHJpYnV0ZSB2ZWMzIHBvc2l0aW9uO1xcbmF0dHJpYnV0ZSB2ZWMyIHV2O1xcblxcbnVuaWZvcm0gbWF0NCBtb2RlbFZpZXdNYXRyaXg7XFxudW5pZm9ybSBtYXQ0IHByb2plY3Rpb25NYXRyaXg7XFxuXFxudmFyeWluZyB2ZWMyIHZVdjtcXG5cXG52b2lkIG1haW4oKSB7XFxuICAgIHZVdiA9IHV2O1xcblxcbiAgICBnbF9Qb3NpdGlvbiA9ICAgcHJvamVjdGlvbk1hdHJpeCAqIG1vZGVsVmlld01hdHJpeCAqIHZlYzQocG9zaXRpb24sIDEuMCk7XFxufVwiOyJdLCJuYW1lcyI6W10sInNvdXJjZVJvb3QiOiIifQ==\n//# sourceURL=webpack-internal:///575\n')},168:(__unused_webpack_module,__webpack_exports__,__webpack_require__)=>{eval('/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   A: () => (__WEBPACK_DEFAULT_EXPORT__)\n/* harmony export */ });\n/* harmony default export */ const __WEBPACK_DEFAULT_EXPORT__ = ("precision highp float;\\nprecision highp int;\\n\\n#if defined paraboloid_point_shape\\n\\t#extension GL_EXT_frag_depth : enable\\n#endif\\n\\nuniform mat4 viewMatrix;\\nuniform vec3 cameraPosition;\\n\\nuniform mat4 projectionMatrix;\\nuniform float opacity;\\n\\nuniform float blendHardness;\\nuniform float blendDepthSupplement;\\nuniform float fov;\\nuniform float spacing;\\nuniform float pcIndex;\\nuniform float screenWidth;\\nuniform float screenHeight;\\n\\nuniform sampler2D depthMap;\\n\\n#if defined (clip_horizontally) || defined (clip_vertically)\\n\\tuniform vec4 clipExtent;\\n#endif\\n\\n#ifdef use_texture_blending\\n\\tuniform sampler2D backgroundMap;\\n#endif\\n\\n\\n#ifdef use_point_cloud_mixing\\n\\tuniform int pointCloudMixingMode;\\n\\tuniform float pointCloudID;\\n\\tuniform float pointCloudMixAngle;\\n\\tuniform float stripeDistanceX;\\n\\tuniform float stripeDistanceY;\\n\\n\\tuniform float stripeDivisorX;\\n\\tuniform float stripeDivisorY;\\n#endif\\n\\n#ifdef highlight_point\\n\\tuniform vec4 highlightedPointColor;\\n#endif\\n\\nvarying vec3 vColor;\\n\\n#if !defined(color_type_point_index)\\n\\tvarying float vOpacity;\\n#endif\\n\\n#if defined(weighted_splats)\\n\\tvarying float vLinearDepth;\\n#endif\\n\\n#if !defined(paraboloid_point_shape) && defined(use_edl)\\n\\tvarying float vLogDepth;\\n#endif\\n\\n#if defined(color_type_phong) && (MAX_POINT_LIGHTS > 0 || MAX_DIR_LIGHTS > 0) || defined(paraboloid_point_shape)\\n\\tvarying vec3 vViewPosition;\\n#endif\\n\\n#if defined(weighted_splats) || defined(paraboloid_point_shape)\\n\\tvarying float vRadius;\\n#endif\\n\\n#if defined(color_type_phong) && (MAX_POINT_LIGHTS > 0 || MAX_DIR_LIGHTS > 0)\\n\\tvarying vec3 vNormal;\\n#endif\\n\\n#ifdef highlight_point\\n\\tvarying float vHighlight;\\n#endif\\n\\nfloat specularStrength = 1.0;\\n\\nvoid main() {\\n\\tvec3 color = vColor;\\n\\tfloat depth = gl_FragCoord.z;\\n\\n\\t#if defined (clip_horizontally) || defined (clip_vertically)\\n\\tvec2 ndc = vec2((gl_FragCoord.x / screenWidth), 1.0 - (gl_FragCoord.y / screenHeight));\\n\\n\\tif(step(clipExtent.x, ndc.x) * step(ndc.x, clipExtent.z) < 1.0)\\n\\t{\\n\\t\\tdiscard;\\n\\t}\\n\\n\\tif(step(clipExtent.y, ndc.y) * step(ndc.y, clipExtent.w) < 1.0)\\n\\t{\\n\\t\\tdiscard;\\n\\t}\\n\\t#endif  \\n\\n\\t#if defined(circle_point_shape) || defined(paraboloid_point_shape) || defined (weighted_splats)\\n\\t\\tfloat u = 2.0 * gl_PointCoord.x - 1.0;\\n\\t\\tfloat v = 2.0 * gl_PointCoord.y - 1.0;\\n\\t#endif\\n\\n\\t#if defined(circle_point_shape) || defined (weighted_splats)\\n\\t\\tfloat cc = u*u + v*v;\\n\\t\\tif(cc > 1.0){\\n\\t\\t\\tdiscard;\\n\\t\\t}\\n\\t#endif\\n\\n\\t#if defined weighted_splats\\n\\t\\tvec2 uv = gl_FragCoord.xy / vec2(screenWidth, screenHeight);\\n\\t\\tfloat sDepth = texture2D(depthMap, uv).r;\\n\\t\\tif(vLinearDepth > sDepth + vRadius + blendDepthSupplement){\\n\\t\\t\\tdiscard;\\n\\t\\t}\\n\\t#endif\\n\\n\\t#if defined color_type_point_index\\n\\t\\tgl_FragColor = vec4(color, pcIndex / 255.0);\\n\\t#else\\n\\t\\tgl_FragColor = vec4(color, vOpacity);\\n\\t#endif\\n\\n\\t#ifdef use_point_cloud_mixing\\n\\t\\tbool discardFragment = false;\\n\\n\\t\\tif (pointCloudMixingMode == 1) {  // Checkboard\\n\\t\\t\\tfloat vPointCloudID = pointCloudID > 10. ? pointCloudID/10.: pointCloudID;\\n\\t\\t\\tdiscardFragment = mod(gl_FragCoord.x, vPointCloudID) > 0.5 && mod(gl_FragCoord.y, vPointCloudID) > 0.5;\\n\\t\\t}\\n\\t\\telse if (pointCloudMixingMode == 2) {  // Stripes\\n\\t\\t\\tfloat angle = pointCloudMixAngle * pointCloudID / 180.;\\n\\t\\t\\tfloat u = cos(angle) * gl_FragCoord.x + sin(angle) * gl_FragCoord.y;\\n\\t\\t\\tfloat v = -sin(angle) * gl_FragCoord.x + cos(angle) * gl_FragCoord.y;\\n\\n\\t\\t\\tdiscardFragment = mod(u, stripeDistanceX) >= stripeDistanceX/stripeDivisorX && mod(v, stripeDistanceY) >= stripeDistanceY/stripeDivisorY;\\n\\t\\t}\\n\\t\\tif (discardFragment) {\\n\\t\\t\\tdiscard;\\n\\t\\t}\\n\\t#endif\\n\\n\\t#ifdef use_texture_blending\\n\\t\\tvec2 vUv = gl_FragCoord.xy / vec2(screenWidth, screenHeight);\\n\\n\\t\\tvec4 tColor = texture2D(backgroundMap, vUv);\\n\\t\\tgl_FragColor = vec4(vOpacity * color, 1.) + vec4((1. - vOpacity) * tColor.rgb, 0.);\\n\\t#endif\\n\\n\\t#if defined(color_type_phong)\\n\\t\\t#if MAX_POINT_LIGHTS > 0 || MAX_DIR_LIGHTS > 0\\n\\t\\t\\tvec3 normal = normalize( vNormal );\\n\\t\\t\\tnormal.z = abs(normal.z);\\n\\n\\t\\t\\tvec3 viewPosition = normalize( vViewPosition );\\n\\t\\t#endif\\n\\n\\t\\t// code taken from three.js phong light fragment shader\\n\\n\\t\\t#if MAX_POINT_LIGHTS > 0\\n\\n\\t\\t\\tvec3 pointDiffuse = vec3( 0.0 );\\n\\t\\t\\tvec3 pointSpecular = vec3( 0.0 );\\n\\n\\t\\t\\tfor ( int i = 0; i < MAX_POINT_LIGHTS; i ++ ) {\\n\\n\\t\\t\\t\\tvec4 lPosition = viewMatrix * vec4( pointLightPosition[ i ], 1.0 );\\n\\t\\t\\t\\tvec3 lVector = lPosition.xyz + vViewPosition.xyz;\\n\\n\\t\\t\\t\\tfloat lDistance = 1.0;\\n\\t\\t\\t\\tif ( pointLightDistance[ i ] > 0.0 )\\n\\t\\t\\t\\t\\tlDistance = 1.0 - min( ( length( lVector ) / pointLightDistance[ i ] ), 1.0 );\\n\\n\\t\\t\\t\\tlVector = normalize( lVector );\\n\\n\\t\\t\\t\\t\\t\\t// diffuse\\n\\n\\t\\t\\t\\tfloat dotProduct = dot( normal, lVector );\\n\\n\\t\\t\\t\\t#ifdef WRAP_AROUND\\n\\n\\t\\t\\t\\t\\tfloat pointDiffuseWeightFull = max( dotProduct, 0.0 );\\n\\t\\t\\t\\t\\tfloat pointDiffuseWeightHalf = max( 0.5 * dotProduct + 0.5, 0.0 );\\n\\n\\t\\t\\t\\t\\tvec3 pointDiffuseWeight = mix( vec3( pointDiffuseWeightFull ), vec3( pointDiffuseWeightHalf ), wrapRGB );\\n\\n\\t\\t\\t\\t#else\\n\\n\\t\\t\\t\\t\\tfloat pointDiffuseWeight = max( dotProduct, 0.0 );\\n\\n\\t\\t\\t\\t#endif\\n\\n\\t\\t\\t\\tpointDiffuse += diffuse * pointLightColor[ i ] * pointDiffuseWeight * lDistance;\\n\\n\\t\\t\\t\\t// specular\\n\\n\\t\\t\\t\\tvec3 pointHalfVector = normalize( lVector + viewPosition );\\n\\t\\t\\t\\tfloat pointDotNormalHalf = max( dot( normal, pointHalfVector ), 0.0 );\\n\\t\\t\\t\\tfloat pointSpecularWeight = specularStrength * max( pow( pointDotNormalHalf, shininess ), 0.0 );\\n\\n\\t\\t\\t\\tfloat specularNormalization = ( shininess + 2.0 ) / 8.0;\\n\\n\\t\\t\\t\\tvec3 schlick = specular + vec3( 1.0 - specular ) * pow( max( 1.0 - dot( lVector, pointHalfVector ), 0.0 ), 5.0 );\\n\\t\\t\\t\\tpointSpecular += schlick * pointLightColor[ i ] * pointSpecularWeight * pointDiffuseWeight * lDistance * specularNormalization;\\n\\t\\t\\t\\tpointSpecular = vec3(0.0, 0.0, 0.0);\\n\\t\\t\\t}\\n\\n\\t\\t#endif\\n\\n\\t\\t#if MAX_DIR_LIGHTS > 0\\n\\n\\t\\t\\tvec3 dirDiffuse = vec3( 0.0 );\\n\\t\\t\\tvec3 dirSpecular = vec3( 0.0 );\\n\\n\\t\\t\\tfor( int i = 0; i < MAX_DIR_LIGHTS; i ++ ) {\\n\\n\\t\\t\\t\\tvec4 lDirection = viewMatrix * vec4( directionalLightDirection[ i ], 0.0 );\\n\\t\\t\\t\\tvec3 dirVector = normalize( lDirection.xyz );\\n\\n\\t\\t\\t\\t\\t\\t// diffuse\\n\\n\\t\\t\\t\\tfloat dotProduct = dot( normal, dirVector );\\n\\n\\t\\t\\t\\t#ifdef WRAP_AROUND\\n\\n\\t\\t\\t\\t\\tfloat dirDiffuseWeightFull = max( dotProduct, 0.0 );\\n\\t\\t\\t\\t\\tfloat dirDiffuseWeightHalf = max( 0.5 * dotProduct + 0.5, 0.0 );\\n\\n\\t\\t\\t\\t\\tvec3 dirDiffuseWeight = mix( vec3( dirDiffuseWeightFull ), vec3( dirDiffuseWeightHalf ), wrapRGB );\\n\\n\\t\\t\\t\\t#else\\n\\n\\t\\t\\t\\t\\tfloat dirDiffuseWeight = max( dotProduct, 0.0 );\\n\\n\\t\\t\\t\\t#endif\\n\\n\\t\\t\\t\\tdirDiffuse += diffuse * directionalLightColor[ i ] * dirDiffuseWeight;\\n\\n\\t\\t\\t\\t// specular\\n\\n\\t\\t\\t\\tvec3 dirHalfVector = normalize( dirVector + viewPosition );\\n\\t\\t\\t\\tfloat dirDotNormalHalf = max( dot( normal, dirHalfVector ), 0.0 );\\n\\t\\t\\t\\tfloat dirSpecularWeight = specularStrength * max( pow( dirDotNormalHalf, shininess ), 0.0 );\\n\\n\\t\\t\\t\\tfloat specularNormalization = ( shininess + 2.0 ) / 8.0;\\n\\n\\t\\t\\t\\tvec3 schlick = specular + vec3( 1.0 - specular ) * pow( max( 1.0 - dot( dirVector, dirHalfVector ), 0.0 ), 5.0 );\\n\\t\\t\\t\\tdirSpecular += schlick * directionalLightColor[ i ] * dirSpecularWeight * dirDiffuseWeight * specularNormalization;\\n\\t\\t\\t}\\n\\n\\t\\t#endif\\n\\n\\t\\tvec3 totalDiffuse = vec3( 0.0 );\\n\\t\\tvec3 totalSpecular = vec3( 0.0 );\\n\\n\\t\\t#if MAX_POINT_LIGHTS > 0\\n\\n\\t\\t\\ttotalDiffuse += pointDiffuse;\\n\\t\\t\\ttotalSpecular += pointSpecular;\\n\\n\\t\\t#endif\\n\\n\\t\\t#if MAX_DIR_LIGHTS > 0\\n\\n\\t\\t\\ttotalDiffuse += dirDiffuse;\\n\\t\\t\\ttotalSpecular += dirSpecular;\\n\\n\\t\\t#endif\\n\\n\\t\\tgl_FragColor.xyz = gl_FragColor.xyz * ( emissive + totalDiffuse + ambientLightColor * ambient ) + totalSpecular;\\n\\n\\t#endif\\n\\n\\t#if defined weighted_splats\\n\\t    //float w = pow(1.0 - (u*u + v*v), blendHardness);\\n\\n\\t\\tfloat wx = 2.0 * length(2.0 * gl_PointCoord - 1.0);\\n\\t\\tfloat w = exp(-wx * wx * 0.5);\\n\\n\\t\\t//float distance = length(2.0 * gl_PointCoord - 1.0);\\n\\t\\t//float w = exp( -(distance * distance) / blendHardness);\\n\\n\\t\\tgl_FragColor.rgb = gl_FragColor.rgb * w;\\n\\t\\tgl_FragColor.a = w;\\n\\t#endif\\n\\n\\t#if defined paraboloid_point_shape\\n\\t\\tfloat wi = 0.0 - ( u*u + v*v);\\n\\t\\tvec4 pos = vec4(vViewPosition, 1.0);\\n\\t\\tpos.z += wi * vRadius;\\n\\t\\tfloat linearDepth = -pos.z;\\n\\t\\tpos = projectionMatrix * pos;\\n\\t\\tpos = pos / pos.w;\\n\\t\\tfloat expDepth = pos.z;\\n\\t\\tdepth = (pos.z + 1.0) / 2.0;\\n\\t\\tgl_FragDepthEXT = depth;\\n\\n\\t\\t#if defined(color_type_depth)\\n\\t\\t\\tgl_FragColor.r = linearDepth;\\n\\t\\t\\tgl_FragColor.g = expDepth;\\n\\t\\t#endif\\n\\n\\t\\t#if defined(use_edl)\\n\\t\\t\\tgl_FragColor.a = log2(linearDepth);\\n\\t\\t#endif\\n\\n\\t#else\\n\\t\\t#if defined(use_edl)\\n\\t\\t\\tgl_FragColor.a = vLogDepth;\\n\\t\\t#endif\\n\\t#endif\\n\\n\\t#ifdef highlight_point\\n\\t\\tif (vHighlight > 0.0) {\\n\\t\\t\\tgl_FragColor = highlightedPointColor;\\n\\t\\t}\\n\\t#endif\\n}\\n");//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///168\n')},245:(__unused_webpack_module,__webpack_exports__,__webpack_require__)=>{eval('/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   A: () => (__WEBPACK_DEFAULT_EXPORT__)\n/* harmony export */ });\n/* harmony default export */ const __WEBPACK_DEFAULT_EXPORT__ = ("precision highp float;\\nprecision highp int;\\n\\n#define max_clip_boxes 30\\n\\nattribute vec3 position;\\nattribute vec3 color;\\n\\n#ifdef color_rgba\\n\\tattribute vec4 rgba;\\n#endif\\n\\nattribute vec3 normal;\\nattribute float intensity;\\nattribute float classification;\\nattribute float returnNumber;\\nattribute float numberOfReturns;\\nattribute float pointSourceID;\\nattribute vec4 indices;\\nattribute vec2 uv;\\n\\nuniform mat4 modelMatrix;\\nuniform mat4 modelViewMatrix;\\nuniform mat4 projectionMatrix;\\nuniform mat4 viewMatrix;\\nuniform mat3 normalMatrix;\\n\\nuniform float pcIndex;\\n\\nuniform float screenWidth;\\nuniform float screenHeight;\\nuniform float fov;\\nuniform float spacing;\\n\\n#if defined use_clip_box\\n\\tuniform mat4 clipBoxes[max_clip_boxes];\\n#endif\\n\\nuniform float heightMin;\\nuniform float heightMax;\\nuniform float size; // pixel size factor\\nuniform float minSize; // minimum pixel size\\nuniform float maxSize; // maximum pixel size\\nuniform float octreeSize;\\nuniform vec3 bbSize;\\nuniform vec3 uColor;\\nuniform float opacity;\\nuniform float clipBoxCount;\\nuniform float level;\\nuniform float vnStart;\\nuniform bool isLeafNode;\\n\\nuniform float filterByNormalThreshold;\\nuniform vec2 intensityRange;\\nuniform float opacityAttenuation;\\nuniform float intensityGamma;\\nuniform float intensityContrast;\\nuniform float intensityBrightness;\\nuniform float rgbGamma;\\nuniform float rgbContrast;\\nuniform float rgbBrightness;\\nuniform float transition;\\nuniform float wRGB;\\nuniform float wIntensity;\\nuniform float wElevation;\\nuniform float wClassification;\\nuniform float wReturnNumber;\\nuniform float wSourceID;\\n\\nuniform sampler2D visibleNodes;\\nuniform sampler2D gradient;\\nuniform sampler2D classificationLUT;\\nuniform sampler2D depthMap;\\n\\n#ifdef use_texture_blending\\n\\tuniform sampler2D backgroundMap;\\n#endif\\n\\n#ifdef use_point_cloud_mixing\\n\\tuniform int pointCloudMixingMode;\\n\\tuniform float pointCloudID;\\n\\n\\tuniform float pointCloudMixAngle;\\n\\tuniform float stripeDistanceX;\\n\\tuniform float stripeDistanceY;\\n\\n\\tuniform float stripeDivisorX;\\n\\tuniform float stripeDivisorY;\\n#endif\\n\\n#ifdef highlight_point\\n\\tuniform vec3 highlightedPointCoordinate;\\n\\tuniform bool enablePointHighlighting;\\n\\tuniform float highlightedPointScale;\\n#endif\\n\\n#ifdef use_filter_by_normal\\n\\tuniform int normalFilteringMode;\\n#endif\\n\\nvarying vec3 vColor;\\n\\n#if !defined(color_type_point_index)\\n\\tvarying float vOpacity;\\n#endif\\n\\n#if defined(weighted_splats)\\n\\tvarying float vLinearDepth;\\n#endif\\n\\n#if !defined(paraboloid_point_shape) && defined(use_edl)\\n\\tvarying float vLogDepth;\\n#endif\\n\\n#if defined(color_type_phong) && (MAX_POINT_LIGHTS > 0 || MAX_DIR_LIGHTS > 0) || defined(paraboloid_point_shape)\\n\\tvarying vec3 vViewPosition;\\n#endif\\n\\n#if defined(weighted_splats) || defined(paraboloid_point_shape)\\n\\tvarying float vRadius;\\n#endif\\n\\n#if defined(color_type_phong) && (MAX_POINT_LIGHTS > 0 || MAX_DIR_LIGHTS > 0)\\n\\tvarying vec3 vNormal;\\n#endif\\n\\n#ifdef highlight_point\\n\\tvarying float vHighlight;\\n#endif\\n\\n// ---------------------\\n// OCTREE\\n// ---------------------\\n\\n#if (defined(adaptive_point_size) || defined(color_type_lod)) && defined(tree_type_octree)\\n\\n/**\\n * Rounds the specified number to the closest integer.\\n */\\nfloat round(float number){\\n\\treturn floor(number + 0.5);\\n}\\n\\n/**\\n * Gets the number of 1-bits up to inclusive index position.\\n *\\n * number is treated as if it were an integer in the range 0-255\\n */\\nint numberOfOnes(int number, int index) {\\n\\tint numOnes = 0;\\n\\tint tmp = 128;\\n\\tfor (int i = 7; i >= 0; i--) {\\n\\n\\t\\tif (number >= tmp) {\\n\\t\\t\\tnumber = number - tmp;\\n\\n\\t\\t\\tif (i <= index) {\\n\\t\\t\\t\\tnumOnes++;\\n\\t\\t\\t}\\n\\t\\t}\\n\\n\\t\\ttmp = tmp / 2;\\n\\t}\\n\\n\\treturn numOnes;\\n}\\n\\n/**\\n * Checks whether the bit at index is 1.0\\n *\\n * number is treated as if it were an integer in the range 0-255\\n */\\nbool isBitSet(int number, int index){\\n\\n\\t// weird multi else if due to lack of proper array, int and bitwise support in WebGL 1.0\\n\\tint powi = 1;\\n\\tif (index == 0) {\\n\\t\\tpowi = 1;\\n\\t} else if (index == 1) {\\n\\t\\tpowi = 2;\\n\\t} else if (index == 2) {\\n\\t\\tpowi = 4;\\n\\t} else if (index == 3) {\\n\\t\\tpowi = 8;\\n\\t} else if (index == 4) {\\n\\t\\tpowi = 16;\\n\\t} else if (index == 5) {\\n\\t\\tpowi = 32;\\n\\t} else if (index == 6) {\\n\\t\\tpowi = 64;\\n\\t} else if (index == 7) {\\n\\t\\tpowi = 128;\\n\\t}\\n\\n\\tint ndp = number / powi;\\n\\n\\treturn mod(float(ndp), 2.0) != 0.0;\\n}\\n\\n/**\\n * Gets the the LOD at the point position.\\n */\\nfloat getLOD() {\\n\\tvec3 offset = vec3(0.0, 0.0, 0.0);\\n\\tint iOffset = int(vnStart);\\n\\tfloat depth = level;\\n\\n\\tfor (float i = 0.0; i <= 30.0; i++) {\\n\\t\\tfloat nodeSizeAtLevel = octreeSize  / pow(2.0, i + level + 0.0);\\n\\n\\t\\tvec3 index3d = (position-offset) / nodeSizeAtLevel;\\n\\t\\tindex3d = floor(index3d + 0.5);\\n\\t\\tint index = int(round(4.0 * index3d.x + 2.0 * index3d.y + index3d.z));\\n\\n\\t\\tvec4 value = texture2D(visibleNodes, vec2(float(iOffset) / 2048.0, 0.0));\\n\\t\\tint mask = int(round(value.r * 255.0));\\n\\n\\t\\tif (isBitSet(mask, index)) {\\n\\t\\t\\t// there are more visible child nodes at this position\\n\\t\\t\\tint advanceG = int(round(value.g * 255.0)) * 256;\\n\\t\\t\\tint advanceB = int(round(value.b * 255.0));\\n\\t\\t\\tint advanceChild = numberOfOnes(mask, index - 1);\\n\\t\\t\\tint advance = advanceG + advanceB + advanceChild;\\n\\n\\t\\t\\tiOffset = iOffset + advance;\\n\\n\\t\\t\\tdepth++;\\n\\t\\t} else {\\n\\t\\t\\treturn value.a * 255.0; // no more visible child nodes at this position\\n\\t\\t}\\n\\n\\t\\toffset = offset + (vec3(1.0, 1.0, 1.0) * nodeSizeAtLevel * 0.5) * index3d;\\n\\t}\\n\\n\\treturn depth;\\n}\\n\\nfloat getPointSizeAttenuation() {\\n\\treturn 0.5 * pow(2.0, getLOD());\\n}\\n\\n#endif\\n\\n// ---------------------\\n// KD-TREE\\n// ---------------------\\n\\n#if (defined(adaptive_point_size) || defined(color_type_lod)) && defined(tree_type_kdtree)\\n\\nfloat getLOD() {\\n\\tvec3 offset = vec3(0.0, 0.0, 0.0);\\n\\tfloat intOffset = 0.0;\\n\\tfloat depth = 0.0;\\n\\n\\tvec3 size = bbSize;\\n\\tvec3 pos = position;\\n\\n\\tfor (float i = 0.0; i <= 1000.0; i++) {\\n\\n\\t\\tvec4 value = texture2D(visibleNodes, vec2(intOffset / 2048.0, 0.0));\\n\\n\\t\\tint children = int(value.r * 255.0);\\n\\t\\tfloat next = value.g * 255.0;\\n\\t\\tint split = int(value.b * 255.0);\\n\\n\\t\\tif (next == 0.0) {\\n\\t\\t \\treturn depth;\\n\\t\\t}\\n\\n\\t\\tvec3 splitv = vec3(0.0, 0.0, 0.0);\\n\\t\\tif (split == 1) {\\n\\t\\t\\tsplitv.x = 1.0;\\n\\t\\t} else if (split == 2) {\\n\\t\\t \\tsplitv.y = 1.0;\\n\\t\\t} else if (split == 4) {\\n\\t\\t \\tsplitv.z = 1.0;\\n\\t\\t}\\n\\n\\t\\tintOffset = intOffset + next;\\n\\n\\t\\tfloat factor = length(pos * splitv / size);\\n\\t\\tif (factor < 0.5) {\\n\\t\\t \\t// left\\n\\t\\t\\tif (children == 0 || children == 2) {\\n\\t\\t\\t\\treturn depth;\\n\\t\\t\\t}\\n\\t\\t} else {\\n\\t\\t\\t// right\\n\\t\\t\\tpos = pos - size * splitv * 0.5;\\n\\t\\t\\tif (children == 0 || children == 1) {\\n\\t\\t\\t\\treturn depth;\\n\\t\\t\\t}\\n\\t\\t\\tif (children == 3) {\\n\\t\\t\\t\\tintOffset = intOffset + 1.0;\\n\\t\\t\\t}\\n\\t\\t}\\n\\t\\tsize = size * ((1.0 - (splitv + 1.0) / 2.0) + 0.5);\\n\\n\\t\\tdepth++;\\n\\t}\\n\\n\\n\\treturn depth;\\n}\\n\\nfloat getPointSizeAttenuation() {\\n\\treturn 0.5 * pow(1.3, getLOD());\\n}\\n\\n#endif\\n\\n// formula adapted from: http://www.dfstudios.co.uk/articles/programming/image-programming-algorithms/image-processing-algorithms-part-5-contrast-adjustment/\\nfloat getContrastFactor(float contrast) {\\n\\treturn (1.0158730158730156 * (contrast + 1.0)) / (1.0158730158730156 - contrast);\\n}\\n\\nvec3 getRGB() {\\n\\t\\n\\t#ifdef color_rgba\\n\\t\\tvec3 rgb = rgba.rgb;\\n\\t#else\\t\\n\\t\\tvec3 rgb = color;\\n\\t#endif\\t\\t\\n\\n\\t#if defined(use_rgb_gamma_contrast_brightness)\\n\\t\\trgb = pow(rgb, vec3(rgbGamma));\\n\\t\\trgb = rgb + rgbBrightness;\\n\\t\\trgb = (rgb - 0.5) * getContrastFactor(rgbContrast) + 0.5;\\n\\t\\trgb = clamp(rgb, 0.0, 1.0);\\n\\t\\treturn rgb;\\n\\t#else\\n\\t\\treturn rgb;\\n\\t#endif\\n}\\n\\nfloat getIntensity() {\\n\\tfloat w = (intensity - intensityRange.x) / (intensityRange.y - intensityRange.x);\\n\\tw = pow(w, intensityGamma);\\n\\tw = w + intensityBrightness;\\n\\tw = (w - 0.5) * getContrastFactor(intensityContrast) + 0.5;\\n\\tw = clamp(w, 0.0, 1.0);\\n\\n\\treturn w;\\n}\\n\\nvec3 getElevation() {\\n\\tvec4 world = modelMatrix * vec4( position, 1.0 );\\n\\tfloat w = (world.z - heightMin) / (heightMax-heightMin);\\n\\tvec3 cElevation = texture2D(gradient, vec2(w,1.0-w)).rgb;\\n\\n\\treturn cElevation;\\n}\\n\\nvec4 getClassification() {\\n\\tvec2 uv = vec2(classification / 255.0, 0.5);\\n\\tvec4 classColor = texture2D(classificationLUT, uv);\\n\\n\\treturn classColor;\\n}\\n\\nvec3 getReturnNumber() {\\n\\tif (numberOfReturns == 1.0) {\\n\\t\\treturn vec3(1.0, 1.0, 0.0);\\n\\t} else {\\n\\t\\tif (returnNumber == 1.0) {\\n\\t\\t\\treturn vec3(1.0, 0.0, 0.0);\\n\\t\\t} else if (returnNumber == numberOfReturns) {\\n\\t\\t\\treturn vec3(0.0, 0.0, 1.0);\\n\\t\\t} else {\\n\\t\\t\\treturn vec3(0.0, 1.0, 0.0);\\n\\t\\t}\\n\\t}\\n}\\n\\nvec3 getSourceID() {\\n\\tfloat w = mod(pointSourceID, 10.0) / 10.0;\\n\\treturn texture2D(gradient, vec2(w, 1.0 - w)).rgb;\\n}\\n\\nvec3 getCompositeColor() {\\n\\tvec3 c;\\n\\tfloat w;\\n\\n\\tc += wRGB * getRGB();\\n\\tw += wRGB;\\n\\n\\tc += wIntensity * getIntensity() * vec3(1.0, 1.0, 1.0);\\n\\tw += wIntensity;\\n\\n\\tc += wElevation * getElevation();\\n\\tw += wElevation;\\n\\n\\tc += wReturnNumber * getReturnNumber();\\n\\tw += wReturnNumber;\\n\\n\\tc += wSourceID * getSourceID();\\n\\tw += wSourceID;\\n\\n\\tvec4 cl = wClassification * getClassification();\\n\\tc += cl.a * cl.rgb;\\n\\tw += wClassification * cl.a;\\n\\n\\tc = c / w;\\n\\n\\tif (w == 0.0) {\\n\\t\\tgl_Position = vec4(100.0, 100.0, 100.0, 0.0);\\n\\t}\\n\\n\\treturn c;\\n}\\n\\nvoid main() {\\n\\tvec4 mvPosition = modelViewMatrix * vec4(position, 1.0);\\n\\n\\tgl_Position = projectionMatrix * mvPosition;\\n\\n\\t#if defined(color_type_phong) && (MAX_POINT_LIGHTS > 0 || MAX_DIR_LIGHTS > 0) || defined(paraboloid_point_shape)\\n\\t\\tvViewPosition = mvPosition.xyz;\\n\\t#endif\\n\\n\\t#if defined weighted_splats\\n\\t\\tvLinearDepth = gl_Position.w;\\n\\t#endif\\n\\n\\t#if defined(color_type_phong) && (MAX_POINT_LIGHTS > 0 || MAX_DIR_LIGHTS > 0)\\n\\t\\tvNormal = normalize(normalMatrix * normal);\\n\\t#endif\\n\\n\\t#if !defined(paraboloid_point_shape) && defined(use_edl)\\n\\t\\tvLogDepth = log2(-mvPosition.z);\\n\\t#endif\\n\\n\\t// ---------------------\\n\\t// POINT SIZE\\n\\t// ---------------------\\n\\n\\tfloat pointSize = 1.0;\\n\\tfloat slope = tan(fov / 2.0);\\n\\tfloat projFactor =  -0.5 * screenHeight / (slope * mvPosition.z);\\n\\n\\t#if defined fixed_point_size\\n\\t\\tpointSize = size;\\n\\t#elif defined attenuated_point_size\\n\\t\\tpointSize = size * spacing * projFactor;\\n\\t#elif defined adaptive_point_size\\n\\t\\tfloat worldSpaceSize = 2.0 * size * spacing / getPointSizeAttenuation();\\n\\t\\tpointSize = worldSpaceSize * projFactor;\\n\\t#endif\\n\\n\\tpointSize = max(minSize, pointSize);\\n\\tpointSize = min(maxSize, pointSize);\\n\\n\\t#if defined(weighted_splats) || defined(paraboloid_point_shape)\\n\\t\\tvRadius = pointSize / projFactor;\\n\\t#endif\\n\\n\\tgl_PointSize = pointSize;\\n\\n\\t// ---------------------\\n\\t// HIGHLIGHTING\\n\\t// ---------------------\\n\\n\\t#ifdef highlight_point\\n\\t\\tvec4 mPosition = modelMatrix * vec4(position, 1.0);\\n\\t\\tif (enablePointHighlighting && abs(mPosition.x - highlightedPointCoordinate.x) < 0.0001 &&\\n\\t\\t\\tabs(mPosition.y - highlightedPointCoordinate.y) < 0.0001 &&\\n\\t\\t\\tabs(mPosition.z - highlightedPointCoordinate.z) < 0.0001) {\\n\\t\\t\\tvHighlight = 1.0;\\n\\t\\t\\tgl_PointSize = pointSize * highlightedPointScale;\\n\\t\\t} else {\\n\\t\\t\\tvHighlight = 0.0;\\n\\t\\t}\\n\\t#endif\\n\\n\\t// ---------------------\\n\\t// OPACITY\\n\\t// ---------------------\\n\\n\\t#ifndef color_type_point_index\\n\\t\\t#ifdef attenuated_opacity\\n\\t\\t\\tvOpacity = opacity * exp(-length(-mvPosition.xyz) / opacityAttenuation);\\n\\t\\t#else\\n\\t\\t\\tvOpacity = opacity;\\n\\t\\t#endif\\n\\t#endif\\n\\n\\t// ---------------------\\n\\t// FILTERING\\n\\t// ---------------------\\n\\n\\t#ifdef use_filter_by_normal\\n\\t\\tbool discardPoint = false;\\n\\t\\t// Absolute normal filtering\\n\\t\\tif (normalFilteringMode == 1) {\\n\\t\\t\\tdiscardPoint = (abs((modelViewMatrix * vec4(normal, 0.0)).z) > filterByNormalThreshold);\\n\\t\\t}\\n\\t\\t// less than equal to\\n\\t\\telse if (normalFilteringMode == 2) {\\n\\t\\t\\tdiscardPoint = (modelViewMatrix * vec4(normal, 0.0)).z <= filterByNormalThreshold;\\n\\t\\t\\t}\\n\\t\\t// greater than\\n\\t\\telse if(normalFilteringMode == 3) {\\n\\t\\t\\tdiscardPoint = (modelViewMatrix * vec4(normal, 0.0)).z > filterByNormalThreshold;\\n\\t\\t\\t}\\n\\n\\t\\tif (discardPoint)\\n\\t\\t{\\n\\t\\t\\tgl_Position = vec4(0.0, 0.0, 2.0, 1.0);\\n\\t\\t}\\n\\t#endif\\n\\n\\t// ---------------------\\n\\t// POINT COLOR\\n\\t// ---------------------\\n\\n\\t#ifdef color_type_rgb\\n\\t\\tvColor = getRGB();\\n\\t#elif defined color_type_height\\n\\t\\tvColor = getElevation();\\n\\t#elif defined color_type_rgb_height\\n\\t\\tvec3 cHeight = getElevation();\\n\\t\\tvColor = (1.0 - transition) * getRGB() + transition * cHeight;\\n\\t#elif defined color_type_depth\\n\\t\\tfloat linearDepth = -mvPosition.z ;\\n\\t\\tfloat expDepth = (gl_Position.z / gl_Position.w) * 0.5 + 0.5;\\n\\t\\tvColor = vec3(linearDepth, expDepth, 0.0);\\n\\t#elif defined color_type_intensity\\n\\t\\tfloat w = getIntensity();\\n\\t\\tvColor = vec3(w, w, w);\\n\\t#elif defined color_type_intensity_gradient\\n\\t\\tfloat w = getIntensity();\\n\\t\\tvColor = texture2D(gradient, vec2(w, 1.0 - w)).rgb;\\n\\t#elif defined color_type_color\\n\\t\\tvColor = uColor;\\n\\t#elif defined color_type_lod\\n\\tfloat w = getLOD() / 10.0;\\n\\tvColor = texture2D(gradient, vec2(w, 1.0 - w)).rgb;\\n\\t#elif defined color_type_point_index\\n\\t\\tvColor = indices.rgb;\\n\\t#elif defined color_type_classification\\n\\t  vec4 cl = getClassification();\\n\\t\\tvColor = cl.rgb;\\n\\t#elif defined color_type_return_number\\n\\t\\tvColor = getReturnNumber();\\n\\t#elif defined color_type_source\\n\\t\\tvColor = getSourceID();\\n\\t#elif defined color_type_normal\\n\\t\\tvColor = (modelMatrix * vec4(normal, 0.0)).xyz;\\n\\t#elif defined color_type_phong\\n\\t\\tvColor = color;\\n\\t#elif defined color_type_composite\\n\\t\\tvColor = getCompositeColor();\\n\\t#endif\\n\\n\\t#if !defined color_type_composite && defined color_type_classification\\n\\t\\tif (cl.a == 0.0) {\\n\\t\\t\\tgl_Position = vec4(100.0, 100.0, 100.0, 0.0);\\n\\t\\t\\treturn;\\n\\t\\t}\\n\\t#endif\\n\\n\\t// ---------------------\\n\\t// CLIPPING\\n\\t// ---------------------\\n\\n\\t#if defined use_clip_box\\n\\t\\tbool insideAny = false;\\n\\t\\tfor (int i = 0; i < max_clip_boxes; i++) {\\n\\t\\t\\tif (i == int(clipBoxCount)) {\\n\\t\\t\\t\\tbreak;\\n\\t\\t\\t}\\n\\n\\t\\t\\tvec4 clipPosition = clipBoxes[i] * modelMatrix * vec4(position, 1.0);\\n\\t\\t\\tbool inside = -0.5 <= clipPosition.x && clipPosition.x <= 0.5;\\n\\t\\t\\tinside = inside && -0.5 <= clipPosition.y && clipPosition.y <= 0.5;\\n\\t\\t\\tinside = inside && -0.5 <= clipPosition.z && clipPosition.z <= 0.5;\\n\\t\\t\\tinsideAny = insideAny || inside;\\n\\t\\t}\\n\\n\\t\\tif (!insideAny) {\\n\\t\\t\\t#if defined clip_outside\\n\\t\\t\\t\\tgl_Position = vec4(1000.0, 1000.0, 1000.0, 1.0);\\n\\t\\t\\t#elif defined clip_highlight_inside && !defined(color_type_depth)\\n\\t\\t\\t\\tfloat c = (vColor.r + vColor.g + vColor.b) / 6.0;\\n\\t\\t\\t#endif\\n\\t\\t} else {\\n\\t\\t\\t#if defined clip_highlight_inside\\n\\t\\t\\t\\tvColor.r += 0.5;\\n\\t\\t\\t#endif\\n\\t\\t}\\n\\t#endif\\n}\\n");//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiMjQ1LmpzIiwibWFwcGluZ3MiOiI7OztBQUFBIiwic291cmNlcyI6WyJ3ZWJwYWNrOi8vcG90cmVlLy4vc3JjL21hdGVyaWFscy9zaGFkZXJzL3BvaW50Y2xvdWQudmVydD9lZmM4Il0sInNvdXJjZXNDb250ZW50IjpbImV4cG9ydCBkZWZhdWx0IFwicHJlY2lzaW9uIGhpZ2hwIGZsb2F0O1xcbnByZWNpc2lvbiBoaWdocCBpbnQ7XFxuXFxuI2RlZmluZSBtYXhfY2xpcF9ib3hlcyAzMFxcblxcbmF0dHJpYnV0ZSB2ZWMzIHBvc2l0aW9uO1xcbmF0dHJpYnV0ZSB2ZWMzIGNvbG9yO1xcblxcbiNpZmRlZiBjb2xvcl9yZ2JhXFxuXFx0YXR0cmlidXRlIHZlYzQgcmdiYTtcXG4jZW5kaWZcXG5cXG5hdHRyaWJ1dGUgdmVjMyBub3JtYWw7XFxuYXR0cmlidXRlIGZsb2F0IGludGVuc2l0eTtcXG5hdHRyaWJ1dGUgZmxvYXQgY2xhc3NpZmljYXRpb247XFxuYXR0cmlidXRlIGZsb2F0IHJldHVybk51bWJlcjtcXG5hdHRyaWJ1dGUgZmxvYXQgbnVtYmVyT2ZSZXR1cm5zO1xcbmF0dHJpYnV0ZSBmbG9hdCBwb2ludFNvdXJjZUlEO1xcbmF0dHJpYnV0ZSB2ZWM0IGluZGljZXM7XFxuYXR0cmlidXRlIHZlYzIgdXY7XFxuXFxudW5pZm9ybSBtYXQ0IG1vZGVsTWF0cml4O1xcbnVuaWZvcm0gbWF0NCBtb2RlbFZpZXdNYXRyaXg7XFxudW5pZm9ybSBtYXQ0IHByb2plY3Rpb25NYXRyaXg7XFxudW5pZm9ybSBtYXQ0IHZpZXdNYXRyaXg7XFxudW5pZm9ybSBtYXQzIG5vcm1hbE1hdHJpeDtcXG5cXG51bmlmb3JtIGZsb2F0IHBjSW5kZXg7XFxuXFxudW5pZm9ybSBmbG9hdCBzY3JlZW5XaWR0aDtcXG51bmlmb3JtIGZsb2F0IHNjcmVlbkhlaWdodDtcXG51bmlmb3JtIGZsb2F0IGZvdjtcXG51bmlmb3JtIGZsb2F0IHNwYWNpbmc7XFxuXFxuI2lmIGRlZmluZWQgdXNlX2NsaXBfYm94XFxuXFx0dW5pZm9ybSBtYXQ0IGNsaXBCb3hlc1ttYXhfY2xpcF9ib3hlc107XFxuI2VuZGlmXFxuXFxudW5pZm9ybSBmbG9hdCBoZWlnaHRNaW47XFxudW5pZm9ybSBmbG9hdCBoZWlnaHRNYXg7XFxudW5pZm9ybSBmbG9hdCBzaXplOyAvLyBwaXhlbCBzaXplIGZhY3RvclxcbnVuaWZvcm0gZmxvYXQgbWluU2l6ZTsgLy8gbWluaW11bSBwaXhlbCBzaXplXFxudW5pZm9ybSBmbG9hdCBtYXhTaXplOyAvLyBtYXhpbXVtIHBpeGVsIHNpemVcXG51bmlmb3JtIGZsb2F0IG9jdHJlZVNpemU7XFxudW5pZm9ybSB2ZWMzIGJiU2l6ZTtcXG51bmlmb3JtIHZlYzMgdUNvbG9yO1xcbnVuaWZvcm0gZmxvYXQgb3BhY2l0eTtcXG51bmlmb3JtIGZsb2F0IGNsaXBCb3hDb3VudDtcXG51bmlmb3JtIGZsb2F0IGxldmVsO1xcbnVuaWZvcm0gZmxvYXQgdm5TdGFydDtcXG51bmlmb3JtIGJvb2wgaXNMZWFmTm9kZTtcXG5cXG51bmlmb3JtIGZsb2F0IGZpbHRlckJ5Tm9ybWFsVGhyZXNob2xkO1xcbnVuaWZvcm0gdmVjMiBpbnRlbnNpdHlSYW5nZTtcXG51bmlmb3JtIGZsb2F0IG9wYWNpdHlBdHRlbnVhdGlvbjtcXG51bmlmb3JtIGZsb2F0IGludGVuc2l0eUdhbW1hO1xcbnVuaWZvcm0gZmxvYXQgaW50ZW5zaXR5Q29udHJhc3Q7XFxudW5pZm9ybSBmbG9hdCBpbnRlbnNpdHlCcmlnaHRuZXNzO1xcbnVuaWZvcm0gZmxvYXQgcmdiR2FtbWE7XFxudW5pZm9ybSBmbG9hdCByZ2JDb250cmFzdDtcXG51bmlmb3JtIGZsb2F0IHJnYkJyaWdodG5lc3M7XFxudW5pZm9ybSBmbG9hdCB0cmFuc2l0aW9uO1xcbnVuaWZvcm0gZmxvYXQgd1JHQjtcXG51bmlmb3JtIGZsb2F0IHdJbnRlbnNpdHk7XFxudW5pZm9ybSBmbG9hdCB3RWxldmF0aW9uO1xcbnVuaWZvcm0gZmxvYXQgd0NsYXNzaWZpY2F0aW9uO1xcbnVuaWZvcm0gZmxvYXQgd1JldHVybk51bWJlcjtcXG51bmlmb3JtIGZsb2F0IHdTb3VyY2VJRDtcXG5cXG51bmlmb3JtIHNhbXBsZXIyRCB2aXNpYmxlTm9kZXM7XFxudW5pZm9ybSBzYW1wbGVyMkQgZ3JhZGllbnQ7XFxudW5pZm9ybSBzYW1wbGVyMkQgY2xhc3NpZmljYXRpb25MVVQ7XFxudW5pZm9ybSBzYW1wbGVyMkQgZGVwdGhNYXA7XFxuXFxuI2lmZGVmIHVzZV90ZXh0dXJlX2JsZW5kaW5nXFxuXFx0dW5pZm9ybSBzYW1wbGVyMkQgYmFja2dyb3VuZE1hcDtcXG4jZW5kaWZcXG5cXG4jaWZkZWYgdXNlX3BvaW50X2Nsb3VkX21peGluZ1xcblxcdHVuaWZvcm0gaW50IHBvaW50Q2xvdWRNaXhpbmdNb2RlO1xcblxcdHVuaWZvcm0gZmxvYXQgcG9pbnRDbG91ZElEO1xcblxcblxcdHVuaWZvcm0gZmxvYXQgcG9pbnRDbG91ZE1peEFuZ2xlO1xcblxcdHVuaWZvcm0gZmxvYXQgc3RyaXBlRGlzdGFuY2VYO1xcblxcdHVuaWZvcm0gZmxvYXQgc3RyaXBlRGlzdGFuY2VZO1xcblxcblxcdHVuaWZvcm0gZmxvYXQgc3RyaXBlRGl2aXNvclg7XFxuXFx0dW5pZm9ybSBmbG9hdCBzdHJpcGVEaXZpc29yWTtcXG4jZW5kaWZcXG5cXG4jaWZkZWYgaGlnaGxpZ2h0X3BvaW50XFxuXFx0dW5pZm9ybSB2ZWMzIGhpZ2hsaWdodGVkUG9pbnRDb29yZGluYXRlO1xcblxcdHVuaWZvcm0gYm9vbCBlbmFibGVQb2ludEhpZ2hsaWdodGluZztcXG5cXHR1bmlmb3JtIGZsb2F0IGhpZ2hsaWdodGVkUG9pbnRTY2FsZTtcXG4jZW5kaWZcXG5cXG4jaWZkZWYgdXNlX2ZpbHRlcl9ieV9ub3JtYWxcXG5cXHR1bmlmb3JtIGludCBub3JtYWxGaWx0ZXJpbmdNb2RlO1xcbiNlbmRpZlxcblxcbnZhcnlpbmcgdmVjMyB2Q29sb3I7XFxuXFxuI2lmICFkZWZpbmVkKGNvbG9yX3R5cGVfcG9pbnRfaW5kZXgpXFxuXFx0dmFyeWluZyBmbG9hdCB2T3BhY2l0eTtcXG4jZW5kaWZcXG5cXG4jaWYgZGVmaW5lZCh3ZWlnaHRlZF9zcGxhdHMpXFxuXFx0dmFyeWluZyBmbG9hdCB2TGluZWFyRGVwdGg7XFxuI2VuZGlmXFxuXFxuI2lmICFkZWZpbmVkKHBhcmFib2xvaWRfcG9pbnRfc2hhcGUpICYmIGRlZmluZWQodXNlX2VkbClcXG5cXHR2YXJ5aW5nIGZsb2F0IHZMb2dEZXB0aDtcXG4jZW5kaWZcXG5cXG4jaWYgZGVmaW5lZChjb2xvcl90eXBlX3Bob25nKSAmJiAoTUFYX1BPSU5UX0xJR0hUUyA+IDAgfHwgTUFYX0RJUl9MSUdIVFMgPiAwKSB8fCBkZWZpbmVkKHBhcmFib2xvaWRfcG9pbnRfc2hhcGUpXFxuXFx0dmFyeWluZyB2ZWMzIHZWaWV3UG9zaXRpb247XFxuI2VuZGlmXFxuXFxuI2lmIGRlZmluZWQod2VpZ2h0ZWRfc3BsYXRzKSB8fCBkZWZpbmVkKHBhcmFib2xvaWRfcG9pbnRfc2hhcGUpXFxuXFx0dmFyeWluZyBmbG9hdCB2UmFkaXVzO1xcbiNlbmRpZlxcblxcbiNpZiBkZWZpbmVkKGNvbG9yX3R5cGVfcGhvbmcpICYmIChNQVhfUE9JTlRfTElHSFRTID4gMCB8fCBNQVhfRElSX0xJR0hUUyA+IDApXFxuXFx0dmFyeWluZyB2ZWMzIHZOb3JtYWw7XFxuI2VuZGlmXFxuXFxuI2lmZGVmIGhpZ2hsaWdodF9wb2ludFxcblxcdHZhcnlpbmcgZmxvYXQgdkhpZ2hsaWdodDtcXG4jZW5kaWZcXG5cXG4vLyAtLS0tLS0tLS0tLS0tLS0tLS0tLS1cXG4vLyBPQ1RSRUVcXG4vLyAtLS0tLS0tLS0tLS0tLS0tLS0tLS1cXG5cXG4jaWYgKGRlZmluZWQoYWRhcHRpdmVfcG9pbnRfc2l6ZSkgfHwgZGVmaW5lZChjb2xvcl90eXBlX2xvZCkpICYmIGRlZmluZWQodHJlZV90eXBlX29jdHJlZSlcXG5cXG4vKipcXG4gKiBSb3VuZHMgdGhlIHNwZWNpZmllZCBudW1iZXIgdG8gdGhlIGNsb3Nlc3QgaW50ZWdlci5cXG4gKi9cXG5mbG9hdCByb3VuZChmbG9hdCBudW1iZXIpe1xcblxcdHJldHVybiBmbG9vcihudW1iZXIgKyAwLjUpO1xcbn1cXG5cXG4vKipcXG4gKiBHZXRzIHRoZSBudW1iZXIgb2YgMS1iaXRzIHVwIHRvIGluY2x1c2l2ZSBpbmRleCBwb3NpdGlvbi5cXG4gKlxcbiAqIG51bWJlciBpcyB0cmVhdGVkIGFzIGlmIGl0IHdlcmUgYW4gaW50ZWdlciBpbiB0aGUgcmFuZ2UgMC0yNTVcXG4gKi9cXG5pbnQgbnVtYmVyT2ZPbmVzKGludCBudW1iZXIsIGludCBpbmRleCkge1xcblxcdGludCBudW1PbmVzID0gMDtcXG5cXHRpbnQgdG1wID0gMTI4O1xcblxcdGZvciAoaW50IGkgPSA3OyBpID49IDA7IGktLSkge1xcblxcblxcdFxcdGlmIChudW1iZXIgPj0gdG1wKSB7XFxuXFx0XFx0XFx0bnVtYmVyID0gbnVtYmVyIC0gdG1wO1xcblxcblxcdFxcdFxcdGlmIChpIDw9IGluZGV4KSB7XFxuXFx0XFx0XFx0XFx0bnVtT25lcysrO1xcblxcdFxcdFxcdH1cXG5cXHRcXHR9XFxuXFxuXFx0XFx0dG1wID0gdG1wIC8gMjtcXG5cXHR9XFxuXFxuXFx0cmV0dXJuIG51bU9uZXM7XFxufVxcblxcbi8qKlxcbiAqIENoZWNrcyB3aGV0aGVyIHRoZSBiaXQgYXQgaW5kZXggaXMgMS4wXFxuICpcXG4gKiBudW1iZXIgaXMgdHJlYXRlZCBhcyBpZiBpdCB3ZXJlIGFuIGludGVnZXIgaW4gdGhlIHJhbmdlIDAtMjU1XFxuICovXFxuYm9vbCBpc0JpdFNldChpbnQgbnVtYmVyLCBpbnQgaW5kZXgpe1xcblxcblxcdC8vIHdlaXJkIG11bHRpIGVsc2UgaWYgZHVlIHRvIGxhY2sgb2YgcHJvcGVyIGFycmF5LCBpbnQgYW5kIGJpdHdpc2Ugc3VwcG9ydCBpbiBXZWJHTCAxLjBcXG5cXHRpbnQgcG93aSA9IDE7XFxuXFx0aWYgKGluZGV4ID09IDApIHtcXG5cXHRcXHRwb3dpID0gMTtcXG5cXHR9IGVsc2UgaWYgKGluZGV4ID09IDEpIHtcXG5cXHRcXHRwb3dpID0gMjtcXG5cXHR9IGVsc2UgaWYgKGluZGV4ID09IDIpIHtcXG5cXHRcXHRwb3dpID0gNDtcXG5cXHR9IGVsc2UgaWYgKGluZGV4ID09IDMpIHtcXG5cXHRcXHRwb3dpID0gODtcXG5cXHR9IGVsc2UgaWYgKGluZGV4ID09IDQpIHtcXG5cXHRcXHRwb3dpID0gMTY7XFxuXFx0fSBlbHNlIGlmIChpbmRleCA9PSA1KSB7XFxuXFx0XFx0cG93aSA9IDMyO1xcblxcdH0gZWxzZSBpZiAoaW5kZXggPT0gNikge1xcblxcdFxcdHBvd2kgPSA2NDtcXG5cXHR9IGVsc2UgaWYgKGluZGV4ID09IDcpIHtcXG5cXHRcXHRwb3dpID0gMTI4O1xcblxcdH1cXG5cXG5cXHRpbnQgbmRwID0gbnVtYmVyIC8gcG93aTtcXG5cXG5cXHRyZXR1cm4gbW9kKGZsb2F0KG5kcCksIDIuMCkgIT0gMC4wO1xcbn1cXG5cXG4vKipcXG4gKiBHZXRzIHRoZSB0aGUgTE9EIGF0IHRoZSBwb2ludCBwb3NpdGlvbi5cXG4gKi9cXG5mbG9hdCBnZXRMT0QoKSB7XFxuXFx0dmVjMyBvZmZzZXQgPSB2ZWMzKDAuMCwgMC4wLCAwLjApO1xcblxcdGludCBpT2Zmc2V0ID0gaW50KHZuU3RhcnQpO1xcblxcdGZsb2F0IGRlcHRoID0gbGV2ZWw7XFxuXFxuXFx0Zm9yIChmbG9hdCBpID0gMC4wOyBpIDw9IDMwLjA7IGkrKykge1xcblxcdFxcdGZsb2F0IG5vZGVTaXplQXRMZXZlbCA9IG9jdHJlZVNpemUgIC8gcG93KDIuMCwgaSArIGxldmVsICsgMC4wKTtcXG5cXG5cXHRcXHR2ZWMzIGluZGV4M2QgPSAocG9zaXRpb24tb2Zmc2V0KSAvIG5vZGVTaXplQXRMZXZlbDtcXG5cXHRcXHRpbmRleDNkID0gZmxvb3IoaW5kZXgzZCArIDAuNSk7XFxuXFx0XFx0aW50IGluZGV4ID0gaW50KHJvdW5kKDQuMCAqIGluZGV4M2QueCArIDIuMCAqIGluZGV4M2QueSArIGluZGV4M2QueikpO1xcblxcblxcdFxcdHZlYzQgdmFsdWUgPSB0ZXh0dXJlMkQodmlzaWJsZU5vZGVzLCB2ZWMyKGZsb2F0KGlPZmZzZXQpIC8gMjA0OC4wLCAwLjApKTtcXG5cXHRcXHRpbnQgbWFzayA9IGludChyb3VuZCh2YWx1ZS5yICogMjU1LjApKTtcXG5cXG5cXHRcXHRpZiAoaXNCaXRTZXQobWFzaywgaW5kZXgpKSB7XFxuXFx0XFx0XFx0Ly8gdGhlcmUgYXJlIG1vcmUgdmlzaWJsZSBjaGlsZCBub2RlcyBhdCB0aGlzIHBvc2l0aW9uXFxuXFx0XFx0XFx0aW50IGFkdmFuY2VHID0gaW50KHJvdW5kKHZhbHVlLmcgKiAyNTUuMCkpICogMjU2O1xcblxcdFxcdFxcdGludCBhZHZhbmNlQiA9IGludChyb3VuZCh2YWx1ZS5iICogMjU1LjApKTtcXG5cXHRcXHRcXHRpbnQgYWR2YW5jZUNoaWxkID0gbnVtYmVyT2ZPbmVzKG1hc2ssIGluZGV4IC0gMSk7XFxuXFx0XFx0XFx0aW50IGFkdmFuY2UgPSBhZHZhbmNlRyArIGFkdmFuY2VCICsgYWR2YW5jZUNoaWxkO1xcblxcblxcdFxcdFxcdGlPZmZzZXQgPSBpT2Zmc2V0ICsgYWR2YW5jZTtcXG5cXG5cXHRcXHRcXHRkZXB0aCsrO1xcblxcdFxcdH0gZWxzZSB7XFxuXFx0XFx0XFx0cmV0dXJuIHZhbHVlLmEgKiAyNTUuMDsgLy8gbm8gbW9yZSB2aXNpYmxlIGNoaWxkIG5vZGVzIGF0IHRoaXMgcG9zaXRpb25cXG5cXHRcXHR9XFxuXFxuXFx0XFx0b2Zmc2V0ID0gb2Zmc2V0ICsgKHZlYzMoMS4wLCAxLjAsIDEuMCkgKiBub2RlU2l6ZUF0TGV2ZWwgKiAwLjUpICogaW5kZXgzZDtcXG5cXHR9XFxuXFxuXFx0cmV0dXJuIGRlcHRoO1xcbn1cXG5cXG5mbG9hdCBnZXRQb2ludFNpemVBdHRlbnVhdGlvbigpIHtcXG5cXHRyZXR1cm4gMC41ICogcG93KDIuMCwgZ2V0TE9EKCkpO1xcbn1cXG5cXG4jZW5kaWZcXG5cXG4vLyAtLS0tLS0tLS0tLS0tLS0tLS0tLS1cXG4vLyBLRC1UUkVFXFxuLy8gLS0tLS0tLS0tLS0tLS0tLS0tLS0tXFxuXFxuI2lmIChkZWZpbmVkKGFkYXB0aXZlX3BvaW50X3NpemUpIHx8IGRlZmluZWQoY29sb3JfdHlwZV9sb2QpKSAmJiBkZWZpbmVkKHRyZWVfdHlwZV9rZHRyZWUpXFxuXFxuZmxvYXQgZ2V0TE9EKCkge1xcblxcdHZlYzMgb2Zmc2V0ID0gdmVjMygwLjAsIDAuMCwgMC4wKTtcXG5cXHRmbG9hdCBpbnRPZmZzZXQgPSAwLjA7XFxuXFx0ZmxvYXQgZGVwdGggPSAwLjA7XFxuXFxuXFx0dmVjMyBzaXplID0gYmJTaXplO1xcblxcdHZlYzMgcG9zID0gcG9zaXRpb247XFxuXFxuXFx0Zm9yIChmbG9hdCBpID0gMC4wOyBpIDw9IDEwMDAuMDsgaSsrKSB7XFxuXFxuXFx0XFx0dmVjNCB2YWx1ZSA9IHRleHR1cmUyRCh2aXNpYmxlTm9kZXMsIHZlYzIoaW50T2Zmc2V0IC8gMjA0OC4wLCAwLjApKTtcXG5cXG5cXHRcXHRpbnQgY2hpbGRyZW4gPSBpbnQodmFsdWUuciAqIDI1NS4wKTtcXG5cXHRcXHRmbG9hdCBuZXh0ID0gdmFsdWUuZyAqIDI1NS4wO1xcblxcdFxcdGludCBzcGxpdCA9IGludCh2YWx1ZS5iICogMjU1LjApO1xcblxcblxcdFxcdGlmIChuZXh0ID09IDAuMCkge1xcblxcdFxcdCBcXHRyZXR1cm4gZGVwdGg7XFxuXFx0XFx0fVxcblxcblxcdFxcdHZlYzMgc3BsaXR2ID0gdmVjMygwLjAsIDAuMCwgMC4wKTtcXG5cXHRcXHRpZiAoc3BsaXQgPT0gMSkge1xcblxcdFxcdFxcdHNwbGl0di54ID0gMS4wO1xcblxcdFxcdH0gZWxzZSBpZiAoc3BsaXQgPT0gMikge1xcblxcdFxcdCBcXHRzcGxpdHYueSA9IDEuMDtcXG5cXHRcXHR9IGVsc2UgaWYgKHNwbGl0ID09IDQpIHtcXG5cXHRcXHQgXFx0c3BsaXR2LnogPSAxLjA7XFxuXFx0XFx0fVxcblxcblxcdFxcdGludE9mZnNldCA9IGludE9mZnNldCArIG5leHQ7XFxuXFxuXFx0XFx0ZmxvYXQgZmFjdG9yID0gbGVuZ3RoKHBvcyAqIHNwbGl0diAvIHNpemUpO1xcblxcdFxcdGlmIChmYWN0b3IgPCAwLjUpIHtcXG5cXHRcXHQgXFx0Ly8gbGVmdFxcblxcdFxcdFxcdGlmIChjaGlsZHJlbiA9PSAwIHx8IGNoaWxkcmVuID09IDIpIHtcXG5cXHRcXHRcXHRcXHRyZXR1cm4gZGVwdGg7XFxuXFx0XFx0XFx0fVxcblxcdFxcdH0gZWxzZSB7XFxuXFx0XFx0XFx0Ly8gcmlnaHRcXG5cXHRcXHRcXHRwb3MgPSBwb3MgLSBzaXplICogc3BsaXR2ICogMC41O1xcblxcdFxcdFxcdGlmIChjaGlsZHJlbiA9PSAwIHx8IGNoaWxkcmVuID09IDEpIHtcXG5cXHRcXHRcXHRcXHRyZXR1cm4gZGVwdGg7XFxuXFx0XFx0XFx0fVxcblxcdFxcdFxcdGlmIChjaGlsZHJlbiA9PSAzKSB7XFxuXFx0XFx0XFx0XFx0aW50T2Zmc2V0ID0gaW50T2Zmc2V0ICsgMS4wO1xcblxcdFxcdFxcdH1cXG5cXHRcXHR9XFxuXFx0XFx0c2l6ZSA9IHNpemUgKiAoKDEuMCAtIChzcGxpdHYgKyAxLjApIC8gMi4wKSArIDAuNSk7XFxuXFxuXFx0XFx0ZGVwdGgrKztcXG5cXHR9XFxuXFxuXFxuXFx0cmV0dXJuIGRlcHRoO1xcbn1cXG5cXG5mbG9hdCBnZXRQb2ludFNpemVBdHRlbnVhdGlvbigpIHtcXG5cXHRyZXR1cm4gMC41ICogcG93KDEuMywgZ2V0TE9EKCkpO1xcbn1cXG5cXG4jZW5kaWZcXG5cXG4vLyBmb3JtdWxhIGFkYXB0ZWQgZnJvbTogaHR0cDovL3d3dy5kZnN0dWRpb3MuY28udWsvYXJ0aWNsZXMvcHJvZ3JhbW1pbmcvaW1hZ2UtcHJvZ3JhbW1pbmctYWxnb3JpdGhtcy9pbWFnZS1wcm9jZXNzaW5nLWFsZ29yaXRobXMtcGFydC01LWNvbnRyYXN0LWFkanVzdG1lbnQvXFxuZmxvYXQgZ2V0Q29udHJhc3RGYWN0b3IoZmxvYXQgY29udHJhc3QpIHtcXG5cXHRyZXR1cm4gKDEuMDE1ODczMDE1ODczMDE1NiAqIChjb250cmFzdCArIDEuMCkpIC8gKDEuMDE1ODczMDE1ODczMDE1NiAtIGNvbnRyYXN0KTtcXG59XFxuXFxudmVjMyBnZXRSR0IoKSB7XFxuXFx0XFxuXFx0I2lmZGVmIGNvbG9yX3JnYmFcXG5cXHRcXHR2ZWMzIHJnYiA9IHJnYmEucmdiO1xcblxcdCNlbHNlXFx0XFxuXFx0XFx0dmVjMyByZ2IgPSBjb2xvcjtcXG5cXHQjZW5kaWZcXHRcXHRcXG5cXG5cXHQjaWYgZGVmaW5lZCh1c2VfcmdiX2dhbW1hX2NvbnRyYXN0X2JyaWdodG5lc3MpXFxuXFx0XFx0cmdiID0gcG93KHJnYiwgdmVjMyhyZ2JHYW1tYSkpO1xcblxcdFxcdHJnYiA9IHJnYiArIHJnYkJyaWdodG5lc3M7XFxuXFx0XFx0cmdiID0gKHJnYiAtIDAuNSkgKiBnZXRDb250cmFzdEZhY3RvcihyZ2JDb250cmFzdCkgKyAwLjU7XFxuXFx0XFx0cmdiID0gY2xhbXAocmdiLCAwLjAsIDEuMCk7XFxuXFx0XFx0cmV0dXJuIHJnYjtcXG5cXHQjZWxzZVxcblxcdFxcdHJldHVybiByZ2I7XFxuXFx0I2VuZGlmXFxufVxcblxcbmZsb2F0IGdldEludGVuc2l0eSgpIHtcXG5cXHRmbG9hdCB3ID0gKGludGVuc2l0eSAtIGludGVuc2l0eVJhbmdlLngpIC8gKGludGVuc2l0eVJhbmdlLnkgLSBpbnRlbnNpdHlSYW5nZS54KTtcXG5cXHR3ID0gcG93KHcsIGludGVuc2l0eUdhbW1hKTtcXG5cXHR3ID0gdyArIGludGVuc2l0eUJyaWdodG5lc3M7XFxuXFx0dyA9ICh3IC0gMC41KSAqIGdldENvbnRyYXN0RmFjdG9yKGludGVuc2l0eUNvbnRyYXN0KSArIDAuNTtcXG5cXHR3ID0gY2xhbXAodywgMC4wLCAxLjApO1xcblxcblxcdHJldHVybiB3O1xcbn1cXG5cXG52ZWMzIGdldEVsZXZhdGlvbigpIHtcXG5cXHR2ZWM0IHdvcmxkID0gbW9kZWxNYXRyaXggKiB2ZWM0KCBwb3NpdGlvbiwgMS4wICk7XFxuXFx0ZmxvYXQgdyA9ICh3b3JsZC56IC0gaGVpZ2h0TWluKSAvIChoZWlnaHRNYXgtaGVpZ2h0TWluKTtcXG5cXHR2ZWMzIGNFbGV2YXRpb24gPSB0ZXh0dXJlMkQoZ3JhZGllbnQsIHZlYzIodywxLjAtdykpLnJnYjtcXG5cXG5cXHRyZXR1cm4gY0VsZXZhdGlvbjtcXG59XFxuXFxudmVjNCBnZXRDbGFzc2lmaWNhdGlvbigpIHtcXG5cXHR2ZWMyIHV2ID0gdmVjMihjbGFzc2lmaWNhdGlvbiAvIDI1NS4wLCAwLjUpO1xcblxcdHZlYzQgY2xhc3NDb2xvciA9IHRleHR1cmUyRChjbGFzc2lmaWNhdGlvbkxVVCwgdXYpO1xcblxcblxcdHJldHVybiBjbGFzc0NvbG9yO1xcbn1cXG5cXG52ZWMzIGdldFJldHVybk51bWJlcigpIHtcXG5cXHRpZiAobnVtYmVyT2ZSZXR1cm5zID09IDEuMCkge1xcblxcdFxcdHJldHVybiB2ZWMzKDEuMCwgMS4wLCAwLjApO1xcblxcdH0gZWxzZSB7XFxuXFx0XFx0aWYgKHJldHVybk51bWJlciA9PSAxLjApIHtcXG5cXHRcXHRcXHRyZXR1cm4gdmVjMygxLjAsIDAuMCwgMC4wKTtcXG5cXHRcXHR9IGVsc2UgaWYgKHJldHVybk51bWJlciA9PSBudW1iZXJPZlJldHVybnMpIHtcXG5cXHRcXHRcXHRyZXR1cm4gdmVjMygwLjAsIDAuMCwgMS4wKTtcXG5cXHRcXHR9IGVsc2Uge1xcblxcdFxcdFxcdHJldHVybiB2ZWMzKDAuMCwgMS4wLCAwLjApO1xcblxcdFxcdH1cXG5cXHR9XFxufVxcblxcbnZlYzMgZ2V0U291cmNlSUQoKSB7XFxuXFx0ZmxvYXQgdyA9IG1vZChwb2ludFNvdXJjZUlELCAxMC4wKSAvIDEwLjA7XFxuXFx0cmV0dXJuIHRleHR1cmUyRChncmFkaWVudCwgdmVjMih3LCAxLjAgLSB3KSkucmdiO1xcbn1cXG5cXG52ZWMzIGdldENvbXBvc2l0ZUNvbG9yKCkge1xcblxcdHZlYzMgYztcXG5cXHRmbG9hdCB3O1xcblxcblxcdGMgKz0gd1JHQiAqIGdldFJHQigpO1xcblxcdHcgKz0gd1JHQjtcXG5cXG5cXHRjICs9IHdJbnRlbnNpdHkgKiBnZXRJbnRlbnNpdHkoKSAqIHZlYzMoMS4wLCAxLjAsIDEuMCk7XFxuXFx0dyArPSB3SW50ZW5zaXR5O1xcblxcblxcdGMgKz0gd0VsZXZhdGlvbiAqIGdldEVsZXZhdGlvbigpO1xcblxcdHcgKz0gd0VsZXZhdGlvbjtcXG5cXG5cXHRjICs9IHdSZXR1cm5OdW1iZXIgKiBnZXRSZXR1cm5OdW1iZXIoKTtcXG5cXHR3ICs9IHdSZXR1cm5OdW1iZXI7XFxuXFxuXFx0YyArPSB3U291cmNlSUQgKiBnZXRTb3VyY2VJRCgpO1xcblxcdHcgKz0gd1NvdXJjZUlEO1xcblxcblxcdHZlYzQgY2wgPSB3Q2xhc3NpZmljYXRpb24gKiBnZXRDbGFzc2lmaWNhdGlvbigpO1xcblxcdGMgKz0gY2wuYSAqIGNsLnJnYjtcXG5cXHR3ICs9IHdDbGFzc2lmaWNhdGlvbiAqIGNsLmE7XFxuXFxuXFx0YyA9IGMgLyB3O1xcblxcblxcdGlmICh3ID09IDAuMCkge1xcblxcdFxcdGdsX1Bvc2l0aW9uID0gdmVjNCgxMDAuMCwgMTAwLjAsIDEwMC4wLCAwLjApO1xcblxcdH1cXG5cXG5cXHRyZXR1cm4gYztcXG59XFxuXFxudm9pZCBtYWluKCkge1xcblxcdHZlYzQgbXZQb3NpdGlvbiA9IG1vZGVsVmlld01hdHJpeCAqIHZlYzQocG9zaXRpb24sIDEuMCk7XFxuXFxuXFx0Z2xfUG9zaXRpb24gPSBwcm9qZWN0aW9uTWF0cml4ICogbXZQb3NpdGlvbjtcXG5cXG5cXHQjaWYgZGVmaW5lZChjb2xvcl90eXBlX3Bob25nKSAmJiAoTUFYX1BPSU5UX0xJR0hUUyA+IDAgfHwgTUFYX0RJUl9MSUdIVFMgPiAwKSB8fCBkZWZpbmVkKHBhcmFib2xvaWRfcG9pbnRfc2hhcGUpXFxuXFx0XFx0dlZpZXdQb3NpdGlvbiA9IG12UG9zaXRpb24ueHl6O1xcblxcdCNlbmRpZlxcblxcblxcdCNpZiBkZWZpbmVkIHdlaWdodGVkX3NwbGF0c1xcblxcdFxcdHZMaW5lYXJEZXB0aCA9IGdsX1Bvc2l0aW9uLnc7XFxuXFx0I2VuZGlmXFxuXFxuXFx0I2lmIGRlZmluZWQoY29sb3JfdHlwZV9waG9uZykgJiYgKE1BWF9QT0lOVF9MSUdIVFMgPiAwIHx8IE1BWF9ESVJfTElHSFRTID4gMClcXG5cXHRcXHR2Tm9ybWFsID0gbm9ybWFsaXplKG5vcm1hbE1hdHJpeCAqIG5vcm1hbCk7XFxuXFx0I2VuZGlmXFxuXFxuXFx0I2lmICFkZWZpbmVkKHBhcmFib2xvaWRfcG9pbnRfc2hhcGUpICYmIGRlZmluZWQodXNlX2VkbClcXG5cXHRcXHR2TG9nRGVwdGggPSBsb2cyKC1tdlBvc2l0aW9uLnopO1xcblxcdCNlbmRpZlxcblxcblxcdC8vIC0tLS0tLS0tLS0tLS0tLS0tLS0tLVxcblxcdC8vIFBPSU5UIFNJWkVcXG5cXHQvLyAtLS0tLS0tLS0tLS0tLS0tLS0tLS1cXG5cXG5cXHRmbG9hdCBwb2ludFNpemUgPSAxLjA7XFxuXFx0ZmxvYXQgc2xvcGUgPSB0YW4oZm92IC8gMi4wKTtcXG5cXHRmbG9hdCBwcm9qRmFjdG9yID0gIC0wLjUgKiBzY3JlZW5IZWlnaHQgLyAoc2xvcGUgKiBtdlBvc2l0aW9uLnopO1xcblxcblxcdCNpZiBkZWZpbmVkIGZpeGVkX3BvaW50X3NpemVcXG5cXHRcXHRwb2ludFNpemUgPSBzaXplO1xcblxcdCNlbGlmIGRlZmluZWQgYXR0ZW51YXRlZF9wb2ludF9zaXplXFxuXFx0XFx0cG9pbnRTaXplID0gc2l6ZSAqIHNwYWNpbmcgKiBwcm9qRmFjdG9yO1xcblxcdCNlbGlmIGRlZmluZWQgYWRhcHRpdmVfcG9pbnRfc2l6ZVxcblxcdFxcdGZsb2F0IHdvcmxkU3BhY2VTaXplID0gMi4wICogc2l6ZSAqIHNwYWNpbmcgLyBnZXRQb2ludFNpemVBdHRlbnVhdGlvbigpO1xcblxcdFxcdHBvaW50U2l6ZSA9IHdvcmxkU3BhY2VTaXplICogcHJvakZhY3RvcjtcXG5cXHQjZW5kaWZcXG5cXG5cXHRwb2ludFNpemUgPSBtYXgobWluU2l6ZSwgcG9pbnRTaXplKTtcXG5cXHRwb2ludFNpemUgPSBtaW4obWF4U2l6ZSwgcG9pbnRTaXplKTtcXG5cXG5cXHQjaWYgZGVmaW5lZCh3ZWlnaHRlZF9zcGxhdHMpIHx8IGRlZmluZWQocGFyYWJvbG9pZF9wb2ludF9zaGFwZSlcXG5cXHRcXHR2UmFkaXVzID0gcG9pbnRTaXplIC8gcHJvakZhY3RvcjtcXG5cXHQjZW5kaWZcXG5cXG5cXHRnbF9Qb2ludFNpemUgPSBwb2ludFNpemU7XFxuXFxuXFx0Ly8gLS0tLS0tLS0tLS0tLS0tLS0tLS0tXFxuXFx0Ly8gSElHSExJR0hUSU5HXFxuXFx0Ly8gLS0tLS0tLS0tLS0tLS0tLS0tLS0tXFxuXFxuXFx0I2lmZGVmIGhpZ2hsaWdodF9wb2ludFxcblxcdFxcdHZlYzQgbVBvc2l0aW9uID0gbW9kZWxNYXRyaXggKiB2ZWM0KHBvc2l0aW9uLCAxLjApO1xcblxcdFxcdGlmIChlbmFibGVQb2ludEhpZ2hsaWdodGluZyAmJiBhYnMobVBvc2l0aW9uLnggLSBoaWdobGlnaHRlZFBvaW50Q29vcmRpbmF0ZS54KSA8IDAuMDAwMSAmJlxcblxcdFxcdFxcdGFicyhtUG9zaXRpb24ueSAtIGhpZ2hsaWdodGVkUG9pbnRDb29yZGluYXRlLnkpIDwgMC4wMDAxICYmXFxuXFx0XFx0XFx0YWJzKG1Qb3NpdGlvbi56IC0gaGlnaGxpZ2h0ZWRQb2ludENvb3JkaW5hdGUueikgPCAwLjAwMDEpIHtcXG5cXHRcXHRcXHR2SGlnaGxpZ2h0ID0gMS4wO1xcblxcdFxcdFxcdGdsX1BvaW50U2l6ZSA9IHBvaW50U2l6ZSAqIGhpZ2hsaWdodGVkUG9pbnRTY2FsZTtcXG5cXHRcXHR9IGVsc2Uge1xcblxcdFxcdFxcdHZIaWdobGlnaHQgPSAwLjA7XFxuXFx0XFx0fVxcblxcdCNlbmRpZlxcblxcblxcdC8vIC0tLS0tLS0tLS0tLS0tLS0tLS0tLVxcblxcdC8vIE9QQUNJVFlcXG5cXHQvLyAtLS0tLS0tLS0tLS0tLS0tLS0tLS1cXG5cXG5cXHQjaWZuZGVmIGNvbG9yX3R5cGVfcG9pbnRfaW5kZXhcXG5cXHRcXHQjaWZkZWYgYXR0ZW51YXRlZF9vcGFjaXR5XFxuXFx0XFx0XFx0dk9wYWNpdHkgPSBvcGFjaXR5ICogZXhwKC1sZW5ndGgoLW12UG9zaXRpb24ueHl6KSAvIG9wYWNpdHlBdHRlbnVhdGlvbik7XFxuXFx0XFx0I2Vsc2VcXG5cXHRcXHRcXHR2T3BhY2l0eSA9IG9wYWNpdHk7XFxuXFx0XFx0I2VuZGlmXFxuXFx0I2VuZGlmXFxuXFxuXFx0Ly8gLS0tLS0tLS0tLS0tLS0tLS0tLS0tXFxuXFx0Ly8gRklMVEVSSU5HXFxuXFx0Ly8gLS0tLS0tLS0tLS0tLS0tLS0tLS0tXFxuXFxuXFx0I2lmZGVmIHVzZV9maWx0ZXJfYnlfbm9ybWFsXFxuXFx0XFx0Ym9vbCBkaXNjYXJkUG9pbnQgPSBmYWxzZTtcXG5cXHRcXHQvLyBBYnNvbHV0ZSBub3JtYWwgZmlsdGVyaW5nXFxuXFx0XFx0aWYgKG5vcm1hbEZpbHRlcmluZ01vZGUgPT0gMSkge1xcblxcdFxcdFxcdGRpc2NhcmRQb2ludCA9IChhYnMoKG1vZGVsVmlld01hdHJpeCAqIHZlYzQobm9ybWFsLCAwLjApKS56KSA+IGZpbHRlckJ5Tm9ybWFsVGhyZXNob2xkKTtcXG5cXHRcXHR9XFxuXFx0XFx0Ly8gbGVzcyB0aGFuIGVxdWFsIHRvXFxuXFx0XFx0ZWxzZSBpZiAobm9ybWFsRmlsdGVyaW5nTW9kZSA9PSAyKSB7XFxuXFx0XFx0XFx0ZGlzY2FyZFBvaW50ID0gKG1vZGVsVmlld01hdHJpeCAqIHZlYzQobm9ybWFsLCAwLjApKS56IDw9IGZpbHRlckJ5Tm9ybWFsVGhyZXNob2xkO1xcblxcdFxcdFxcdH1cXG5cXHRcXHQvLyBncmVhdGVyIHRoYW5cXG5cXHRcXHRlbHNlIGlmKG5vcm1hbEZpbHRlcmluZ01vZGUgPT0gMykge1xcblxcdFxcdFxcdGRpc2NhcmRQb2ludCA9IChtb2RlbFZpZXdNYXRyaXggKiB2ZWM0KG5vcm1hbCwgMC4wKSkueiA+IGZpbHRlckJ5Tm9ybWFsVGhyZXNob2xkO1xcblxcdFxcdFxcdH1cXG5cXG5cXHRcXHRpZiAoZGlzY2FyZFBvaW50KVxcblxcdFxcdHtcXG5cXHRcXHRcXHRnbF9Qb3NpdGlvbiA9IHZlYzQoMC4wLCAwLjAsIDIuMCwgMS4wKTtcXG5cXHRcXHR9XFxuXFx0I2VuZGlmXFxuXFxuXFx0Ly8gLS0tLS0tLS0tLS0tLS0tLS0tLS0tXFxuXFx0Ly8gUE9JTlQgQ09MT1JcXG5cXHQvLyAtLS0tLS0tLS0tLS0tLS0tLS0tLS1cXG5cXG5cXHQjaWZkZWYgY29sb3JfdHlwZV9yZ2JcXG5cXHRcXHR2Q29sb3IgPSBnZXRSR0IoKTtcXG5cXHQjZWxpZiBkZWZpbmVkIGNvbG9yX3R5cGVfaGVpZ2h0XFxuXFx0XFx0dkNvbG9yID0gZ2V0RWxldmF0aW9uKCk7XFxuXFx0I2VsaWYgZGVmaW5lZCBjb2xvcl90eXBlX3JnYl9oZWlnaHRcXG5cXHRcXHR2ZWMzIGNIZWlnaHQgPSBnZXRFbGV2YXRpb24oKTtcXG5cXHRcXHR2Q29sb3IgPSAoMS4wIC0gdHJhbnNpdGlvbikgKiBnZXRSR0IoKSArIHRyYW5zaXRpb24gKiBjSGVpZ2h0O1xcblxcdCNlbGlmIGRlZmluZWQgY29sb3JfdHlwZV9kZXB0aFxcblxcdFxcdGZsb2F0IGxpbmVhckRlcHRoID0gLW12UG9zaXRpb24ueiA7XFxuXFx0XFx0ZmxvYXQgZXhwRGVwdGggPSAoZ2xfUG9zaXRpb24ueiAvIGdsX1Bvc2l0aW9uLncpICogMC41ICsgMC41O1xcblxcdFxcdHZDb2xvciA9IHZlYzMobGluZWFyRGVwdGgsIGV4cERlcHRoLCAwLjApO1xcblxcdCNlbGlmIGRlZmluZWQgY29sb3JfdHlwZV9pbnRlbnNpdHlcXG5cXHRcXHRmbG9hdCB3ID0gZ2V0SW50ZW5zaXR5KCk7XFxuXFx0XFx0dkNvbG9yID0gdmVjMyh3LCB3LCB3KTtcXG5cXHQjZWxpZiBkZWZpbmVkIGNvbG9yX3R5cGVfaW50ZW5zaXR5X2dyYWRpZW50XFxuXFx0XFx0ZmxvYXQgdyA9IGdldEludGVuc2l0eSgpO1xcblxcdFxcdHZDb2xvciA9IHRleHR1cmUyRChncmFkaWVudCwgdmVjMih3LCAxLjAgLSB3KSkucmdiO1xcblxcdCNlbGlmIGRlZmluZWQgY29sb3JfdHlwZV9jb2xvclxcblxcdFxcdHZDb2xvciA9IHVDb2xvcjtcXG5cXHQjZWxpZiBkZWZpbmVkIGNvbG9yX3R5cGVfbG9kXFxuXFx0ZmxvYXQgdyA9IGdldExPRCgpIC8gMTAuMDtcXG5cXHR2Q29sb3IgPSB0ZXh0dXJlMkQoZ3JhZGllbnQsIHZlYzIodywgMS4wIC0gdykpLnJnYjtcXG5cXHQjZWxpZiBkZWZpbmVkIGNvbG9yX3R5cGVfcG9pbnRfaW5kZXhcXG5cXHRcXHR2Q29sb3IgPSBpbmRpY2VzLnJnYjtcXG5cXHQjZWxpZiBkZWZpbmVkIGNvbG9yX3R5cGVfY2xhc3NpZmljYXRpb25cXG5cXHQgIHZlYzQgY2wgPSBnZXRDbGFzc2lmaWNhdGlvbigpO1xcblxcdFxcdHZDb2xvciA9IGNsLnJnYjtcXG5cXHQjZWxpZiBkZWZpbmVkIGNvbG9yX3R5cGVfcmV0dXJuX251bWJlclxcblxcdFxcdHZDb2xvciA9IGdldFJldHVybk51bWJlcigpO1xcblxcdCNlbGlmIGRlZmluZWQgY29sb3JfdHlwZV9zb3VyY2VcXG5cXHRcXHR2Q29sb3IgPSBnZXRTb3VyY2VJRCgpO1xcblxcdCNlbGlmIGRlZmluZWQgY29sb3JfdHlwZV9ub3JtYWxcXG5cXHRcXHR2Q29sb3IgPSAobW9kZWxNYXRyaXggKiB2ZWM0KG5vcm1hbCwgMC4wKSkueHl6O1xcblxcdCNlbGlmIGRlZmluZWQgY29sb3JfdHlwZV9waG9uZ1xcblxcdFxcdHZDb2xvciA9IGNvbG9yO1xcblxcdCNlbGlmIGRlZmluZWQgY29sb3JfdHlwZV9jb21wb3NpdGVcXG5cXHRcXHR2Q29sb3IgPSBnZXRDb21wb3NpdGVDb2xvcigpO1xcblxcdCNlbmRpZlxcblxcblxcdCNpZiAhZGVmaW5lZCBjb2xvcl90eXBlX2NvbXBvc2l0ZSAmJiBkZWZpbmVkIGNvbG9yX3R5cGVfY2xhc3NpZmljYXRpb25cXG5cXHRcXHRpZiAoY2wuYSA9PSAwLjApIHtcXG5cXHRcXHRcXHRnbF9Qb3NpdGlvbiA9IHZlYzQoMTAwLjAsIDEwMC4wLCAxMDAuMCwgMC4wKTtcXG5cXHRcXHRcXHRyZXR1cm47XFxuXFx0XFx0fVxcblxcdCNlbmRpZlxcblxcblxcdC8vIC0tLS0tLS0tLS0tLS0tLS0tLS0tLVxcblxcdC8vIENMSVBQSU5HXFxuXFx0Ly8gLS0tLS0tLS0tLS0tLS0tLS0tLS0tXFxuXFxuXFx0I2lmIGRlZmluZWQgdXNlX2NsaXBfYm94XFxuXFx0XFx0Ym9vbCBpbnNpZGVBbnkgPSBmYWxzZTtcXG5cXHRcXHRmb3IgKGludCBpID0gMDsgaSA8IG1heF9jbGlwX2JveGVzOyBpKyspIHtcXG5cXHRcXHRcXHRpZiAoaSA9PSBpbnQoY2xpcEJveENvdW50KSkge1xcblxcdFxcdFxcdFxcdGJyZWFrO1xcblxcdFxcdFxcdH1cXG5cXG5cXHRcXHRcXHR2ZWM0IGNsaXBQb3NpdGlvbiA9IGNsaXBCb3hlc1tpXSAqIG1vZGVsTWF0cml4ICogdmVjNChwb3NpdGlvbiwgMS4wKTtcXG5cXHRcXHRcXHRib29sIGluc2lkZSA9IC0wLjUgPD0gY2xpcFBvc2l0aW9uLnggJiYgY2xpcFBvc2l0aW9uLnggPD0gMC41O1xcblxcdFxcdFxcdGluc2lkZSA9IGluc2lkZSAmJiAtMC41IDw9IGNsaXBQb3NpdGlvbi55ICYmIGNsaXBQb3NpdGlvbi55IDw9IDAuNTtcXG5cXHRcXHRcXHRpbnNpZGUgPSBpbnNpZGUgJiYgLTAuNSA8PSBjbGlwUG9zaXRpb24ueiAmJiBjbGlwUG9zaXRpb24ueiA8PSAwLjU7XFxuXFx0XFx0XFx0aW5zaWRlQW55ID0gaW5zaWRlQW55IHx8IGluc2lkZTtcXG5cXHRcXHR9XFxuXFxuXFx0XFx0aWYgKCFpbnNpZGVBbnkpIHtcXG5cXHRcXHRcXHQjaWYgZGVmaW5lZCBjbGlwX291dHNpZGVcXG5cXHRcXHRcXHRcXHRnbF9Qb3NpdGlvbiA9IHZlYzQoMTAwMC4wLCAxMDAwLjAsIDEwMDAuMCwgMS4wKTtcXG5cXHRcXHRcXHQjZWxpZiBkZWZpbmVkIGNsaXBfaGlnaGxpZ2h0X2luc2lkZSAmJiAhZGVmaW5lZChjb2xvcl90eXBlX2RlcHRoKVxcblxcdFxcdFxcdFxcdGZsb2F0IGMgPSAodkNvbG9yLnIgKyB2Q29sb3IuZyArIHZDb2xvci5iKSAvIDYuMDtcXG5cXHRcXHRcXHQjZW5kaWZcXG5cXHRcXHR9IGVsc2Uge1xcblxcdFxcdFxcdCNpZiBkZWZpbmVkIGNsaXBfaGlnaGxpZ2h0X2luc2lkZVxcblxcdFxcdFxcdFxcdHZDb2xvci5yICs9IDAuNTtcXG5cXHRcXHRcXHQjZW5kaWZcXG5cXHRcXHR9XFxuXFx0I2VuZGlmXFxufVxcblwiOyJdLCJuYW1lcyI6W10sInNvdXJjZVJvb3QiOiIifQ==\n//# sourceURL=webpack-internal:///245\n')},599:(__unused_webpack_module,__webpack_exports__,__webpack_require__)=>{eval("// ESM COMPAT FLAG\n__webpack_require__.r(__webpack_exports__);\n\n// EXPORTS\n__webpack_require__.d(__webpack_exports__, {\n  BlurMaterial: () => (/* reexport */ BlurMaterial),\n  ClipMode: () => (/* reexport */ ClipMode),\n  GRAYSCALE: () => (/* reexport */ GRAYSCALE),\n  INFERNO: () => (/* reexport */ INFERNO),\n  NormalFilteringMode: () => (/* reexport */ NormalFilteringMode),\n  PLASMA: () => (/* reexport */ PLASMA),\n  POINT_ATTRIBUTES: () => (/* reexport */ POINT_ATTRIBUTES),\n  POINT_ATTRIBUTE_TYPES: () => (/* reexport */ POINT_ATTRIBUTE_TYPES),\n  PointAttributeName: () => (/* reexport */ PointAttributeName),\n  PointAttributes: () => (/* reexport */ PointAttributes),\n  PointCloudMaterial: () => (/* reexport */ PointCloudMaterial),\n  PointCloudMixingMode: () => (/* reexport */ PointCloudMixingMode),\n  PointCloudOctree: () => (/* reexport */ PointCloudOctree),\n  PointCloudOctreeGeometry: () => (/* reexport */ PointCloudOctreeGeometry),\n  PointCloudOctreeGeometryNode: () => (/* reexport */ PointCloudOctreeGeometryNode),\n  PointCloudOctreeNode: () => (/* reexport */ PointCloudOctreeNode),\n  PointCloudOctreePicker: () => (/* reexport */ PointCloudOctreePicker),\n  PointCloudTree: () => (/* reexport */ PointCloudTree),\n  PointColorType: () => (/* reexport */ PointColorType),\n  PointOpacityType: () => (/* reexport */ PointOpacityType),\n  PointShape: () => (/* reexport */ PointShape),\n  PointSizeType: () => (/* reexport */ PointSizeType),\n  Potree: () => (/* reexport */ Potree),\n  QueueItem: () => (/* reexport */ QueueItem),\n  RAINBOW: () => (/* reexport */ RAINBOW),\n  SPECTRAL: () => (/* reexport */ SPECTRAL),\n  TreeType: () => (/* reexport */ TreeType),\n  V1_LOADER: () => (/* reexport */ loadPOC),\n  V2_LOADER: () => (/* reexport */ loadOctree),\n  VIRIDIS: () => (/* reexport */ VIRIDIS),\n  Version: () => (/* reexport */ Version),\n  YELLOW_GREEN: () => (/* reexport */ YELLOW_GREEN),\n  generateClassificationTexture: () => (/* reexport */ generateClassificationTexture),\n  generateDataTexture: () => (/* reexport */ generateDataTexture),\n  generateGradientTexture: () => (/* reexport */ generateGradientTexture)\n});\n\n// EXTERNAL MODULE: external \"three\"\nvar external_three_ = __webpack_require__(604);\n;// CONCATENATED MODULE: ./src/materials/blur-material.ts\n\nclass BlurMaterial extends external_three_.ShaderMaterial {\n    constructor() {\n        super(...arguments);\n        this.vertexShader = __webpack_require__(575);\n        this.fragmentShader = __webpack_require__(414);\n        this.uniforms = {\n            screenWidth: { type: 'f', value: 0 },\n            screenHeight: { type: 'f', value: 0 },\n            map: { type: 't', value: null },\n        };\n    }\n}\n\n;// CONCATENATED MODULE: ./src/materials/clipping.ts\nvar ClipMode;\n(function (ClipMode) {\n    ClipMode[ClipMode[\"DISABLED\"] = 0] = \"DISABLED\";\n    ClipMode[ClipMode[\"CLIP_OUTSIDE\"] = 1] = \"CLIP_OUTSIDE\";\n    ClipMode[ClipMode[\"HIGHLIGHT_INSIDE\"] = 2] = \"HIGHLIGHT_INSIDE\";\n    ClipMode[ClipMode[\"CLIP_HORIZONTALLY\"] = 3] = \"CLIP_HORIZONTALLY\";\n    ClipMode[ClipMode[\"CLIP_VERTICALLY\"] = 4] = \"CLIP_VERTICALLY\";\n})(ClipMode || (ClipMode = {}));\n\n;// CONCATENATED MODULE: ./src/materials/enums.ts\nvar PointSizeType;\n(function (PointSizeType) {\n    PointSizeType[PointSizeType[\"FIXED\"] = 0] = \"FIXED\";\n    PointSizeType[PointSizeType[\"ATTENUATED\"] = 1] = \"ATTENUATED\";\n    PointSizeType[PointSizeType[\"ADAPTIVE\"] = 2] = \"ADAPTIVE\";\n})(PointSizeType || (PointSizeType = {}));\nvar PointShape;\n(function (PointShape) {\n    PointShape[PointShape[\"SQUARE\"] = 0] = \"SQUARE\";\n    PointShape[PointShape[\"CIRCLE\"] = 1] = \"CIRCLE\";\n    PointShape[PointShape[\"PARABOLOID\"] = 2] = \"PARABOLOID\";\n})(PointShape || (PointShape = {}));\nvar TreeType;\n(function (TreeType) {\n    TreeType[TreeType[\"OCTREE\"] = 0] = \"OCTREE\";\n    TreeType[TreeType[\"KDTREE\"] = 1] = \"KDTREE\";\n})(TreeType || (TreeType = {}));\nvar PointOpacityType;\n(function (PointOpacityType) {\n    PointOpacityType[PointOpacityType[\"FIXED\"] = 0] = \"FIXED\";\n    PointOpacityType[PointOpacityType[\"ATTENUATED\"] = 1] = \"ATTENUATED\";\n})(PointOpacityType || (PointOpacityType = {}));\nvar PointColorType;\n(function (PointColorType) {\n    PointColorType[PointColorType[\"RGB\"] = 0] = \"RGB\";\n    PointColorType[PointColorType[\"COLOR\"] = 1] = \"COLOR\";\n    PointColorType[PointColorType[\"DEPTH\"] = 2] = \"DEPTH\";\n    PointColorType[PointColorType[\"HEIGHT\"] = 3] = \"HEIGHT\";\n    PointColorType[PointColorType[\"ELEVATION\"] = 3] = \"ELEVATION\";\n    PointColorType[PointColorType[\"INTENSITY\"] = 4] = \"INTENSITY\";\n    PointColorType[PointColorType[\"INTENSITY_GRADIENT\"] = 5] = \"INTENSITY_GRADIENT\";\n    PointColorType[PointColorType[\"LOD\"] = 6] = \"LOD\";\n    PointColorType[PointColorType[\"LEVEL_OF_DETAIL\"] = 6] = \"LEVEL_OF_DETAIL\";\n    PointColorType[PointColorType[\"POINT_INDEX\"] = 7] = \"POINT_INDEX\";\n    PointColorType[PointColorType[\"CLASSIFICATION\"] = 8] = \"CLASSIFICATION\";\n    PointColorType[PointColorType[\"RETURN_NUMBER\"] = 9] = \"RETURN_NUMBER\";\n    PointColorType[PointColorType[\"SOURCE\"] = 10] = \"SOURCE\";\n    PointColorType[PointColorType[\"NORMAL\"] = 11] = \"NORMAL\";\n    PointColorType[PointColorType[\"PHONG\"] = 12] = \"PHONG\";\n    PointColorType[PointColorType[\"RGB_HEIGHT\"] = 13] = \"RGB_HEIGHT\";\n    PointColorType[PointColorType[\"COMPOSITE\"] = 50] = \"COMPOSITE\";\n})(PointColorType || (PointColorType = {}));\nvar NormalFilteringMode;\n(function (NormalFilteringMode) {\n    NormalFilteringMode[NormalFilteringMode[\"ABSOLUTE_NORMAL_FILTERING_MODE\"] = 1] = \"ABSOLUTE_NORMAL_FILTERING_MODE\";\n    NormalFilteringMode[NormalFilteringMode[\"LESS_EQUAL_NORMAL_FILTERING_MODE\"] = 2] = \"LESS_EQUAL_NORMAL_FILTERING_MODE\";\n    NormalFilteringMode[NormalFilteringMode[\"GREATER_NORMAL_FILTERING_MODE\"] = 3] = \"GREATER_NORMAL_FILTERING_MODE\";\n})(NormalFilteringMode || (NormalFilteringMode = {}));\nvar PointCloudMixingMode;\n(function (PointCloudMixingMode) {\n    PointCloudMixingMode[PointCloudMixingMode[\"CHECKBOARD\"] = 1] = \"CHECKBOARD\";\n    PointCloudMixingMode[PointCloudMixingMode[\"STRIPES\"] = 2] = \"STRIPES\";\n})(PointCloudMixingMode || (PointCloudMixingMode = {}));\n\n;// CONCATENATED MODULE: ./src/constants.ts\n\nconst DEFAULT_RGB_BRIGHTNESS = 0;\nconst DEFAULT_RGB_CONTRAST = 0;\nconst DEFAULT_RGB_GAMMA = 1;\nconst DEFAULT_MAX_POINT_SIZE = 50;\nconst DEFAULT_MIN_NODE_PIXEL_SIZE = 50;\nconst DEFAULT_MIN_POINT_SIZE = 2;\nconst DEFAULT_PICK_WINDOW_SIZE = 15;\nconst DEFAULT_POINT_BUDGET = 1000000;\nconst MAX_LOADS_TO_GPU = 2;\nconst MAX_NUM_NODES_LOADING = 4;\nconst PERSPECTIVE_CAMERA = 'PerspectiveCamera';\nconst COLOR_BLACK = new external_three_.Color(0, 0, 0);\nconst DEFAULT_HIGHLIGHT_COLOR = new external_three_.Vector4(1, 0, 0, 1);\n\n;// CONCATENATED MODULE: ./src/utils/utils.ts\nfunction getIndexFromName(name) {\n    return parseInt(name.charAt(name.length - 1), 10);\n}\n/**\n * When passed to `[].sort`, sorts the array by level and index: r, r0, r3, r4, r01, r07, r30, ...\n */\nfunction byLevelAndIndex(a, b) {\n    const na = a.name;\n    const nb = b.name;\n    if (na.length !== nb.length) {\n        return na.length - nb.length;\n    }\n    else if (na < nb) {\n        return -1;\n    }\n    else if (na > nb) {\n        return 1;\n    }\n    else {\n        return 0;\n    }\n}\nfunction handleFailedRequest(response) {\n    if (response.status !== 200) {\n        throw Error('Response error');\n    }\n    return response;\n}\nfunction handleEmptyBuffer(buffer) {\n    if (!buffer || buffer.byteLength === 0) {\n        throw Error('Empty buffer');\n    }\n    return buffer;\n}\n\n;// CONCATENATED MODULE: ./src/materials/classification.ts\n\nconst DEFAULT_CLASSIFICATION = {\n    0: new external_three_.Vector4(0.5, 0.5, 0.5, 1.0),\n    1: new external_three_.Vector4(0.5, 0.5, 0.5, 1.0),\n    2: new external_three_.Vector4(0.63, 0.32, 0.18, 1.0),\n    3: new external_three_.Vector4(0.0, 1.0, 0.0, 1.0),\n    4: new external_three_.Vector4(0.0, 0.8, 0.0, 1.0),\n    5: new external_three_.Vector4(0.0, 0.6, 0.0, 1.0),\n    6: new external_three_.Vector4(1.0, 0.66, 0.0, 1.0),\n    7: new external_three_.Vector4(1.0, 0, 1.0, 1.0),\n    8: new external_three_.Vector4(1.0, 0, 0.0, 1.0),\n    9: new external_three_.Vector4(0.0, 0.0, 1.0, 1.0),\n    12: new external_three_.Vector4(1.0, 1.0, 0.0, 1.0),\n    DEFAULT: new external_three_.Vector4(0.3, 0.6, 0.6, 0.5),\n};\n\n;// CONCATENATED MODULE: ./src/materials/gradients/grayscale.ts\n\nconst GRAYSCALE = [\n    [0, new external_three_.Color(0, 0, 0)],\n    [1, new external_three_.Color(1, 1, 1)],\n];\n\n;// CONCATENATED MODULE: ./src/materials/gradients/inferno.ts\n\nconst INFERNO = [\n    [0.0, new external_three_.Color(0.077, 0.042, 0.206)],\n    [0.1, new external_three_.Color(0.225, 0.036, 0.388)],\n    [0.2, new external_three_.Color(0.373, 0.074, 0.432)],\n    [0.3, new external_three_.Color(0.522, 0.128, 0.42)],\n    [0.4, new external_three_.Color(0.665, 0.182, 0.37)],\n    [0.5, new external_three_.Color(0.797, 0.255, 0.287)],\n    [0.6, new external_three_.Color(0.902, 0.364, 0.184)],\n    [0.7, new external_three_.Color(0.969, 0.516, 0.063)],\n    [0.8, new external_three_.Color(0.988, 0.683, 0.072)],\n    [0.9, new external_three_.Color(0.961, 0.859, 0.298)],\n    [1.0, new external_three_.Color(0.988, 0.998, 0.645)],\n];\n\n;// CONCATENATED MODULE: ./src/materials/gradients/plasma.ts\n\nconst PLASMA = [\n    [0.0, new external_three_.Color(0.241, 0.015, 0.61)],\n    [0.1, new external_three_.Color(0.387, 0.001, 0.654)],\n    [0.2, new external_three_.Color(0.524, 0.025, 0.653)],\n    [0.3, new external_three_.Color(0.651, 0.125, 0.596)],\n    [0.4, new external_three_.Color(0.752, 0.227, 0.513)],\n    [0.5, new external_three_.Color(0.837, 0.329, 0.431)],\n    [0.6, new external_three_.Color(0.907, 0.435, 0.353)],\n    [0.7, new external_three_.Color(0.963, 0.554, 0.272)],\n    [0.8, new external_three_.Color(0.992, 0.681, 0.195)],\n    [0.9, new external_three_.Color(0.987, 0.822, 0.144)],\n    [1.0, new external_three_.Color(0.94, 0.975, 0.131)],\n];\n\n;// CONCATENATED MODULE: ./src/materials/gradients/rainbow.ts\n\nconst RAINBOW = [\n    [0, new external_three_.Color(0.278, 0, 0.714)],\n    [1 / 6, new external_three_.Color(0, 0, 1)],\n    [2 / 6, new external_three_.Color(0, 1, 1)],\n    [3 / 6, new external_three_.Color(0, 1, 0)],\n    [4 / 6, new external_three_.Color(1, 1, 0)],\n    [5 / 6, new external_three_.Color(1, 0.64, 0)],\n    [1, new external_three_.Color(1, 0, 0)],\n];\n\n;// CONCATENATED MODULE: ./src/materials/gradients/spectral.ts\n\n// From chroma spectral http://gka.github.io/chroma.js/\nconst SPECTRAL = [\n    [0, new external_three_.Color(0.3686, 0.3098, 0.6353)],\n    [0.1, new external_three_.Color(0.1961, 0.5333, 0.7412)],\n    [0.2, new external_three_.Color(0.4, 0.7608, 0.6471)],\n    [0.3, new external_three_.Color(0.6706, 0.8667, 0.6431)],\n    [0.4, new external_three_.Color(0.902, 0.9608, 0.5961)],\n    [0.5, new external_three_.Color(1.0, 1.0, 0.749)],\n    [0.6, new external_three_.Color(0.9961, 0.8784, 0.5451)],\n    [0.7, new external_three_.Color(0.9922, 0.6824, 0.3804)],\n    [0.8, new external_three_.Color(0.9569, 0.4275, 0.2627)],\n    [0.9, new external_three_.Color(0.8353, 0.2431, 0.3098)],\n    [1, new external_three_.Color(0.6196, 0.0039, 0.2588)],\n];\n\n;// CONCATENATED MODULE: ./src/materials/gradients/vidris.ts\n\nconst VIRIDIS = [\n    [0.0, new external_three_.Color(0.267, 0.005, 0.329)],\n    [0.1, new external_three_.Color(0.283, 0.141, 0.458)],\n    [0.2, new external_three_.Color(0.254, 0.265, 0.53)],\n    [0.3, new external_three_.Color(0.207, 0.372, 0.553)],\n    [0.4, new external_three_.Color(0.164, 0.471, 0.558)],\n    [0.5, new external_three_.Color(0.128, 0.567, 0.551)],\n    [0.6, new external_three_.Color(0.135, 0.659, 0.518)],\n    [0.7, new external_three_.Color(0.267, 0.749, 0.441)],\n    [0.8, new external_three_.Color(0.478, 0.821, 0.318)],\n    [0.9, new external_three_.Color(0.741, 0.873, 0.15)],\n    [1.0, new external_three_.Color(0.993, 0.906, 0.144)],\n];\n\n;// CONCATENATED MODULE: ./src/materials/gradients/yellow-green.ts\n\nconst YELLOW_GREEN = [\n    [0, new external_three_.Color(0.1647, 0.2824, 0.3451)],\n    [0.1, new external_three_.Color(0.1338, 0.3555, 0.4227)],\n    [0.2, new external_three_.Color(0.061, 0.4319, 0.4864)],\n    [0.3, new external_three_.Color(0.0, 0.5099, 0.5319)],\n    [0.4, new external_three_.Color(0.0, 0.5881, 0.5569)],\n    [0.5, new external_three_.Color(0.137, 0.665, 0.5614)],\n    [0.6, new external_three_.Color(0.2906, 0.7395, 0.5477)],\n    [0.7, new external_three_.Color(0.4453, 0.8099, 0.5201)],\n    [0.8, new external_three_.Color(0.6102, 0.8748, 0.485)],\n    [0.9, new external_three_.Color(0.7883, 0.9323, 0.4514)],\n    [1, new external_three_.Color(0.9804, 0.9804, 0.4314)],\n];\n\n;// CONCATENATED MODULE: ./src/materials/gradients/index.ts\n\n\n\n\n\n\n\n\n;// CONCATENATED MODULE: ./src/materials/texture-generation.ts\n\nfunction generateDataTexture(width, height, color) {\n    const size = width * height;\n    const data = new Uint8Array(4 * size);\n    const r = Math.floor(color.r * 255);\n    const g = Math.floor(color.g * 255);\n    const b = Math.floor(color.b * 255);\n    for (let i = 0; i < size; i++) {\n        data[i * 3] = r;\n        data[i * 3 + 1] = g;\n        data[i * 3 + 2] = b;\n    }\n    const texture = new external_three_.DataTexture(data, width, height, external_three_.RGBAFormat);\n    texture.needsUpdate = true;\n    texture.magFilter = external_three_.NearestFilter;\n    return texture;\n}\nfunction generateGradientTexture(gradient) {\n    const size = 64;\n    const canvas = document.createElement('canvas');\n    canvas.width = size;\n    canvas.height = size;\n    const context = canvas.getContext('2d');\n    context.rect(0, 0, size, size);\n    const ctxGradient = context.createLinearGradient(0, 0, size, size);\n    for (let i = 0; i < gradient.length; i++) {\n        const step = gradient[i];\n        ctxGradient.addColorStop(step[0], `#${step[1].getHexString()}`);\n    }\n    context.fillStyle = ctxGradient;\n    context.fill();\n    const texture = new external_three_.CanvasTexture(canvas);\n    texture.needsUpdate = true;\n    texture.minFilter = external_three_.LinearFilter;\n    // textureImage = texture.image;\n    return texture;\n}\nfunction generateClassificationTexture(classification) {\n    const width = 256;\n    const height = 256;\n    const size = width * height;\n    const data = new Uint8Array(4 * size);\n    for (let x = 0; x < width; x++) {\n        for (let y = 0; y < height; y++) {\n            const i = x + width * y;\n            let color;\n            if (classification[x]) {\n                color = classification[x];\n            }\n            else if (classification[x % 32]) {\n                color = classification[x % 32];\n            }\n            else {\n                color = classification.DEFAULT;\n            }\n            data[4 * i + 0] = 255 * color.x;\n            data[4 * i + 1] = 255 * color.y;\n            data[4 * i + 2] = 255 * color.z;\n            data[4 * i + 3] = 255 * color.w;\n        }\n    }\n    const texture = new external_three_.DataTexture(data, width, height, external_three_.RGBAFormat);\n    texture.magFilter = external_three_.NearestFilter;\n    texture.needsUpdate = true;\n    return texture;\n}\n\n;// CONCATENATED MODULE: ./src/materials/point-cloud-material.ts\nvar __decorate = (undefined && undefined.__decorate) || function (decorators, target, key, desc) {\n    var c = arguments.length, r = c < 3 ? target : desc === null ? desc = Object.getOwnPropertyDescriptor(target, key) : desc, d;\n    if (typeof Reflect === \"object\" && typeof Reflect.decorate === \"function\") r = Reflect.decorate(decorators, target, key, desc);\n    else for (var i = decorators.length - 1; i >= 0; i--) if (d = decorators[i]) r = (c < 3 ? d(r) : c > 3 ? d(target, key, r) : d(target, key)) || r;\n    return c > 3 && r && Object.defineProperty(target, key, r), r;\n};\n\n\n\n\n\n\n\n\nconst TREE_TYPE_DEFS = {\n    [TreeType.OCTREE]: 'tree_type_octree',\n    [TreeType.KDTREE]: 'tree_type_kdtree',\n};\nconst SIZE_TYPE_DEFS = {\n    [PointSizeType.FIXED]: 'fixed_point_size',\n    [PointSizeType.ATTENUATED]: 'attenuated_point_size',\n    [PointSizeType.ADAPTIVE]: 'adaptive_point_size',\n};\nconst OPACITY_DEFS = {\n    [PointOpacityType.ATTENUATED]: 'attenuated_opacity',\n    [PointOpacityType.FIXED]: 'fixed_opacity',\n};\nconst SHAPE_DEFS = {\n    [PointShape.SQUARE]: 'square_point_shape',\n    [PointShape.CIRCLE]: 'circle_point_shape',\n    [PointShape.PARABOLOID]: 'paraboloid_point_shape',\n};\nconst COLOR_DEFS = {\n    [PointColorType.RGB]: 'color_type_rgb',\n    [PointColorType.COLOR]: 'color_type_color',\n    [PointColorType.DEPTH]: 'color_type_depth',\n    [PointColorType.HEIGHT]: 'color_type_height',\n    [PointColorType.INTENSITY]: 'color_type_intensity',\n    [PointColorType.INTENSITY_GRADIENT]: 'color_type_intensity_gradient',\n    [PointColorType.LOD]: 'color_type_lod',\n    [PointColorType.POINT_INDEX]: 'color_type_point_index',\n    [PointColorType.CLASSIFICATION]: 'color_type_classification',\n    [PointColorType.RETURN_NUMBER]: 'color_type_return_number',\n    [PointColorType.SOURCE]: 'color_type_source',\n    [PointColorType.NORMAL]: 'color_type_normal',\n    [PointColorType.PHONG]: 'color_type_phong',\n    [PointColorType.RGB_HEIGHT]: 'color_type_rgb_height',\n    [PointColorType.COMPOSITE]: 'color_type_composite',\n};\nconst CLIP_MODE_DEFS = {\n    [ClipMode.DISABLED]: 'clip_disabled',\n    [ClipMode.CLIP_OUTSIDE]: 'clip_outside',\n    [ClipMode.HIGHLIGHT_INSIDE]: 'clip_highlight_inside',\n    [ClipMode.CLIP_HORIZONTALLY]: 'clip_horizontally',\n    [ClipMode.CLIP_VERTICALLY]: 'clip_vertically',\n};\nclass PointCloudMaterial extends external_three_.RawShaderMaterial {\n    constructor(parameters = {}) {\n        super();\n        /**\n         * Use the drawing buffer size instead of the dom client width and height when passing the screen height and screen width uniforms to the\n         * shader. This is useful if you have offscreen canvases (which in some browsers return 0 as client width and client height).\n         */\n        this.useDrawingBufferSize = false;\n        this.lights = false;\n        this.fog = false;\n        this.colorRgba = false;\n        this.numClipBoxes = 0;\n        this.clipBoxes = [];\n        this.visibleNodeTextureOffsets = new Map();\n        this._gradient = SPECTRAL;\n        this.gradientTexture = generateGradientTexture(this._gradient);\n        this._classification = DEFAULT_CLASSIFICATION;\n        this.classificationTexture = generateClassificationTexture(this._classification);\n        this.uniforms = {\n            bbSize: makeUniform('fv', [0, 0, 0]),\n            blendDepthSupplement: makeUniform('f', 0.0),\n            blendHardness: makeUniform('f', 2.0),\n            classificationLUT: makeUniform('t', this.classificationTexture || new external_three_.Texture()),\n            clipBoxCount: makeUniform('f', 0),\n            clipBoxes: makeUniform('Matrix4fv', []),\n            clipExtent: makeUniform('fv', [0.0, 0.0, 1.0, 1.0]),\n            depthMap: makeUniform('t', null),\n            diffuse: makeUniform('fv', [1, 1, 1]),\n            fov: makeUniform('f', 1.0),\n            gradient: makeUniform('t', this.gradientTexture || new external_three_.Texture()),\n            heightMax: makeUniform('f', 1.0),\n            heightMin: makeUniform('f', 0.0),\n            intensityBrightness: makeUniform('f', 0),\n            intensityContrast: makeUniform('f', 0),\n            intensityGamma: makeUniform('f', 1),\n            intensityRange: makeUniform('fv', [0, 65000]),\n            isLeafNode: makeUniform('b', 0),\n            level: makeUniform('f', 0.0),\n            maxSize: makeUniform('f', DEFAULT_MAX_POINT_SIZE),\n            minSize: makeUniform('f', DEFAULT_MIN_POINT_SIZE),\n            octreeSize: makeUniform('f', 0),\n            opacity: makeUniform('f', 1.0),\n            pcIndex: makeUniform('f', 0),\n            rgbBrightness: makeUniform('f', DEFAULT_RGB_BRIGHTNESS),\n            rgbContrast: makeUniform('f', DEFAULT_RGB_CONTRAST),\n            rgbGamma: makeUniform('f', DEFAULT_RGB_GAMMA),\n            screenHeight: makeUniform('f', 1.0),\n            screenWidth: makeUniform('f', 1.0),\n            size: makeUniform('f', 1),\n            spacing: makeUniform('f', 1.0),\n            toModel: makeUniform('Matrix4f', []),\n            transition: makeUniform('f', 0.5),\n            uColor: makeUniform('c', new external_three_.Color(0xffffff)),\n            // @ts-ignore\n            visibleNodes: makeUniform('t', this.visibleNodesTexture || new external_three_.Texture()),\n            vnStart: makeUniform('f', 0.0),\n            wClassification: makeUniform('f', 0),\n            wElevation: makeUniform('f', 0),\n            wIntensity: makeUniform('f', 0),\n            wReturnNumber: makeUniform('f', 0),\n            wRGB: makeUniform('f', 1),\n            wSourceID: makeUniform('f', 0),\n            opacityAttenuation: makeUniform('f', 1),\n            filterByNormalThreshold: makeUniform('f', 0),\n            highlightedPointCoordinate: makeUniform('fv', new external_three_.Vector3()),\n            highlightedPointColor: makeUniform('fv', DEFAULT_HIGHLIGHT_COLOR.clone()),\n            enablePointHighlighting: makeUniform('b', true),\n            highlightedPointScale: makeUniform('f', 2.0),\n            backgroundMap: makeUniform('t', null),\n            normalFilteringMode: makeUniform('i', NormalFilteringMode.ABSOLUTE_NORMAL_FILTERING_MODE),\n            pointCloudID: makeUniform('f', 2),\n            pointCloudMixingMode: makeUniform('i', PointCloudMixingMode.CHECKBOARD),\n            stripeDistanceX: makeUniform('f', 5),\n            stripeDistanceY: makeUniform('f', 5),\n            stripeDivisorX: makeUniform('f', 2),\n            stripeDivisorY: makeUniform('f', 2),\n            pointCloudMixAngle: makeUniform('f', 31),\n        };\n        this.useClipBox = false;\n        this.weighted = false;\n        this.pointColorType = PointColorType.RGB;\n        this.pointSizeType = PointSizeType.ADAPTIVE;\n        this.clipMode = ClipMode.DISABLED;\n        this.useEDL = false;\n        this.shape = PointShape.SQUARE;\n        this.treeType = TreeType.OCTREE;\n        this.pointOpacityType = PointOpacityType.FIXED;\n        this.useFilterByNormal = false;\n        this.useTextureBlending = false;\n        this.usePointCloudMixing = false;\n        this.highlightPoint = false;\n        this.attributes = {\n            position: { type: 'fv', value: [] },\n            color: { type: 'fv', value: [] },\n            normal: { type: 'fv', value: [] },\n            intensity: { type: 'f', value: [] },\n            classification: { type: 'f', value: [] },\n            returnNumber: { type: 'f', value: [] },\n            numberOfReturns: { type: 'f', value: [] },\n            pointSourceID: { type: 'f', value: [] },\n            indices: { type: 'fv', value: [] },\n        };\n        const tex = (this.visibleNodesTexture = generateDataTexture(2048, 1, new external_three_.Color(0xffffff)));\n        tex.minFilter = external_three_.NearestFilter;\n        tex.magFilter = external_three_.NearestFilter;\n        this.setUniform('visibleNodes', tex);\n        this.treeType = getValid(parameters.treeType, TreeType.OCTREE);\n        this.size = getValid(parameters.size, 1.0);\n        this.minSize = getValid(parameters.minSize, 2.0);\n        this.maxSize = getValid(parameters.maxSize, 50.0);\n        this.colorRgba = Boolean(parameters.colorRgba);\n        this.classification = DEFAULT_CLASSIFICATION;\n        this.defaultAttributeValues.normal = [0, 0, 0];\n        this.defaultAttributeValues.classification = [0, 0, 0];\n        this.defaultAttributeValues.indices = [0, 0, 0, 0];\n        this.vertexColors = true;\n        this.updateShaderSource();\n    }\n    dispose() {\n        super.dispose();\n        if (this.gradientTexture) {\n            this.gradientTexture.dispose();\n            this.gradientTexture = undefined;\n        }\n        if (this.visibleNodesTexture) {\n            this.visibleNodesTexture.dispose();\n            this.visibleNodesTexture = undefined;\n        }\n        this.clearVisibleNodeTextureOffsets();\n        if (this.classificationTexture) {\n            this.classificationTexture.dispose();\n            this.classificationTexture = undefined;\n        }\n        if (this.depthMap) {\n            this.depthMap.dispose();\n            this.depthMap = undefined;\n        }\n        if (this.backgroundMap) {\n            this.backgroundMap.dispose();\n            this.backgroundMap = undefined;\n        }\n    }\n    clearVisibleNodeTextureOffsets() {\n        this.visibleNodeTextureOffsets.clear();\n    }\n    updateShaderSource() {\n        this.vertexShader = this.applyDefines((__webpack_require__(245)/* [\"default\"] */ .A));\n        this.fragmentShader = this.applyDefines((__webpack_require__(168)/* [\"default\"] */ .A));\n        if (this.opacity === 1.0) {\n            this.blending = external_three_.NoBlending;\n            this.transparent = false;\n            this.depthTest = true;\n            this.depthWrite = true;\n            this.depthFunc = external_three_.LessEqualDepth;\n        }\n        else if (this.opacity < 1.0 && !this.useEDL) {\n            this.blending = external_three_.AdditiveBlending;\n            this.transparent = true;\n            this.depthTest = false;\n            this.depthWrite = true;\n        }\n        if (this.weighted) {\n            this.blending = external_three_.AdditiveBlending;\n            this.transparent = true;\n            this.depthTest = true;\n            this.depthWrite = false;\n            this.depthFunc = external_three_.LessEqualDepth;\n        }\n        this.needsUpdate = true;\n    }\n    applyDefines(shaderSrc) {\n        const parts = [];\n        function define(value) {\n            if (value) {\n                parts.push(`#define ${value}`);\n            }\n        }\n        define(TREE_TYPE_DEFS[this.treeType]);\n        define(SIZE_TYPE_DEFS[this.pointSizeType]);\n        define(SHAPE_DEFS[this.shape]);\n        define(COLOR_DEFS[this.pointColorType]);\n        define(CLIP_MODE_DEFS[this.clipMode]);\n        define(OPACITY_DEFS[this.pointOpacityType]);\n        // We only perform gamma and brightness/contrast calculations per point if values are specified.\n        if (this.rgbGamma !== DEFAULT_RGB_GAMMA ||\n            this.rgbBrightness !== DEFAULT_RGB_BRIGHTNESS ||\n            this.rgbContrast !== DEFAULT_RGB_CONTRAST) {\n            define('use_rgb_gamma_contrast_brightness');\n        }\n        if (this.useFilterByNormal) {\n            define('use_filter_by_normal');\n        }\n        if (this.useEDL) {\n            define('use_edl');\n        }\n        if (this.weighted) {\n            define('weighted_splats');\n        }\n        if (this.numClipBoxes > 0) {\n            define('use_clip_box');\n        }\n        if (this.highlightPoint) {\n            define('highlight_point');\n        }\n        if (this.useTextureBlending) {\n            define('use_texture_blending');\n        }\n        if (this.usePointCloudMixing) {\n            define('use_point_cloud_mixing');\n        }\n        if (this.colorRgba) {\n            define('color_rgba');\n        }\n        define('MAX_POINT_LIGHTS 0');\n        define('MAX_DIR_LIGHTS 0');\n        parts.push(shaderSrc);\n        return parts.join('\\n');\n    }\n    setPointCloudMixingMode(mode) {\n        this.pointCloudMixingMode = mode;\n    }\n    getPointCloudMixingMode() {\n        if (this.pointCloudMixingMode === PointCloudMixingMode.STRIPES) {\n            return PointCloudMixingMode.STRIPES;\n        }\n        return PointCloudMixingMode.CHECKBOARD;\n    }\n    setClipBoxes(clipBoxes) {\n        if (!clipBoxes) {\n            return;\n        }\n        this.clipBoxes = clipBoxes;\n        const doUpdate = this.numClipBoxes !== clipBoxes.length && (clipBoxes.length === 0 || this.numClipBoxes === 0);\n        this.numClipBoxes = clipBoxes.length;\n        this.setUniform('clipBoxCount', this.numClipBoxes);\n        if (doUpdate) {\n            this.updateShaderSource();\n        }\n        const clipBoxesLength = this.numClipBoxes * 16;\n        const clipBoxesArray = new Float32Array(clipBoxesLength);\n        for (let i = 0; i < this.numClipBoxes; i++) {\n            clipBoxesArray.set(clipBoxes[i].inverse.elements, 16 * i);\n        }\n        for (let i = 0; i < clipBoxesLength; i++) {\n            if (isNaN(clipBoxesArray[i])) {\n                clipBoxesArray[i] = Infinity;\n            }\n        }\n        this.setUniform('clipBoxes', clipBoxesArray);\n    }\n    get gradient() {\n        return this._gradient;\n    }\n    set gradient(value) {\n        if (this._gradient !== value) {\n            this._gradient = value;\n            this.gradientTexture = generateGradientTexture(this._gradient);\n            this.setUniform('gradient', this.gradientTexture);\n        }\n    }\n    get classification() {\n        return this._classification;\n    }\n    set classification(value) {\n        const copy = {};\n        for (const key of Object.keys(value)) {\n            copy[key] = value[key].clone();\n        }\n        let isEqual = false;\n        if (this._classification === undefined) {\n            isEqual = false;\n        }\n        else {\n            isEqual = Object.keys(copy).length === Object.keys(this._classification).length;\n            for (const key of Object.keys(copy)) {\n                isEqual = isEqual && this._classification[key] !== undefined;\n                isEqual = isEqual && copy[key].equals(this._classification[key]);\n            }\n        }\n        if (!isEqual) {\n            this._classification = copy;\n            this.recomputeClassification();\n        }\n    }\n    recomputeClassification() {\n        this.classificationTexture = generateClassificationTexture(this._classification);\n        this.setUniform('classificationLUT', this.classificationTexture);\n    }\n    get elevationRange() {\n        return [this.heightMin, this.heightMax];\n    }\n    set elevationRange(value) {\n        this.heightMin = value[0];\n        this.heightMax = value[1];\n    }\n    getUniform(name) {\n        return this.uniforms === undefined ? undefined : this.uniforms[name].value;\n    }\n    setUniform(name, value) {\n        if (this.uniforms === undefined) {\n            return;\n        }\n        const uObj = this.uniforms[name];\n        if (uObj.type === 'c') {\n            uObj.value.copy(value);\n        }\n        else if (value !== uObj.value) {\n            uObj.value = value;\n        }\n    }\n    updateMaterial(octree, visibleNodes, camera, renderer) {\n        const pixelRatio = renderer.getPixelRatio();\n        if (camera.type === PERSPECTIVE_CAMERA) {\n            this.fov = camera.fov * (Math.PI / 180);\n        }\n        else {\n            this.fov = Math.PI / 2; // will result in slope = 1 in the shader\n        }\n        const renderTarget = renderer.getRenderTarget();\n        if (renderTarget !== null) {\n            this.screenWidth = renderTarget.width;\n            this.screenHeight = renderTarget.height;\n        }\n        else {\n            this.screenWidth = renderer.domElement.clientWidth * pixelRatio;\n            this.screenHeight = renderer.domElement.clientHeight * pixelRatio;\n        }\n        if (this.useDrawingBufferSize) {\n            renderer.getDrawingBufferSize(PointCloudMaterial.helperVec2);\n            this.screenWidth = PointCloudMaterial.helperVec2.width;\n            this.screenHeight = PointCloudMaterial.helperVec2.height;\n        }\n        const maxScale = Math.max(octree.scale.x, octree.scale.y, octree.scale.z);\n        this.spacing = octree.pcoGeometry.spacing * maxScale;\n        this.octreeSize = octree.pcoGeometry.boundingBox.getSize(PointCloudMaterial.helperVec3).x;\n        if (this.pointSizeType === PointSizeType.ADAPTIVE ||\n            this.pointColorType === PointColorType.LOD) {\n            this.updateVisibilityTextureData(visibleNodes);\n        }\n    }\n    updateVisibilityTextureData(nodes) {\n        nodes.sort(byLevelAndIndex);\n        const data = new Uint8Array(nodes.length * 4);\n        const offsetsToChild = new Array(nodes.length).fill(Infinity);\n        this.visibleNodeTextureOffsets.clear();\n        for (let i = 0; i < nodes.length; i++) {\n            const node = nodes[i];\n            this.visibleNodeTextureOffsets.set(node.name, i);\n            if (i > 0) {\n                const parentName = node.name.slice(0, -1);\n                const parentOffset = this.visibleNodeTextureOffsets.get(parentName);\n                const parentOffsetToChild = i - parentOffset;\n                offsetsToChild[parentOffset] = Math.min(offsetsToChild[parentOffset], parentOffsetToChild);\n                // tslint:disable:no-bitwise\n                const offset = parentOffset * 4;\n                data[offset] = data[offset] | (1 << node.index);\n                data[offset + 1] = offsetsToChild[parentOffset] >> 8;\n                data[offset + 2] = offsetsToChild[parentOffset] % 256;\n                // tslint:enable:no-bitwise\n            }\n            data[i * 4 + 3] = node.name.length;\n        }\n        const texture = this.visibleNodesTexture;\n        if (texture) {\n            texture.image.data.set(data);\n            texture.needsUpdate = true;\n        }\n    }\n    static makeOnBeforeRender(octree, node, pcIndex) {\n        return (_renderer, _scene, _camera, _geometry, material) => {\n            const pointCloudMaterial = material;\n            const materialUniforms = pointCloudMaterial.uniforms;\n            materialUniforms.level.value = node.level;\n            materialUniforms.isLeafNode.value = node.isLeafNode;\n            const vnStart = pointCloudMaterial.visibleNodeTextureOffsets.get(node.name);\n            if (vnStart !== undefined) {\n                materialUniforms.vnStart.value = vnStart;\n            }\n            materialUniforms.pcIndex.value =\n                pcIndex !== undefined ? pcIndex : octree.visibleNodes.indexOf(node);\n            // Note: when changing uniforms in onBeforeRender, the flag uniformsNeedUpdate has to be\n            // set to true to instruct ThreeJS to upload them. See also\n            // https://github.com/mrdoob/three.js/issues/9870#issuecomment-368750182.\n            // Remove the cast to any after updating to Three.JS >= r113\n            material /*ShaderMaterial*/.uniformsNeedUpdate = true;\n        };\n    }\n}\nPointCloudMaterial.helperVec3 = new external_three_.Vector3();\nPointCloudMaterial.helperVec2 = new external_three_.Vector2();\n__decorate([\n    uniform('bbSize')\n], PointCloudMaterial.prototype, \"bbSize\", void 0);\n__decorate([\n    uniform('clipExtent')\n], PointCloudMaterial.prototype, \"clipExtent\", void 0);\n__decorate([\n    uniform('depthMap')\n], PointCloudMaterial.prototype, \"depthMap\", void 0);\n__decorate([\n    uniform('fov')\n], PointCloudMaterial.prototype, \"fov\", void 0);\n__decorate([\n    uniform('heightMax')\n], PointCloudMaterial.prototype, \"heightMax\", void 0);\n__decorate([\n    uniform('heightMin')\n], PointCloudMaterial.prototype, \"heightMin\", void 0);\n__decorate([\n    uniform('intensityBrightness')\n], PointCloudMaterial.prototype, \"intensityBrightness\", void 0);\n__decorate([\n    uniform('intensityContrast')\n], PointCloudMaterial.prototype, \"intensityContrast\", void 0);\n__decorate([\n    uniform('intensityGamma')\n], PointCloudMaterial.prototype, \"intensityGamma\", void 0);\n__decorate([\n    uniform('intensityRange')\n], PointCloudMaterial.prototype, \"intensityRange\", void 0);\n__decorate([\n    uniform('maxSize')\n], PointCloudMaterial.prototype, \"maxSize\", void 0);\n__decorate([\n    uniform('minSize')\n], PointCloudMaterial.prototype, \"minSize\", void 0);\n__decorate([\n    uniform('octreeSize')\n], PointCloudMaterial.prototype, \"octreeSize\", void 0);\n__decorate([\n    uniform('opacity', true)\n], PointCloudMaterial.prototype, \"opacity\", void 0);\n__decorate([\n    uniform('rgbBrightness', true)\n], PointCloudMaterial.prototype, \"rgbBrightness\", void 0);\n__decorate([\n    uniform('rgbContrast', true)\n], PointCloudMaterial.prototype, \"rgbContrast\", void 0);\n__decorate([\n    uniform('rgbGamma', true)\n], PointCloudMaterial.prototype, \"rgbGamma\", void 0);\n__decorate([\n    uniform('screenHeight')\n], PointCloudMaterial.prototype, \"screenHeight\", void 0);\n__decorate([\n    uniform('screenWidth')\n], PointCloudMaterial.prototype, \"screenWidth\", void 0);\n__decorate([\n    uniform('size')\n], PointCloudMaterial.prototype, \"size\", void 0);\n__decorate([\n    uniform('spacing')\n], PointCloudMaterial.prototype, \"spacing\", void 0);\n__decorate([\n    uniform('transition')\n], PointCloudMaterial.prototype, \"transition\", void 0);\n__decorate([\n    uniform('uColor')\n], PointCloudMaterial.prototype, \"color\", void 0);\n__decorate([\n    uniform('wClassification')\n], PointCloudMaterial.prototype, \"weightClassification\", void 0);\n__decorate([\n    uniform('wElevation')\n], PointCloudMaterial.prototype, \"weightElevation\", void 0);\n__decorate([\n    uniform('wIntensity')\n], PointCloudMaterial.prototype, \"weightIntensity\", void 0);\n__decorate([\n    uniform('wReturnNumber')\n], PointCloudMaterial.prototype, \"weightReturnNumber\", void 0);\n__decorate([\n    uniform('wRGB')\n], PointCloudMaterial.prototype, \"weightRGB\", void 0);\n__decorate([\n    uniform('wSourceID')\n], PointCloudMaterial.prototype, \"weightSourceID\", void 0);\n__decorate([\n    uniform('opacityAttenuation')\n], PointCloudMaterial.prototype, \"opacityAttenuation\", void 0);\n__decorate([\n    uniform('filterByNormalThreshold')\n], PointCloudMaterial.prototype, \"filterByNormalThreshold\", void 0);\n__decorate([\n    uniform('highlightedPointCoordinate')\n], PointCloudMaterial.prototype, \"highlightedPointCoordinate\", void 0);\n__decorate([\n    uniform('highlightedPointColor')\n], PointCloudMaterial.prototype, \"highlightedPointColor\", void 0);\n__decorate([\n    uniform('enablePointHighlighting')\n], PointCloudMaterial.prototype, \"enablePointHighlighting\", void 0);\n__decorate([\n    uniform('highlightedPointScale')\n], PointCloudMaterial.prototype, \"highlightedPointScale\", void 0);\n__decorate([\n    uniform('normalFilteringMode')\n], PointCloudMaterial.prototype, \"normalFilteringMode\", void 0);\n__decorate([\n    uniform('backgroundMap')\n], PointCloudMaterial.prototype, \"backgroundMap\", void 0);\n__decorate([\n    uniform('pointCloudID')\n], PointCloudMaterial.prototype, \"pointCloudID\", void 0);\n__decorate([\n    uniform('pointCloudMixingMode')\n], PointCloudMaterial.prototype, \"pointCloudMixingMode\", void 0);\n__decorate([\n    uniform('stripeDistanceX')\n], PointCloudMaterial.prototype, \"stripeDistanceX\", void 0);\n__decorate([\n    uniform('stripeDistanceY')\n], PointCloudMaterial.prototype, \"stripeDistanceY\", void 0);\n__decorate([\n    uniform('stripeDivisorX')\n], PointCloudMaterial.prototype, \"stripeDivisorX\", void 0);\n__decorate([\n    uniform('stripeDivisorY')\n], PointCloudMaterial.prototype, \"stripeDivisorY\", void 0);\n__decorate([\n    uniform('pointCloudMixAngle')\n], PointCloudMaterial.prototype, \"pointCloudMixAngle\", void 0);\n__decorate([\n    requiresShaderUpdate()\n], PointCloudMaterial.prototype, \"useClipBox\", void 0);\n__decorate([\n    requiresShaderUpdate()\n], PointCloudMaterial.prototype, \"weighted\", void 0);\n__decorate([\n    requiresShaderUpdate()\n], PointCloudMaterial.prototype, \"pointColorType\", void 0);\n__decorate([\n    requiresShaderUpdate()\n], PointCloudMaterial.prototype, \"pointSizeType\", void 0);\n__decorate([\n    requiresShaderUpdate()\n], PointCloudMaterial.prototype, \"clipMode\", void 0);\n__decorate([\n    requiresShaderUpdate()\n], PointCloudMaterial.prototype, \"useEDL\", void 0);\n__decorate([\n    requiresShaderUpdate()\n], PointCloudMaterial.prototype, \"shape\", void 0);\n__decorate([\n    requiresShaderUpdate()\n], PointCloudMaterial.prototype, \"treeType\", void 0);\n__decorate([\n    requiresShaderUpdate()\n], PointCloudMaterial.prototype, \"pointOpacityType\", void 0);\n__decorate([\n    requiresShaderUpdate()\n], PointCloudMaterial.prototype, \"useFilterByNormal\", void 0);\n__decorate([\n    requiresShaderUpdate()\n], PointCloudMaterial.prototype, \"useTextureBlending\", void 0);\n__decorate([\n    requiresShaderUpdate()\n], PointCloudMaterial.prototype, \"usePointCloudMixing\", void 0);\n__decorate([\n    requiresShaderUpdate()\n], PointCloudMaterial.prototype, \"highlightPoint\", void 0);\nfunction makeUniform(type, value) {\n    return { type, value };\n}\nfunction getValid(a, b) {\n    return a === undefined ? b : a;\n}\n// tslint:disable:no-invalid-this\nfunction uniform(uniformName, requireSrcUpdate = false) {\n    return (target, propertyKey) => {\n        Object.defineProperty(target, propertyKey, {\n            get() {\n                return this.getUniform(uniformName);\n            },\n            set(value) {\n                if (value !== this.getUniform(uniformName)) {\n                    this.setUniform(uniformName, value);\n                    if (requireSrcUpdate) {\n                        this.updateShaderSource();\n                    }\n                }\n            },\n        });\n    };\n}\nfunction requiresShaderUpdate() {\n    return (target, propertyKey) => {\n        const fieldName = `_${propertyKey.toString()}`;\n        Object.defineProperty(target, propertyKey, {\n            get() {\n                return this[fieldName];\n            },\n            set(value) {\n                if (value !== this[fieldName]) {\n                    this[fieldName] = value;\n                    this.updateShaderSource();\n                }\n            },\n        });\n    };\n}\n\n;// CONCATENATED MODULE: ./src/materials/index.ts\n\n\n\n\n\n\n\n\n;// CONCATENATED MODULE: ./src/point-attributes.ts\n// -------------------------------------------------------------------------------------------------\n// Converted to Typescript and adapted from https://github.com/potree/potree\n// -------------------------------------------------------------------------------------------------\nvar PointAttributeName;\n(function (PointAttributeName) {\n    PointAttributeName[PointAttributeName[\"POSITION_CARTESIAN\"] = 0] = \"POSITION_CARTESIAN\";\n    PointAttributeName[PointAttributeName[\"COLOR_PACKED\"] = 1] = \"COLOR_PACKED\";\n    PointAttributeName[PointAttributeName[\"COLOR_FLOATS_1\"] = 2] = \"COLOR_FLOATS_1\";\n    PointAttributeName[PointAttributeName[\"COLOR_FLOATS_255\"] = 3] = \"COLOR_FLOATS_255\";\n    PointAttributeName[PointAttributeName[\"NORMAL_FLOATS\"] = 4] = \"NORMAL_FLOATS\";\n    PointAttributeName[PointAttributeName[\"FILLER\"] = 5] = \"FILLER\";\n    PointAttributeName[PointAttributeName[\"INTENSITY\"] = 6] = \"INTENSITY\";\n    PointAttributeName[PointAttributeName[\"CLASSIFICATION\"] = 7] = \"CLASSIFICATION\";\n    PointAttributeName[PointAttributeName[\"NORMAL_SPHEREMAPPED\"] = 8] = \"NORMAL_SPHEREMAPPED\";\n    PointAttributeName[PointAttributeName[\"NORMAL_OCT16\"] = 9] = \"NORMAL_OCT16\";\n    PointAttributeName[PointAttributeName[\"NORMAL\"] = 10] = \"NORMAL\";\n})(PointAttributeName || (PointAttributeName = {}));\nconst POINT_ATTRIBUTE_TYPES = {\n    DATA_TYPE_DOUBLE: { ordinal: 0, size: 8 },\n    DATA_TYPE_FLOAT: { ordinal: 1, size: 4 },\n    DATA_TYPE_INT8: { ordinal: 2, size: 1 },\n    DATA_TYPE_UINT8: { ordinal: 3, size: 1 },\n    DATA_TYPE_INT16: { ordinal: 4, size: 2 },\n    DATA_TYPE_UINT16: { ordinal: 5, size: 2 },\n    DATA_TYPE_INT32: { ordinal: 6, size: 4 },\n    DATA_TYPE_UINT32: { ordinal: 7, size: 4 },\n    DATA_TYPE_INT64: { ordinal: 8, size: 8 },\n    DATA_TYPE_UINT64: { ordinal: 9, size: 8 },\n};\nfunction makePointAttribute(name, type, numElements) {\n    return {\n        name,\n        type,\n        numElements,\n        byteSize: numElements * type.size,\n    };\n}\nconst RGBA_PACKED = makePointAttribute(PointAttributeName.COLOR_PACKED, POINT_ATTRIBUTE_TYPES.DATA_TYPE_INT8, 4);\nconst POINT_ATTRIBUTES = {\n    POSITION_CARTESIAN: makePointAttribute(PointAttributeName.POSITION_CARTESIAN, POINT_ATTRIBUTE_TYPES.DATA_TYPE_FLOAT, 3),\n    RGBA_PACKED,\n    COLOR_PACKED: RGBA_PACKED,\n    RGB_PACKED: makePointAttribute(PointAttributeName.COLOR_PACKED, POINT_ATTRIBUTE_TYPES.DATA_TYPE_INT8, 3),\n    NORMAL_FLOATS: makePointAttribute(PointAttributeName.NORMAL_FLOATS, POINT_ATTRIBUTE_TYPES.DATA_TYPE_FLOAT, 3),\n    FILLER_1B: makePointAttribute(PointAttributeName.FILLER, POINT_ATTRIBUTE_TYPES.DATA_TYPE_UINT8, 1),\n    INTENSITY: makePointAttribute(PointAttributeName.INTENSITY, POINT_ATTRIBUTE_TYPES.DATA_TYPE_UINT16, 1),\n    CLASSIFICATION: makePointAttribute(PointAttributeName.CLASSIFICATION, POINT_ATTRIBUTE_TYPES.DATA_TYPE_UINT8, 1),\n    NORMAL_SPHEREMAPPED: makePointAttribute(PointAttributeName.NORMAL_SPHEREMAPPED, POINT_ATTRIBUTE_TYPES.DATA_TYPE_UINT8, 2),\n    NORMAL_OCT16: makePointAttribute(PointAttributeName.NORMAL_OCT16, POINT_ATTRIBUTE_TYPES.DATA_TYPE_UINT8, 2),\n    NORMAL: makePointAttribute(PointAttributeName.NORMAL, POINT_ATTRIBUTE_TYPES.DATA_TYPE_FLOAT, 3),\n};\nclass PointAttributes {\n    constructor(pointAttributeNames = []) {\n        this.attributes = [];\n        this.byteSize = 0;\n        this.size = 0;\n        for (let i = 0; i < pointAttributeNames.length; i++) {\n            const pointAttributeName = pointAttributeNames[i];\n            const pointAttribute = POINT_ATTRIBUTES[pointAttributeName];\n            this.attributes.push(pointAttribute);\n            this.byteSize += pointAttribute.byteSize;\n            this.size++;\n        }\n    }\n    add(pointAttribute) {\n        this.attributes.push(pointAttribute);\n        this.byteSize += pointAttribute.byteSize;\n        this.size++;\n    }\n    hasColors() {\n        return this.attributes.find(isColorAttribute) !== undefined;\n    }\n    hasNormals() {\n        return this.attributes.find(isNormalAttribute) !== undefined;\n    }\n}\nfunction isColorAttribute({ name }) {\n    return name === PointAttributeName.COLOR_PACKED;\n}\nfunction isNormalAttribute({ name }) {\n    return (name === PointAttributeName.NORMAL_SPHEREMAPPED ||\n        name === PointAttributeName.NORMAL_FLOATS ||\n        name === PointAttributeName.NORMAL ||\n        name === PointAttributeName.NORMAL_OCT16);\n}\n\n;// CONCATENATED MODULE: ./src/utils/bounds.ts\n\n/**\n * adapted from mhluska at https://github.com/mrdoob/three.js/issues/1561\n */\nfunction computeTransformedBoundingBox(box, transform) {\n    return new external_three_.Box3().setFromPoints([\n        new external_three_.Vector3(box.min.x, box.min.y, box.min.z).applyMatrix4(transform),\n        new external_three_.Vector3(box.min.x, box.min.y, box.min.z).applyMatrix4(transform),\n        new external_three_.Vector3(box.max.x, box.min.y, box.min.z).applyMatrix4(transform),\n        new external_three_.Vector3(box.min.x, box.max.y, box.min.z).applyMatrix4(transform),\n        new external_three_.Vector3(box.min.x, box.min.y, box.max.z).applyMatrix4(transform),\n        new external_three_.Vector3(box.min.x, box.max.y, box.max.z).applyMatrix4(transform),\n        new external_three_.Vector3(box.max.x, box.max.y, box.min.z).applyMatrix4(transform),\n        new external_three_.Vector3(box.max.x, box.min.y, box.max.z).applyMatrix4(transform),\n        new external_three_.Vector3(box.max.x, box.max.y, box.max.z).applyMatrix4(transform),\n    ]);\n}\nfunction createChildAABB(aabb, index) {\n    const min = aabb.min.clone();\n    const max = aabb.max.clone();\n    const size = new external_three_.Vector3().subVectors(max, min);\n    // tslint:disable-next-line:no-bitwise\n    if ((index & 0b0001) > 0) {\n        min.z += size.z / 2;\n    }\n    else {\n        max.z -= size.z / 2;\n    }\n    // tslint:disable-next-line:no-bitwise\n    if ((index & 0b0010) > 0) {\n        min.y += size.y / 2;\n    }\n    else {\n        max.y -= size.y / 2;\n    }\n    // tslint:disable-next-line:no-bitwise\n    if ((index & 0b0100) > 0) {\n        min.x += size.x / 2;\n    }\n    else {\n        max.x -= size.x / 2;\n    }\n    return new external_three_.Box3(min, max);\n}\n\n;// CONCATENATED MODULE: ./src/point-cloud-octree-geometry-node.ts\n/**\n * Adapted from Potree.js http://potree.org\n * Potree License: https://github.com/potree/potree/blob/1.5/LICENSE\n */\n\n\n\nconst NODE_STRIDE = 5;\nclass PointCloudOctreeGeometryNode extends external_three_.EventDispatcher {\n    constructor(name, pcoGeometry, boundingBox) {\n        super();\n        this.id = PointCloudOctreeGeometryNode.idCount++;\n        this.level = 0;\n        this.spacing = 0;\n        this.hasChildren = false;\n        this.children = [\n            null,\n            null,\n            null,\n            null,\n            null,\n            null,\n            null,\n            null,\n        ];\n        this.mean = new external_three_.Vector3();\n        this.numPoints = 0;\n        this.loaded = false;\n        this.loading = false;\n        this.failed = false;\n        this.parent = null;\n        this.oneTimeDisposeHandlers = [];\n        this.isLeafNode = true;\n        this.isTreeNode = false;\n        this.isGeometryNode = true;\n        this.name = name;\n        this.index = getIndexFromName(name);\n        this.pcoGeometry = pcoGeometry;\n        this.boundingBox = boundingBox;\n        this.tightBoundingBox = boundingBox.clone();\n        this.boundingSphere = boundingBox.getBoundingSphere(new external_three_.Sphere());\n    }\n    dispose() {\n        if (!this.geometry || !this.parent) {\n            return;\n        }\n        this.geometry.dispose();\n        this.geometry = undefined;\n        this.loaded = false;\n        this.oneTimeDisposeHandlers.forEach(handler => handler());\n        this.oneTimeDisposeHandlers = [];\n    }\n    /**\n     * Gets the url of the binary file for this node.\n     */\n    getUrl() {\n        const geometry = this.pcoGeometry;\n        const version = geometry.loader.version;\n        const pathParts = [geometry.octreeDir];\n        if (geometry.loader && version.equalOrHigher('1.5')) {\n            pathParts.push(this.getHierarchyBaseUrl());\n            pathParts.push(this.name);\n        }\n        else if (version.equalOrHigher('1.4')) {\n            pathParts.push(this.name);\n        }\n        else if (version.upTo('1.3')) {\n            pathParts.push(this.name);\n        }\n        return pathParts.join('/');\n    }\n    /**\n     * Gets the url of the hierarchy file for this node.\n     */\n    getHierarchyUrl() {\n        return `${this.pcoGeometry.octreeDir}/${this.getHierarchyBaseUrl()}/${this.name}.hrc`;\n    }\n    /**\n     * Adds the specified node as a child of the current node.\n     *\n     * @param child\n     *    The node which is to be added as a child.\n     */\n    addChild(child) {\n        this.children[child.index] = child;\n        this.isLeafNode = false;\n        child.parent = this;\n    }\n    /**\n     * Calls the specified callback for the current node (if includeSelf is set to true) and all its\n     * children.\n     *\n     * @param cb\n     *    The function which is to be called for each node.\n     */\n    traverse(cb, includeSelf = true) {\n        const stack = includeSelf ? [this] : [];\n        let current;\n        while ((current = stack.pop()) !== undefined) {\n            cb(current);\n            for (const child of current.children) {\n                if (child !== null) {\n                    stack.push(child);\n                }\n            }\n        }\n    }\n    load() {\n        if (!this.canLoad()) {\n            return Promise.resolve();\n        }\n        this.loading = true;\n        this.pcoGeometry.numNodesLoading++;\n        this.pcoGeometry.needsUpdate = true;\n        let promise;\n        if (this.pcoGeometry.loader.version.equalOrHigher('1.5') &&\n            this.level % this.pcoGeometry.hierarchyStepSize === 0 &&\n            this.hasChildren) {\n            promise = this.loadHierachyThenPoints();\n        }\n        else {\n            promise = this.loadPoints();\n        }\n        return promise.catch(reason => {\n            this.loading = false;\n            this.failed = true;\n            this.pcoGeometry.numNodesLoading--;\n            throw reason;\n        });\n    }\n    canLoad() {\n        return (!this.loading &&\n            !this.loaded &&\n            !this.pcoGeometry.disposed &&\n            !this.pcoGeometry.loader.disposed &&\n            this.pcoGeometry.numNodesLoading < this.pcoGeometry.maxNumNodesLoading);\n    }\n    loadPoints() {\n        this.pcoGeometry.needsUpdate = true;\n        return this.pcoGeometry.loader.load(this);\n    }\n    loadHierachyThenPoints() {\n        if (this.level % this.pcoGeometry.hierarchyStepSize !== 0) {\n            return Promise.resolve();\n        }\n        return Promise.resolve(this.pcoGeometry.loader.getUrl(this.getHierarchyUrl()))\n            .then(url => this.pcoGeometry.xhrRequest(url, { mode: 'cors' }))\n            .then(res => handleFailedRequest(res))\n            .then(okRes => okRes.arrayBuffer())\n            .then(buffer => handleEmptyBuffer(buffer))\n            .then(okBuffer => this.loadHierarchy(this, okBuffer));\n    }\n    /**\n     * Gets the url of the folder where the hierarchy is, relative to the octreeDir.\n     */\n    getHierarchyBaseUrl() {\n        const hierarchyStepSize = this.pcoGeometry.hierarchyStepSize;\n        const indices = this.name.substr(1);\n        const numParts = Math.floor(indices.length / hierarchyStepSize);\n        let path = 'r/';\n        for (let i = 0; i < numParts; i++) {\n            path += `${indices.substr(i * hierarchyStepSize, hierarchyStepSize)}/`;\n        }\n        return path.slice(0, -1);\n    }\n    // tslint:disable:no-bitwise\n    loadHierarchy(node, buffer) {\n        const view = new DataView(buffer);\n        const firstNodeData = this.getNodeData(node.name, 0, view);\n        node.numPoints = firstNodeData.numPoints;\n        // Nodes which need be visited.\n        const stack = [firstNodeData];\n        // Nodes which have already been decoded. We will take nodes from the stack and place them here.\n        const decoded = [];\n        let offset = NODE_STRIDE;\n        while (stack.length > 0) {\n            const stackNodeData = stack.shift();\n            // From the last bit, all the way to the 8th one from the right.\n            let mask = 1;\n            for (let i = 0; i < 8 && offset + 1 < buffer.byteLength; i++) {\n                if ((stackNodeData.children & mask) !== 0) {\n                    const nodeData = this.getNodeData(stackNodeData.name + i, offset, view);\n                    decoded.push(nodeData); // Node is decoded.\n                    stack.push(nodeData); // Need to check its children.\n                    offset += NODE_STRIDE; // Move over to the next node in the buffer.\n                }\n                mask = mask * 2;\n            }\n        }\n        node.pcoGeometry.needsUpdate = true;\n        // Map containing all the nodes.\n        const nodes = new Map();\n        nodes.set(node.name, node);\n        decoded.forEach(nodeData => this.addNode(nodeData, node.pcoGeometry, nodes));\n        node.loadPoints();\n    }\n    // tslint:enable:no-bitwise\n    getNodeData(name, offset, view) {\n        const children = view.getUint8(offset);\n        const numPoints = view.getUint32(offset + 1, true);\n        return { children: children, numPoints: numPoints, name };\n    }\n    addNode({ name, numPoints, children }, pco, nodes) {\n        const index = getIndexFromName(name);\n        const parentName = name.substring(0, name.length - 1);\n        const parentNode = nodes.get(parentName);\n        const level = name.length - 1;\n        const boundingBox = createChildAABB(parentNode.boundingBox, index);\n        const node = new PointCloudOctreeGeometryNode(name, pco, boundingBox);\n        node.level = level;\n        node.numPoints = numPoints;\n        node.hasChildren = children > 0;\n        node.spacing = pco.spacing / Math.pow(2, level);\n        parentNode.addChild(node);\n        nodes.set(name, node);\n    }\n}\nPointCloudOctreeGeometryNode.idCount = 0;\n\n;// CONCATENATED MODULE: ./src/point-cloud-octree-geometry.ts\n\nclass PointCloudOctreeGeometry {\n    constructor(loader, boundingBox, tightBoundingBox, offset, xhrRequest) {\n        this.loader = loader;\n        this.boundingBox = boundingBox;\n        this.tightBoundingBox = tightBoundingBox;\n        this.offset = offset;\n        this.xhrRequest = xhrRequest;\n        this.disposed = false;\n        this.needsUpdate = true;\n        this.octreeDir = '';\n        this.hierarchyStepSize = -1;\n        this.nodes = {};\n        this.numNodesLoading = 0;\n        this.maxNumNodesLoading = 3;\n        this.spacing = 0;\n        this.pointAttributes = new PointAttributes([]);\n        this.projection = null;\n        this.url = null;\n    }\n    dispose() {\n        this.loader.dispose();\n        this.root.traverse(node => node.dispose());\n        this.disposed = true;\n    }\n    addNodeLoadedCallback(callback) {\n        this.loader.callbacks.push(callback);\n    }\n    clearNodeLoadedCallbacks() {\n        this.loader.callbacks = [];\n    }\n}\n\n;// CONCATENATED MODULE: ./src/point-cloud-octree-node.ts\n\nclass PointCloudOctreeNode extends external_three_.EventDispatcher {\n    constructor(geometryNode, sceneNode) {\n        super();\n        this.pcIndex = undefined;\n        this.boundingBoxNode = null;\n        this.loaded = true;\n        this.isTreeNode = true;\n        this.isGeometryNode = false;\n        this.geometryNode = geometryNode;\n        this.sceneNode = sceneNode;\n        this.children = geometryNode.children.slice();\n    }\n    dispose() {\n        this.geometryNode.dispose();\n    }\n    disposeSceneNode() {\n        const node = this.sceneNode;\n        if (node.geometry instanceof external_three_.BufferGeometry) {\n            const attributes = node.geometry.attributes;\n            // tslint:disable-next-line:forin\n            for (const key in attributes) {\n                if (key === 'position') {\n                    delete attributes[key].array;\n                }\n                delete attributes[key];\n            }\n            node.geometry.dispose();\n            node.geometry = undefined;\n        }\n    }\n    traverse(cb, includeSelf) {\n        this.geometryNode.traverse(cb, includeSelf);\n    }\n    get id() {\n        return this.geometryNode.id;\n    }\n    get name() {\n        return this.geometryNode.name;\n    }\n    get level() {\n        return this.geometryNode.level;\n    }\n    get isLeafNode() {\n        return this.geometryNode.isLeafNode;\n    }\n    get numPoints() {\n        return this.geometryNode.numPoints;\n    }\n    get index() {\n        return this.geometryNode.index;\n    }\n    get boundingSphere() {\n        return this.geometryNode.boundingSphere;\n    }\n    get boundingBox() {\n        return this.geometryNode.boundingBox;\n    }\n    get spacing() {\n        return this.geometryNode.spacing;\n    }\n}\n\n;// CONCATENATED MODULE: ./src/utils/math.ts\nfunction clamp(value, min, max) {\n    return Math.min(Math.max(min, value), max);\n}\n\n;// CONCATENATED MODULE: ./src/point-cloud-octree-picker.ts\n\n\n\n\nclass PointCloudOctreePicker {\n    dispose() {\n        if (this.pickState) {\n            this.pickState.material.dispose();\n            this.pickState.renderTarget.dispose();\n        }\n    }\n    pick(renderer, camera, ray, octrees, params = {}) {\n        if (octrees.length === 0) {\n            return null;\n        }\n        const pickState = this.pickState\n            ? this.pickState\n            : (this.pickState = PointCloudOctreePicker.getPickState());\n        const pickMaterial = pickState.material;\n        const pixelRatio = renderer.getPixelRatio();\n        const width = Math.ceil(renderer.domElement.clientWidth * pixelRatio);\n        const height = Math.ceil(renderer.domElement.clientHeight * pixelRatio);\n        PointCloudOctreePicker.updatePickRenderTarget(this.pickState, width, height);\n        const pixelPosition = PointCloudOctreePicker.helperVec3; // Use helper vector to prevent extra allocations.\n        if (params.pixelPosition) {\n            pixelPosition.copy(params.pixelPosition);\n        }\n        else {\n            pixelPosition.addVectors(camera.position, ray.direction).project(camera);\n            pixelPosition.x = (pixelPosition.x + 1) * width * 0.5;\n            pixelPosition.y = (pixelPosition.y + 1) * height * 0.5;\n        }\n        const pickWndSize = Math.floor((params.pickWindowSize || DEFAULT_PICK_WINDOW_SIZE) * pixelRatio);\n        const halfPickWndSize = (pickWndSize - 1) / 2;\n        const x = Math.floor(clamp(pixelPosition.x - halfPickWndSize, 0, width));\n        const y = Math.floor(clamp(pixelPosition.y - halfPickWndSize, 0, height));\n        PointCloudOctreePicker.prepareRender(renderer, x, y, pickWndSize, pickMaterial, pickState);\n        const renderedNodes = PointCloudOctreePicker.render(renderer, camera, pickMaterial, octrees, ray, pickState, params);\n        // Cleanup\n        pickMaterial.clearVisibleNodeTextureOffsets();\n        // Read back image and decode hit point\n        const pixels = PointCloudOctreePicker.readPixels(renderer, x, y, pickWndSize);\n        const hit = PointCloudOctreePicker.findHit(pixels, pickWndSize);\n        return PointCloudOctreePicker.getPickPoint(hit, renderedNodes);\n    }\n    static prepareRender(renderer, x, y, pickWndSize, pickMaterial, pickState) {\n        // Render the intersected nodes onto the pick render target, clipping to a small pick window.\n        renderer.setScissor(x, y, pickWndSize, pickWndSize);\n        renderer.setScissorTest(true);\n        renderer.state.buffers.depth.setTest(pickMaterial.depthTest);\n        renderer.state.buffers.depth.setMask(pickMaterial.depthWrite);\n        renderer.state.setBlending(external_three_.NoBlending);\n        renderer.setRenderTarget(pickState.renderTarget);\n        // Save the current clear color and clear the renderer with black color and alpha 0.\n        renderer.getClearColor(this.clearColor);\n        const oldClearAlpha = renderer.getClearAlpha();\n        renderer.setClearColor(COLOR_BLACK, 0);\n        renderer.clear(true, true, true);\n        renderer.setClearColor(this.clearColor, oldClearAlpha);\n    }\n    static render(renderer, camera, pickMaterial, octrees, ray, pickState, params) {\n        const renderedNodes = [];\n        for (const octree of octrees) {\n            // Get all the octree nodes which intersect the picking ray. We only need to render those.\n            const nodes = PointCloudOctreePicker.nodesOnRay(octree, ray);\n            if (!nodes.length) {\n                continue;\n            }\n            PointCloudOctreePicker.updatePickMaterial(pickMaterial, octree.material, params);\n            pickMaterial.updateMaterial(octree, nodes, camera, renderer);\n            if (params.onBeforePickRender) {\n                params.onBeforePickRender(pickMaterial, pickState.renderTarget);\n            }\n            // Create copies of the nodes so we can render them differently than in the normal point cloud.\n            pickState.scene.children = PointCloudOctreePicker.createTempNodes(octree, nodes, pickMaterial, renderedNodes.length);\n            renderer.render(pickState.scene, camera);\n            nodes.forEach(node => renderedNodes.push({ node, octree }));\n        }\n        return renderedNodes;\n    }\n    static nodesOnRay(octree, ray) {\n        const nodesOnRay = [];\n        const rayClone = ray.clone();\n        for (const node of octree.visibleNodes) {\n            const sphere = PointCloudOctreePicker.helperSphere\n                .copy(node.boundingSphere)\n                .applyMatrix4(octree.matrixWorld);\n            if (rayClone.intersectsSphere(sphere)) {\n                nodesOnRay.push(node);\n            }\n        }\n        return nodesOnRay;\n    }\n    static readPixels(renderer, x, y, pickWndSize) {\n        // Read the pixel from the pick render target.\n        const pixels = new Uint8Array(4 * pickWndSize * pickWndSize);\n        renderer.readRenderTargetPixels(renderer.getRenderTarget(), x, y, pickWndSize, pickWndSize, pixels);\n        renderer.setScissorTest(false);\n        renderer.setRenderTarget(null);\n        return pixels;\n    }\n    static createTempNodes(octree, nodes, pickMaterial, nodeIndexOffset) {\n        const tempNodes = [];\n        for (let i = 0; i < nodes.length; i++) {\n            const node = nodes[i];\n            const sceneNode = node.sceneNode;\n            const tempNode = new external_three_.Points(sceneNode.geometry, pickMaterial);\n            tempNode.matrix = sceneNode.matrix;\n            tempNode.matrixWorld = sceneNode.matrixWorld;\n            tempNode.matrixAutoUpdate = false;\n            tempNode.frustumCulled = false;\n            const nodeIndex = nodeIndexOffset + i + 1;\n            if (nodeIndex > 255) {\n                console.error('More than 255 nodes for pick are not supported.');\n            }\n            tempNode.onBeforeRender = PointCloudMaterial.makeOnBeforeRender(octree, node, nodeIndex);\n            tempNodes.push(tempNode);\n        }\n        return tempNodes;\n    }\n    static updatePickMaterial(pickMaterial, nodeMaterial, params) {\n        pickMaterial.pointSizeType = nodeMaterial.pointSizeType;\n        pickMaterial.shape = nodeMaterial.shape;\n        pickMaterial.size = nodeMaterial.size;\n        pickMaterial.minSize = nodeMaterial.minSize;\n        pickMaterial.maxSize = nodeMaterial.maxSize;\n        pickMaterial.classification = nodeMaterial.classification;\n        pickMaterial.useFilterByNormal = nodeMaterial.useFilterByNormal;\n        pickMaterial.filterByNormalThreshold = nodeMaterial.filterByNormalThreshold;\n        if (params.pickOutsideClipRegion) {\n            pickMaterial.clipMode = ClipMode.DISABLED;\n        }\n        else {\n            pickMaterial.clipMode = nodeMaterial.clipMode;\n            pickMaterial.setClipBoxes(nodeMaterial.clipMode === ClipMode.CLIP_OUTSIDE ? nodeMaterial.clipBoxes : []);\n        }\n    }\n    static updatePickRenderTarget(pickState, width, height) {\n        if (pickState.renderTarget.width === width && pickState.renderTarget.height === height) {\n            return;\n        }\n        pickState.renderTarget.dispose();\n        pickState.renderTarget = PointCloudOctreePicker.makePickRenderTarget();\n        pickState.renderTarget.setSize(width, height);\n    }\n    static makePickRenderTarget() {\n        return new external_three_.WebGLRenderTarget(1, 1, {\n            minFilter: external_three_.LinearFilter,\n            magFilter: external_three_.NearestFilter,\n            format: external_three_.RGBAFormat,\n        });\n    }\n    static findHit(pixels, pickWndSize) {\n        const ibuffer = new Uint32Array(pixels.buffer);\n        // Find closest hit inside pixelWindow boundaries\n        let min = Number.MAX_VALUE;\n        let hit = null;\n        for (let u = 0; u < pickWndSize; u++) {\n            for (let v = 0; v < pickWndSize; v++) {\n                const offset = u + v * pickWndSize;\n                const distance = Math.pow(u - (pickWndSize - 1) / 2, 2) + Math.pow(v - (pickWndSize - 1) / 2, 2);\n                const pcIndex = pixels[4 * offset + 3];\n                pixels[4 * offset + 3] = 0;\n                const pIndex = ibuffer[offset];\n                if (pcIndex > 0 && distance < min) {\n                    hit = {\n                        pIndex: pIndex,\n                        pcIndex: pcIndex - 1,\n                    };\n                    min = distance;\n                }\n            }\n        }\n        return hit;\n    }\n    static getPickPoint(hit, nodes) {\n        if (!hit) {\n            return null;\n        }\n        const point = {};\n        const points = nodes[hit.pcIndex] && nodes[hit.pcIndex].node.sceneNode;\n        if (!points) {\n            return null;\n        }\n        point.pointCloud = nodes[hit.pcIndex].octree;\n        const attributes = points.geometry.attributes;\n        for (const property in attributes) {\n            if (!attributes.hasOwnProperty(property)) {\n                continue;\n            }\n            const values = attributes[property];\n            // tslint:disable-next-line:prefer-switch\n            if (property === 'position') {\n                PointCloudOctreePicker.addPositionToPickPoint(point, hit, values, points);\n            }\n            else if (property === 'normal') {\n                PointCloudOctreePicker.addNormalToPickPoint(point, hit, values, points);\n            }\n            else if (property === 'indices') {\n                // TODO\n            }\n            else {\n                if (values.itemSize === 1) {\n                    point[property] = values.array[hit.pIndex];\n                }\n                else {\n                    const value = [];\n                    for (let j = 0; j < values.itemSize; j++) {\n                        value.push(values.array[values.itemSize * hit.pIndex + j]);\n                    }\n                    point[property] = value;\n                }\n            }\n        }\n        return point;\n    }\n    static addPositionToPickPoint(point, hit, values, points) {\n        point.position = new external_three_.Vector3()\n            .fromBufferAttribute(values, hit.pIndex)\n            .applyMatrix4(points.matrixWorld);\n    }\n    static addNormalToPickPoint(point, hit, values, points) {\n        const normal = new external_three_.Vector3().fromBufferAttribute(values, hit.pIndex);\n        const normal4 = new external_three_.Vector4(normal.x, normal.y, normal.z, 0).applyMatrix4(points.matrixWorld);\n        normal.set(normal4.x, normal4.y, normal4.z);\n        point.normal = normal;\n    }\n    static getPickState() {\n        const scene = new external_three_.Scene();\n        scene.matrixAutoUpdate = false;\n        const material = new PointCloudMaterial();\n        material.pointColorType = PointColorType.POINT_INDEX;\n        return {\n            renderTarget: PointCloudOctreePicker.makePickRenderTarget(),\n            material: material,\n            scene: scene,\n        };\n    }\n}\nPointCloudOctreePicker.helperVec3 = new external_three_.Vector3();\nPointCloudOctreePicker.helperSphere = new external_three_.Sphere();\nPointCloudOctreePicker.clearColor = new external_three_.Color();\n\n;// CONCATENATED MODULE: ./src/loading2/octree-geometry.ts\n\nclass OctreeGeometry {\n    constructor(loader, boundingBox) {\n        this.loader = loader;\n        this.boundingBox = boundingBox;\n        this.maxNumNodesLoading = 3;\n        this.numNodesLoading = 0;\n        this.disposed = false;\n        this.pointAttributes = null;\n        this.spacing = 0;\n        this.url = null;\n        this.tightBoundingBox = this.boundingBox.clone();\n        this.boundingSphere = this.boundingBox.getBoundingSphere(new external_three_.Sphere());\n        this.tightBoundingSphere = this.boundingSphere.clone();\n    }\n    dispose() {\n        this.root.traverse((node) => node.dispose());\n        this.disposed = true;\n    }\n}\n\n;// CONCATENATED MODULE: ./src/point-cloud-tree.ts\n\nclass PointCloudTree extends external_three_.Object3D {\n    constructor() {\n        super(...arguments);\n        this.root = null;\n    }\n    initialized() {\n        return this.root !== null;\n    }\n}\n\n;// CONCATENATED MODULE: ./src/point-cloud-octree.ts\n\n\n\n\n\n\n\n\nclass PointCloudOctree extends PointCloudTree {\n    constructor(potree, pcoGeometry, material) {\n        super();\n        this.disposed = false;\n        this.level = 0;\n        this.maxLevel = Infinity;\n        /**\n         * The minimum radius of a node's bounding sphere on the screen in order to be displayed.\n         */\n        this.minNodePixelSize = DEFAULT_MIN_NODE_PIXEL_SIZE;\n        this.root = null;\n        this.boundingBoxNodes = [];\n        this.visibleNodes = [];\n        this.visibleGeometry = [];\n        this.numVisiblePoints = 0;\n        this.showBoundingBox = false;\n        this.visibleBounds = new external_three_.Box3();\n        this.name = '';\n        this.potree = potree;\n        this.root = pcoGeometry.root;\n        this.pcoGeometry = pcoGeometry;\n        this.boundingBox = pcoGeometry.boundingBox;\n        this.boundingSphere = this.boundingBox.getBoundingSphere(new external_three_.Sphere());\n        this.position.copy(pcoGeometry.offset);\n        this.updateMatrix();\n        this.material = material || pcoGeometry instanceof OctreeGeometry ? new PointCloudMaterial({ colorRgba: true }) : new PointCloudMaterial();\n        this.initMaterial(this.material);\n    }\n    initMaterial(material) {\n        this.updateMatrixWorld(true);\n        const { min, max } = computeTransformedBoundingBox(this.pcoGeometry.tightBoundingBox || this.getBoundingBoxWorld(), this.matrixWorld);\n        const bWidth = max.z - min.z;\n        material.heightMin = min.z - 0.2 * bWidth;\n        material.heightMax = max.z + 0.2 * bWidth;\n    }\n    dispose() {\n        if (this.root) {\n            this.root.dispose();\n        }\n        this.pcoGeometry.root.traverse(n => this.potree.lru.remove(n));\n        this.pcoGeometry.dispose();\n        this.material.dispose();\n        this.visibleNodes = [];\n        this.visibleGeometry = [];\n        if (this.picker) {\n            this.picker.dispose();\n            this.picker = undefined;\n        }\n        this.disposed = true;\n    }\n    get pointSizeType() {\n        return this.material.pointSizeType;\n    }\n    set pointSizeType(value) {\n        this.material.pointSizeType = value;\n    }\n    toTreeNode(geometryNode, parent) {\n        const points = new external_three_.Points(geometryNode.geometry, this.material);\n        const node = new PointCloudOctreeNode(geometryNode, points);\n        points.name = geometryNode.name;\n        points.position.copy(geometryNode.boundingBox.min);\n        points.frustumCulled = false;\n        points.onBeforeRender = PointCloudMaterial.makeOnBeforeRender(this, node);\n        if (parent) {\n            parent.sceneNode.add(points);\n            parent.children[geometryNode.index] = node;\n            geometryNode.oneTimeDisposeHandlers.push(() => {\n                node.disposeSceneNode();\n                parent.sceneNode.remove(node.sceneNode);\n                // Replace the tree node (rendered and in the GPU) with the geometry node.\n                parent.children[geometryNode.index] = geometryNode;\n            });\n        }\n        else {\n            this.root = node;\n            this.add(points);\n        }\n        return node;\n    }\n    updateVisibleBounds() {\n        const bounds = this.visibleBounds;\n        bounds.min.set(Infinity, Infinity, Infinity);\n        bounds.max.set(-Infinity, -Infinity, -Infinity);\n        for (const node of this.visibleNodes) {\n            if (node.isLeafNode) {\n                bounds.expandByPoint(node.boundingBox.min);\n                bounds.expandByPoint(node.boundingBox.max);\n            }\n        }\n    }\n    updateBoundingBoxes() {\n        if (!this.showBoundingBox || !this.parent) {\n            return;\n        }\n        let bbRoot = this.parent.getObjectByName('bbroot');\n        if (!bbRoot) {\n            bbRoot = new external_three_.Object3D();\n            bbRoot.name = 'bbroot';\n            this.parent.add(bbRoot);\n        }\n        const visibleBoxes = [];\n        for (const node of this.visibleNodes) {\n            if (node.boundingBoxNode !== undefined && node.isLeafNode) {\n                visibleBoxes.push(node.boundingBoxNode);\n            }\n        }\n        bbRoot.children = visibleBoxes;\n    }\n    updateMatrixWorld(force) {\n        if (this.matrixAutoUpdate === true) {\n            this.updateMatrix();\n        }\n        if (this.matrixWorldNeedsUpdate === true || force === true) {\n            if (!this.parent) {\n                this.matrixWorld.copy(this.matrix);\n            }\n            else {\n                this.matrixWorld.multiplyMatrices(this.parent.matrixWorld, this.matrix);\n            }\n            this.matrixWorldNeedsUpdate = false;\n            force = true;\n        }\n    }\n    hideDescendants(object) {\n        const toHide = [];\n        addVisibleChildren(object);\n        while (toHide.length > 0) {\n            const objToHide = toHide.shift();\n            objToHide.visible = false;\n            addVisibleChildren(objToHide);\n        }\n        function addVisibleChildren(obj) {\n            for (const child of obj.children) {\n                if (child.visible) {\n                    toHide.push(child);\n                }\n            }\n        }\n    }\n    moveToOrigin() {\n        this.position.set(0, 0, 0); // Reset, then the matrix will be updated in getBoundingBoxWorld()\n        this.position.set(0, 0, 0).sub(this.getBoundingBoxWorld().getCenter(new external_three_.Vector3()));\n    }\n    moveToGroundPlane() {\n        this.position.y += -this.getBoundingBoxWorld().min.y;\n    }\n    getBoundingBoxWorld() {\n        this.updateMatrixWorld(true);\n        return computeTransformedBoundingBox(this.boundingBox, this.matrixWorld);\n    }\n    getVisibleExtent() {\n        return this.visibleBounds.applyMatrix4(this.matrixWorld);\n    }\n    pick(renderer, camera, ray, params = {}) {\n        this.picker = this.picker || new PointCloudOctreePicker();\n        return this.picker.pick(renderer, camera, ray, [this], params);\n    }\n    get progress() {\n        return this.visibleGeometry.length === 0\n            ? 0\n            : this.visibleNodes.length / this.visibleGeometry.length;\n    }\n}\n\n;// CONCATENATED MODULE: ./src/features.ts\nconst canvas = document.createElement('canvas');\nconst gl = canvas.getContext('webgl');\nconst FEATURES = {\n    SHADER_INTERPOLATION: hasExtension('EXT_frag_depth') && hasMinVaryingVectors(8),\n    SHADER_SPLATS: hasExtension('EXT_frag_depth') && hasExtension('OES_texture_float') && hasMinVaryingVectors(8),\n    SHADER_EDL: hasExtension('OES_texture_float') && hasMinVaryingVectors(8),\n    precision: getPrecision(),\n};\nfunction hasExtension(ext) {\n    return gl !== null && Boolean(gl.getExtension(ext));\n}\nfunction hasMinVaryingVectors(value) {\n    return gl !== null && gl.getParameter(gl.MAX_VARYING_VECTORS) >= value;\n}\nfunction getPrecision() {\n    if (gl === null) {\n        return '';\n    }\n    const vsHighpFloat = gl.getShaderPrecisionFormat(gl.VERTEX_SHADER, gl.HIGH_FLOAT);\n    const vsMediumpFloat = gl.getShaderPrecisionFormat(gl.VERTEX_SHADER, gl.MEDIUM_FLOAT);\n    const fsHighpFloat = gl.getShaderPrecisionFormat(gl.FRAGMENT_SHADER, gl.HIGH_FLOAT);\n    const fsMediumpFloat = gl.getShaderPrecisionFormat(gl.FRAGMENT_SHADER, gl.MEDIUM_FLOAT);\n    const highpAvailable = vsHighpFloat && fsHighpFloat && vsHighpFloat.precision > 0 && fsHighpFloat.precision > 0;\n    const mediumpAvailable = vsMediumpFloat &&\n        fsMediumpFloat &&\n        vsMediumpFloat.precision > 0 &&\n        fsMediumpFloat.precision > 0;\n    return highpAvailable ? 'highp' : mediumpAvailable ? 'mediump' : 'lowp';\n}\n\n;// CONCATENATED MODULE: ./src/utils/async-blocking-queue.ts\nclass AsyncBlockingQueue {\n    constructor() {\n        this.resolvers = [];\n        this.promises = [];\n    }\n    enqueue(t) {\n        if (!this.resolvers.length) {\n            this.add();\n        }\n        const resolve = this.resolvers.shift();\n        resolve(t);\n    }\n    dequeue() {\n        if (!this.promises.length) {\n            this.add();\n        }\n        return this.promises.shift();\n    }\n    add() {\n        this.promises.push(new Promise(resolve => {\n            this.resolvers.push(resolve);\n        }));\n    }\n}\n\n;// CONCATENATED MODULE: ./src/utils/worker-pool.ts\n\nclass AutoTerminatingWorker {\n    constructor(wrappedWorker, maxIdle) {\n        this.wrappedWorker = wrappedWorker;\n        this.maxIdle = maxIdle;\n        this.timeoutId = undefined;\n        this.terminated = false;\n    }\n    get worker() {\n        return this.wrappedWorker;\n    }\n    get isTerminated() {\n        return this.terminated;\n    }\n    markIdle() {\n        this.timeoutId = window.setTimeout(() => {\n            this.terminated = true;\n            this.wrappedWorker.terminate();\n        }, this.maxIdle);\n    }\n    markInUse() {\n        if (this.timeoutId) {\n            window.clearTimeout(this.timeoutId);\n        }\n    }\n}\nclass WorkerPool {\n    constructor(maxWorkers, workerType) {\n        this.maxWorkers = maxWorkers;\n        this.workerType = workerType;\n        this.pool = new AsyncBlockingQueue();\n        this.poolSize = 0;\n    }\n    /**\n     * Returns a worker promise which is resolved when one is available.\n     */\n    getWorker() {\n        // If the number of active workers is smaller than the maximum, return a new one.\n        // Otherwise, return a promise for worker from the pool.\n        if (this.poolSize < this.maxWorkers) {\n            this.poolSize++;\n            return Promise.resolve(new AutoTerminatingWorker(new this.workerType(), WorkerPool.POOL_MAX_IDLE));\n        }\n        else {\n            return this.pool.dequeue().then(worker => {\n                worker.markInUse();\n                // If the dequeued worker has been terminated, decrease the pool size and make a recursive call to get a new worker\n                if (worker.isTerminated) {\n                    this.poolSize--;\n                    return this.getWorker();\n                }\n                return worker;\n            });\n        }\n    }\n    /**\n     * Releases a Worker back into the pool\n     * @param worker\n     */\n    releaseWorker(worker) {\n        worker.markIdle();\n        this.pool.enqueue(worker);\n    }\n}\n/**\n * The maximum amount of idle time that can elapse before a worker from this pool is automatically terminated\n */\nWorkerPool.POOL_MAX_IDLE = 7000;\n\n;// CONCATENATED MODULE: ./src/version.ts\nclass Version {\n    constructor(version) {\n        this.versionMinor = 0;\n        this.version = version;\n        const vmLength = version.indexOf('.') === -1 ? version.length : version.indexOf('.');\n        this.versionMajor = parseInt(version.substr(0, vmLength), 10);\n        this.versionMinor = parseInt(version.substr(vmLength + 1), 10);\n        if (isNaN(this.versionMinor)) {\n            this.versionMinor = 0;\n        }\n    }\n    newerThan(version) {\n        const v = new Version(version);\n        if (this.versionMajor > v.versionMajor) {\n            return true;\n        }\n        else if (this.versionMajor === v.versionMajor && this.versionMinor > v.versionMinor) {\n            return true;\n        }\n        else {\n            return false;\n        }\n    }\n    equalOrHigher(version) {\n        const v = new Version(version);\n        if (this.versionMajor > v.versionMajor) {\n            return true;\n        }\n        else if (this.versionMajor === v.versionMajor && this.versionMinor >= v.versionMinor) {\n            return true;\n        }\n        else {\n            return false;\n        }\n    }\n    upTo(version) {\n        return !this.newerThan(version);\n    }\n}\n\n;// CONCATENATED MODULE: ./src/loading/binary-loader.ts\n// -------------------------------------------------------------------------------------------------\n// Converted to Typescript and adapted from https://github.com/potree/potree\n// -------------------------------------------------------------------------------------------------\n\n\n\n\n\nclass BinaryLoader {\n    constructor({ getUrl = s => Promise.resolve(s), version, boundingBox, scale, xhrRequest, }) {\n        this.disposed = false;\n        if (typeof version === 'string') {\n            this.version = new Version(version);\n        }\n        else {\n            this.version = version;\n        }\n        this.xhrRequest = xhrRequest;\n        this.getUrl = getUrl;\n        this.boundingBox = boundingBox;\n        this.scale = scale;\n        this.callbacks = [];\n    }\n    dispose() {\n        this.disposed = true;\n    }\n    load(node) {\n        if (node.loaded || this.disposed) {\n            return Promise.resolve();\n        }\n        return Promise.resolve(this.getUrl(this.getNodeUrl(node)))\n            .then(url => this.xhrRequest(url, { mode: 'cors' }))\n            .then(res => handleFailedRequest(res))\n            .then(okRes => okRes.arrayBuffer())\n            .then(buffer => handleEmptyBuffer(buffer))\n            .then(okBuffer => {\n            return new Promise(resolve => this.parse(node, okBuffer, resolve));\n        });\n    }\n    getNodeUrl(node) {\n        let url = node.getUrl();\n        if (this.version.equalOrHigher('1.4')) {\n            url += '.bin';\n        }\n        return url;\n    }\n    parse(node, buffer, resolve) {\n        if (this.disposed) {\n            resolve();\n            return;\n        }\n        BinaryLoader.WORKER_POOL.getWorker().then(autoTerminatingWorker => {\n            const pointAttributes = node.pcoGeometry.pointAttributes;\n            const numPoints = buffer.byteLength / pointAttributes.byteSize;\n            if (this.version.upTo('1.5')) {\n                node.numPoints = numPoints;\n            }\n            autoTerminatingWorker.worker.onmessage = (e) => {\n                if (this.disposed) {\n                    resolve();\n                    BinaryLoader.WORKER_POOL.releaseWorker(autoTerminatingWorker);\n                    return;\n                }\n                const data = e.data;\n                const geometry = (node.geometry = node.geometry || new external_three_.BufferGeometry());\n                geometry.boundingBox = node.boundingBox;\n                this.addBufferAttributes(geometry, data.attributeBuffers);\n                this.addIndices(geometry, data.indices);\n                this.addNormalAttribute(geometry, numPoints);\n                node.mean = new external_three_.Vector3().fromArray(data.mean);\n                node.tightBoundingBox = this.getTightBoundingBox(data.tightBoundingBox);\n                node.loaded = true;\n                node.loading = false;\n                node.failed = false;\n                node.pcoGeometry.numNodesLoading--;\n                node.pcoGeometry.needsUpdate = true;\n                this.callbacks.forEach(callback => callback(node));\n                resolve();\n                BinaryLoader.WORKER_POOL.releaseWorker(autoTerminatingWorker);\n            };\n            const message = {\n                buffer,\n                pointAttributes,\n                version: this.version.version,\n                min: node.boundingBox.min.toArray(),\n                offset: node.pcoGeometry.offset.toArray(),\n                scale: this.scale,\n                spacing: node.spacing,\n                hasChildren: node.hasChildren,\n            };\n            autoTerminatingWorker.worker.postMessage(message, [message.buffer]);\n        });\n    }\n    getTightBoundingBox({ min, max }) {\n        const box = new external_three_.Box3(new external_three_.Vector3().fromArray(min), new external_three_.Vector3().fromArray(max));\n        box.max.sub(box.min);\n        box.min.set(0, 0, 0);\n        return box;\n    }\n    addBufferAttributes(geometry, buffers) {\n        Object.keys(buffers).forEach(property => {\n            const buffer = buffers[property].buffer;\n            if (this.isAttribute(property, PointAttributeName.POSITION_CARTESIAN)) {\n                geometry.setAttribute('position', new external_three_.BufferAttribute(new Float32Array(buffer), 3));\n            }\n            else if (this.isAttribute(property, PointAttributeName.COLOR_PACKED)) {\n                geometry.setAttribute('color', new external_three_.BufferAttribute(new Uint8Array(buffer), 3, true));\n            }\n            else if (this.isAttribute(property, PointAttributeName.INTENSITY)) {\n                geometry.setAttribute('intensity', new external_three_.BufferAttribute(new Float32Array(buffer), 1));\n            }\n            else if (this.isAttribute(property, PointAttributeName.CLASSIFICATION)) {\n                geometry.setAttribute('classification', new external_three_.BufferAttribute(new Uint8Array(buffer), 1));\n            }\n            else if (this.isAttribute(property, PointAttributeName.NORMAL_SPHEREMAPPED)) {\n                geometry.setAttribute('normal', new external_three_.BufferAttribute(new Float32Array(buffer), 3));\n            }\n            else if (this.isAttribute(property, PointAttributeName.NORMAL_OCT16)) {\n                geometry.setAttribute('normal', new external_three_.BufferAttribute(new Float32Array(buffer), 3));\n            }\n            else if (this.isAttribute(property, PointAttributeName.NORMAL)) {\n                geometry.setAttribute('normal', new external_three_.BufferAttribute(new Float32Array(buffer), 3));\n            }\n        });\n    }\n    addIndices(geometry, indices) {\n        const indicesAttribute = new external_three_.Uint8BufferAttribute(indices, 4);\n        indicesAttribute.normalized = true;\n        geometry.setAttribute('indices', indicesAttribute);\n    }\n    addNormalAttribute(geometry, numPoints) {\n        if (!geometry.getAttribute('normal')) {\n            const buffer = new Float32Array(numPoints * 3);\n            geometry.setAttribute('normal', new external_three_.BufferAttribute(new Float32Array(buffer), 3));\n        }\n    }\n    isAttribute(property, name) {\n        return parseInt(property, 10) === name;\n    }\n}\nBinaryLoader.WORKER_POOL = new WorkerPool(32, (__webpack_require__(91)/* [\"default\"] */ .A));\n\n;// CONCATENATED MODULE: ./src/loading/load-poc.ts\n// -------------------------------------------------------------------------------------------------\n// Converted to Typescript and adapted from https://github.com/potree/potree\n// -------------------------------------------------------------------------------------------------\n\n\n\n\n\n\n\n\n/**\n *\n * @param url\n *    The url of the point cloud file (usually cloud.js).\n * @param getUrl\n *    Function which receives the relative URL of a point cloud chunk file which is to be loaded\n *    and shoud return a new url (e.g. signed) in the form of a string or a promise.\n * @param xhrRequest An arrow function for a fetch request\n * @returns\n *    An observable which emits once when the first LOD of the point cloud is loaded.\n */\nfunction loadPOC(url, getUrl, xhrRequest) {\n    return Promise.resolve(getUrl(url)).then(transformedUrl => {\n        return xhrRequest(transformedUrl, { mode: 'cors' })\n            .then(res => handleFailedRequest(res))\n            .then(okRes => okRes.json())\n            .then(parse(transformedUrl, getUrl, xhrRequest));\n    });\n}\nfunction parse(url, getUrl, xhrRequest) {\n    return (data) => {\n        const { offset, boundingBox, tightBoundingBox } = getBoundingBoxes(data);\n        const loader = new BinaryLoader({\n            getUrl,\n            version: data.version,\n            boundingBox,\n            scale: data.scale,\n            xhrRequest,\n        });\n        const pco = new PointCloudOctreeGeometry(loader, boundingBox, tightBoundingBox, offset, xhrRequest);\n        pco.url = url;\n        pco.octreeDir = data.octreeDir;\n        pco.needsUpdate = true;\n        pco.spacing = data.spacing;\n        pco.hierarchyStepSize = data.hierarchyStepSize;\n        pco.projection = data.projection;\n        pco.offset = offset;\n        pco.pointAttributes = new PointAttributes(data.pointAttributes);\n        const nodes = {};\n        const version = new Version(data.version);\n        return loadRoot(pco, data, nodes, version).then(() => {\n            if (version.upTo('1.4')) {\n                loadRemainingHierarchy(pco, data, nodes);\n            }\n            pco.nodes = nodes;\n            return pco;\n        });\n    };\n}\nfunction getBoundingBoxes(data) {\n    const min = new external_three_.Vector3(data.boundingBox.lx, data.boundingBox.ly, data.boundingBox.lz);\n    const max = new external_three_.Vector3(data.boundingBox.ux, data.boundingBox.uy, data.boundingBox.uz);\n    const boundingBox = new external_three_.Box3(min, max);\n    const tightBoundingBox = boundingBox.clone();\n    const offset = min.clone();\n    if (data.tightBoundingBox) {\n        const { lx, ly, lz, ux, uy, uz } = data.tightBoundingBox;\n        tightBoundingBox.min.set(lx, ly, lz);\n        tightBoundingBox.max.set(ux, uy, uz);\n    }\n    boundingBox.min.sub(offset);\n    boundingBox.max.sub(offset);\n    tightBoundingBox.min.sub(offset);\n    tightBoundingBox.max.sub(offset);\n    return { offset, boundingBox, tightBoundingBox };\n}\nfunction loadRoot(pco, data, nodes, version) {\n    const name = 'r';\n    const root = new PointCloudOctreeGeometryNode(name, pco, pco.boundingBox);\n    root.hasChildren = true;\n    root.spacing = pco.spacing;\n    if (version.upTo('1.5')) {\n        root.numPoints = data.hierarchy[0][1];\n    }\n    else {\n        root.numPoints = 0;\n    }\n    pco.root = root;\n    nodes[name] = root;\n    return pco.root.load();\n}\nfunction loadRemainingHierarchy(pco, data, nodes) {\n    for (let i = 1; i < data.hierarchy.length; i++) {\n        const [name, numPoints] = data.hierarchy[i];\n        const { index, parentName, level } = parseName(name);\n        const parentNode = nodes[parentName];\n        const boundingBox = createChildAABB(parentNode.boundingBox, index);\n        const node = new PointCloudOctreeGeometryNode(name, pco, boundingBox);\n        node.level = level;\n        node.numPoints = numPoints;\n        node.spacing = pco.spacing / Math.pow(2, node.level);\n        nodes[name] = node;\n        parentNode.addChild(node);\n    }\n}\nfunction parseName(name) {\n    return {\n        index: getIndexFromName(name),\n        parentName: name.substring(0, name.length - 1),\n        level: name.length - 1,\n    };\n}\n\n;// CONCATENATED MODULE: ./src/loading/index.ts\n\n\n\n\n;// CONCATENATED MODULE: ./src/loading2/octree-geometry-node.ts\n\nclass OctreeGeometryNode {\n    constructor(name, octreeGeometry, boundingBox) {\n        this.name = name;\n        this.octreeGeometry = octreeGeometry;\n        this.boundingBox = boundingBox;\n        this.loaded = false;\n        this.loading = false;\n        this.parent = null;\n        this.geometry = null;\n        this.hasChildren = false;\n        this.isLeafNode = true;\n        this.isTreeNode = false;\n        this.isGeometryNode = true;\n        this.children = [\n            null,\n            null,\n            null,\n            null,\n            null,\n            null,\n            null,\n            null\n        ];\n        this.id = OctreeGeometryNode.IDCount++;\n        this.index = parseInt(name.charAt(name.length - 1));\n        this.boundingSphere = boundingBox.getBoundingSphere(new external_three_.Sphere());\n        this.numPoints = 0;\n        this.oneTimeDisposeHandlers = [];\n    }\n    getLevel() {\n        return this.level;\n    }\n    isLoaded() {\n        return this.loaded;\n    }\n    getBoundingSphere() {\n        return this.boundingSphere;\n    }\n    getBoundingBox() {\n        return this.boundingBox;\n    }\n    load() {\n        if (this.octreeGeometry.numNodesLoading >= this.octreeGeometry.maxNumNodesLoading) {\n            return;\n        }\n        if (this.octreeGeometry.loader) {\n            this.octreeGeometry.loader.load(this);\n        }\n    }\n    getNumPoints() {\n        return this.numPoints;\n    }\n    dispose() {\n        if (this.geometry && this.parent != null) {\n            this.geometry.dispose();\n            this.geometry = null;\n            this.loaded = false;\n            for (let i = 0; i < this.oneTimeDisposeHandlers.length; i++) {\n                const handler = this.oneTimeDisposeHandlers[i];\n                handler();\n            }\n            this.oneTimeDisposeHandlers = [];\n        }\n    }\n    traverse(cb, includeSelf = true) {\n        const stack = includeSelf ? [this] : [];\n        let current;\n        while ((current = stack.pop()) !== undefined) {\n            cb(current);\n            for (const child of current.children) {\n                if (child !== null) {\n                    stack.push(child);\n                }\n            }\n        }\n    }\n}\nOctreeGeometryNode.IDCount = 0;\nOctreeGeometryNode.IDCount = 0;\n\n;// CONCATENATED MODULE: ./src/loading2/point-attributes.ts\n/**\n * Some types of possible point attribute data formats\n *\n * @class\n */\nconst PointAttributeTypes = {\n    DATA_TYPE_DOUBLE: { ordinal: 0, name: 'double', size: 8 },\n    DATA_TYPE_FLOAT: { ordinal: 1, name: 'float', size: 4 },\n    DATA_TYPE_INT8: { ordinal: 2, name: 'int8', size: 1 },\n    DATA_TYPE_UINT8: { ordinal: 3, name: 'uint8', size: 1 },\n    DATA_TYPE_INT16: { ordinal: 4, name: 'int16', size: 2 },\n    DATA_TYPE_UINT16: { ordinal: 5, name: 'uint16', size: 2 },\n    DATA_TYPE_INT32: { ordinal: 6, name: 'int32', size: 4 },\n    DATA_TYPE_UINT32: { ordinal: 7, name: 'uint32', size: 4 },\n    DATA_TYPE_INT64: { ordinal: 8, name: 'int64', size: 8 },\n    DATA_TYPE_UINT64: { ordinal: 9, name: 'uint64', size: 8 }\n};\nlet i = 0;\nfor (const obj in PointAttributeTypes) {\n    PointAttributeTypes[i] = PointAttributeTypes[obj];\n    i++;\n}\n\nclass PointAttribute {\n    constructor(name, type, numElements, range = [Infinity, -Infinity]) {\n        this.name = name;\n        this.type = type;\n        this.numElements = numElements;\n        this.range = range;\n        this.byteSize = this.numElements * this.type.size;\n        this.description = '';\n    }\n}\n\nconst point_attributes_POINT_ATTRIBUTES = {\n    POSITION_CARTESIAN: new PointAttribute('POSITION_CARTESIAN', PointAttributeTypes.DATA_TYPE_FLOAT, 3),\n    RGBA_PACKED: new PointAttribute('COLOR_PACKED', PointAttributeTypes.DATA_TYPE_INT8, 4),\n    COLOR_PACKED: new PointAttribute('COLOR_PACKED', PointAttributeTypes.DATA_TYPE_INT8, 4),\n    RGB_PACKED: new PointAttribute('COLOR_PACKED', PointAttributeTypes.DATA_TYPE_INT8, 3),\n    NORMAL_FLOATS: new PointAttribute('NORMAL_FLOATS', PointAttributeTypes.DATA_TYPE_FLOAT, 3),\n    INTENSITY: new PointAttribute('INTENSITY', PointAttributeTypes.DATA_TYPE_UINT16, 1),\n    CLASSIFICATION: new PointAttribute('CLASSIFICATION', PointAttributeTypes.DATA_TYPE_UINT8, 1),\n    NORMAL_SPHEREMAPPED: new PointAttribute('NORMAL_SPHEREMAPPED', PointAttributeTypes.DATA_TYPE_UINT8, 2),\n    NORMAL_OCT16: new PointAttribute('NORMAL_OCT16', PointAttributeTypes.DATA_TYPE_UINT8, 2),\n    NORMAL: new PointAttribute('NORMAL', PointAttributeTypes.DATA_TYPE_FLOAT, 3),\n    RETURN_NUMBER: new PointAttribute('RETURN_NUMBER', PointAttributeTypes.DATA_TYPE_UINT8, 1),\n    NUMBER_OF_RETURNS: new PointAttribute('NUMBER_OF_RETURNS', PointAttributeTypes.DATA_TYPE_UINT8, 1),\n    SOURCE_ID: new PointAttribute('SOURCE_ID', PointAttributeTypes.DATA_TYPE_UINT16, 1),\n    INDICES: new PointAttribute('INDICES', PointAttributeTypes.DATA_TYPE_UINT32, 1),\n    SPACING: new PointAttribute('SPACING', PointAttributeTypes.DATA_TYPE_FLOAT, 1),\n    GPS_TIME: new PointAttribute('GPS_TIME', PointAttributeTypes.DATA_TYPE_DOUBLE, 1)\n};\nclass point_attributes_PointAttributes {\n    constructor(pointAttributes, attributes = [], byteSize = 0, size = 0, vectors = []) {\n        this.attributes = attributes;\n        this.byteSize = byteSize;\n        this.size = size;\n        this.vectors = vectors;\n        if (pointAttributes != null) {\n            for (let i = 0; i < pointAttributes.length; i++) {\n                const pointAttributeName = pointAttributes[i];\n                const pointAttribute = point_attributes_POINT_ATTRIBUTES[pointAttributeName];\n                this.attributes.push(pointAttribute);\n                this.byteSize += pointAttribute.byteSize;\n                this.size++;\n            }\n        }\n    }\n    add(pointAttribute) {\n        this.attributes.push(pointAttribute);\n        this.byteSize += pointAttribute.byteSize;\n        this.size++;\n    }\n    addVector(vector) {\n        this.vectors.push(vector);\n    }\n    hasNormals() {\n        for (const name in this.attributes) {\n            const pointAttribute = this.attributes[name];\n            if (pointAttribute === point_attributes_POINT_ATTRIBUTES.NORMAL_SPHEREMAPPED ||\n                pointAttribute === point_attributes_POINT_ATTRIBUTES.NORMAL_FLOATS ||\n                pointAttribute === point_attributes_POINT_ATTRIBUTES.NORMAL ||\n                pointAttribute === point_attributes_POINT_ATTRIBUTES.NORMAL_OCT16) {\n                return true;\n            }\n        }\n        return false;\n    }\n}\n\n;// CONCATENATED MODULE: ./src/loading2/worker-pool.ts\nconst DecoderWorker = (__webpack_require__(300)/* [\"default\"] */ .A);\n// Create enums for different types of workers\nvar WorkerType;\n(function (WorkerType) {\n    WorkerType[\"DECODER_WORKER\"] = \"DECODER_WORKER\";\n})(WorkerType || (WorkerType = {}));\n// Worker JS names: 'BinaryDecoderWorker.js', 'DEMWorker.js', 'EptBinaryDecoderWorker.js', 'EptLaszipDecoderWorker.js',\n// EptZstandardDecoder_preamble.js', 'EptZstandardDecoderWorker.js', 'LASDecoderWorker.js', 'LASLAZWorker.js', 'LazLoaderWorker.js'\nfunction createWorker(type) {\n    // console.log(type)\n    switch (type) {\n        case WorkerType.DECODER_WORKER: {\n            return new DecoderWorker();\n        }\n        default:\n            throw new Error('Unknown worker type');\n    }\n}\nclass worker_pool_WorkerPool {\n    constructor() {\n        // Workers will be an object that has a key for each worker type and the value is an array of Workers that can be empty\n        this.workers = { DECODER_WORKER: [] };\n    }\n    getWorker(workerType) {\n        // Throw error if workerType is not recognized\n        if (this.workers[workerType] === undefined) {\n            throw new Error('Unknown worker type');\n        }\n        // Given a worker URL, if URL does not exist in the worker object, create a new array with the URL as a key\n        if (this.workers[workerType].length === 0) {\n            const worker = createWorker(workerType);\n            this.workers[workerType].push(worker);\n        }\n        const worker = this.workers[workerType].pop();\n        if (worker === undefined) { // Typescript needs this\n            throw new Error('No workers available');\n        }\n        // Return the last worker in the array and remove it from the array\n        return worker;\n    }\n    returnWorker(workerType, worker) {\n        this.workers[workerType].push(worker);\n    }\n}\n\n;// CONCATENATED MODULE: ./src/loading2/octree-loader.ts\nvar __awaiter = (undefined && undefined.__awaiter) || function (thisArg, _arguments, P, generator) {\n    function adopt(value) { return value instanceof P ? value : new P(function (resolve) { resolve(value); }); }\n    return new (P || (P = Promise))(function (resolve, reject) {\n        function fulfilled(value) { try { step(generator.next(value)); } catch (e) { reject(e); } }\n        function rejected(value) { try { step(generator[\"throw\"](value)); } catch (e) { reject(e); } }\n        function step(result) { result.done ? resolve(result.value) : adopt(result.value).then(fulfilled, rejected); }\n        step((generator = generator.apply(thisArg, _arguments || [])).next());\n    });\n};\n\n\n\n\n\n\nclass NodeLoader {\n    constructor(url, workerPool, metadata) {\n        this.url = url;\n        this.workerPool = workerPool;\n        this.metadata = metadata;\n    }\n    load(node) {\n        return __awaiter(this, void 0, void 0, function* () {\n            if (node.loaded || node.loading) {\n                return;\n            }\n            node.loading = true;\n            node.octreeGeometry.numNodesLoading++;\n            try {\n                if (node.nodeType === 2) {\n                    yield this.loadHierarchy(node);\n                }\n                const { byteOffset, byteSize } = node;\n                if (byteOffset === undefined || byteSize === undefined) {\n                    throw new Error('byteOffset and byteSize are required');\n                }\n                const urlOctree = this.url.replace('/metadata.json', '/octree.bin');\n                const first = byteOffset;\n                const last = byteOffset + byteSize - BigInt(1);\n                let buffer;\n                if (byteSize === BigInt(0)) {\n                    buffer = new ArrayBuffer(0);\n                    console.warn(`loaded node with 0 bytes: ${node.name}`);\n                }\n                else {\n                    const response = yield fetch(urlOctree, {\n                        headers: {\n                            'content-type': 'multipart/byteranges',\n                            Range: `bytes=${first}-${last}`\n                        }\n                    });\n                    buffer = yield response.arrayBuffer();\n                }\n                const workerType = WorkerType.DECODER_WORKER;\n                const worker = this.workerPool.getWorker(workerType);\n                worker.onmessage = (e) => {\n                    const data = e.data;\n                    const buffers = data.attributeBuffers;\n                    this.workerPool.returnWorker(workerType, worker);\n                    const geometry = new external_three_.BufferGeometry();\n                    for (const property in buffers) {\n                        const buffer = buffers[property].buffer;\n                        if (property === 'position') {\n                            geometry.setAttribute('position', new external_three_.BufferAttribute(new Float32Array(buffer), 3));\n                        }\n                        else if (property === 'rgba') {\n                            geometry.setAttribute('rgba', new external_three_.BufferAttribute(new Uint8Array(buffer), 4, true));\n                        }\n                        else if (property === 'NORMAL') {\n                            geometry.setAttribute('normal', new external_three_.BufferAttribute(new Float32Array(buffer), 3));\n                        }\n                        else if (property === 'INDICES') {\n                            const bufferAttribute = new external_three_.BufferAttribute(new Uint8Array(buffer), 4);\n                            bufferAttribute.normalized = true;\n                            geometry.setAttribute('indices', bufferAttribute);\n                        }\n                        else {\n                            const bufferAttribute = new external_three_.BufferAttribute(new Float32Array(buffer), 1);\n                            const batchAttribute = buffers[property].attribute;\n                            bufferAttribute.potree = {\n                                offset: buffers[property].offset,\n                                scale: buffers[property].scale,\n                                preciseBuffer: buffers[property].preciseBuffer,\n                                range: batchAttribute.range\n                            };\n                            geometry.setAttribute(property, bufferAttribute);\n                        }\n                    }\n                    node.density = data.density;\n                    node.geometry = geometry;\n                    node.loaded = true;\n                    node.loading = false;\n                    node.octreeGeometry.numNodesLoading--;\n                };\n                const pointAttributes = node.octreeGeometry.pointAttributes;\n                const scale = node.octreeGeometry.scale;\n                const box = node.boundingBox;\n                const min = node.octreeGeometry.offset.clone().add(box.min);\n                const size = box.max.clone().sub(box.min);\n                const max = min.clone().add(size);\n                const numPoints = node.numPoints;\n                const offset = node.octreeGeometry.loader.offset;\n                const message = {\n                    name: node.name,\n                    buffer: buffer,\n                    pointAttributes: pointAttributes,\n                    scale: scale,\n                    min: min,\n                    max: max,\n                    size: size,\n                    offset: offset,\n                    numPoints: numPoints\n                };\n                worker.postMessage(message, [message.buffer]);\n            }\n            catch (e) {\n                node.loaded = false;\n                node.loading = false;\n                node.octreeGeometry.numNodesLoading--;\n            }\n        });\n    }\n    parseHierarchy(node, buffer) {\n        const view = new DataView(buffer);\n        const bytesPerNode = 22;\n        const numNodes = buffer.byteLength / bytesPerNode;\n        const octree = node.octreeGeometry;\n        const nodes = new Array(numNodes);\n        nodes[0] = node;\n        let nodePos = 1;\n        for (let i = 0; i < numNodes; i++) {\n            const current = nodes[i];\n            const type = view.getUint8(i * bytesPerNode + 0);\n            const childMask = view.getUint8(i * bytesPerNode + 1);\n            const numPoints = view.getUint32(i * bytesPerNode + 2, true);\n            const byteOffset = view.getBigInt64(i * bytesPerNode + 6, true);\n            const byteSize = view.getBigInt64(i * bytesPerNode + 14, true);\n            if (current.nodeType === 2) {\n                // replace proxy with real node\n                current.byteOffset = byteOffset;\n                current.byteSize = byteSize;\n                current.numPoints = numPoints;\n            }\n            else if (type === 2) {\n                // load proxy\n                current.hierarchyByteOffset = byteOffset;\n                current.hierarchyByteSize = byteSize;\n                current.numPoints = numPoints;\n            }\n            else {\n                // load real node\n                current.byteOffset = byteOffset;\n                current.byteSize = byteSize;\n                current.numPoints = numPoints;\n            }\n            current.nodeType = type;\n            if (current.nodeType === 2) {\n                continue;\n            }\n            for (let childIndex = 0; childIndex < 8; childIndex++) {\n                const childExists = (1 << childIndex & childMask) !== 0;\n                if (!childExists) {\n                    continue;\n                }\n                const childName = current.name + childIndex;\n                const childAABB = octree_loader_createChildAABB(current.boundingBox, childIndex);\n                const child = new OctreeGeometryNode(childName, octree, childAABB);\n                child.name = childName;\n                child.spacing = current.spacing / 2;\n                child.level = current.level + 1;\n                current.children[childIndex] = child;\n                child.parent = current;\n                nodes[nodePos] = child;\n                nodePos++;\n            }\n        }\n    }\n    loadHierarchy(node) {\n        return __awaiter(this, void 0, void 0, function* () {\n            const { hierarchyByteOffset, hierarchyByteSize } = node;\n            if (hierarchyByteOffset === undefined || hierarchyByteSize === undefined) {\n                throw new Error(`hierarchyByteOffset and hierarchyByteSize are undefined for node ${node.name}`);\n            }\n            const hierarchyPath = this.url.replace('/metadata.json', '/hierarchy.bin');\n            const first = hierarchyByteOffset;\n            const last = first + hierarchyByteSize - BigInt(1);\n            const response = yield fetch(hierarchyPath, {\n                headers: {\n                    'content-type': 'multipart/byteranges',\n                    Range: `bytes=${first}-${last}`\n                }\n            });\n            const buffer = yield response.arrayBuffer();\n            this.parseHierarchy(node, buffer);\n        });\n    }\n}\nconst tmpVec3 = new external_three_.Vector3();\nfunction octree_loader_createChildAABB(aabb, index) {\n    const min = aabb.min.clone();\n    const max = aabb.max.clone();\n    const size = tmpVec3.subVectors(max, min);\n    if ((index & 0b0001) > 0) {\n        min.z += size.z / 2;\n    }\n    else {\n        max.z -= size.z / 2;\n    }\n    if ((index & 0b0010) > 0) {\n        min.y += size.y / 2;\n    }\n    else {\n        max.y -= size.y / 2;\n    }\n    if ((index & 0b0100) > 0) {\n        min.x += size.x / 2;\n    }\n    else {\n        max.x -= size.x / 2;\n    }\n    return new external_three_.Box3(min, max);\n}\nconst typenameTypeattributeMap = {\n    double: PointAttributeTypes.DATA_TYPE_DOUBLE,\n    float: PointAttributeTypes.DATA_TYPE_FLOAT,\n    int8: PointAttributeTypes.DATA_TYPE_INT8,\n    uint8: PointAttributeTypes.DATA_TYPE_UINT8,\n    int16: PointAttributeTypes.DATA_TYPE_INT16,\n    uint16: PointAttributeTypes.DATA_TYPE_UINT16,\n    int32: PointAttributeTypes.DATA_TYPE_INT32,\n    uint32: PointAttributeTypes.DATA_TYPE_UINT32,\n    int64: PointAttributeTypes.DATA_TYPE_INT64,\n    uint64: PointAttributeTypes.DATA_TYPE_UINT64\n};\nclass OctreeLoader {\n    constructor() {\n        this.workerPool = new worker_pool_WorkerPool();\n    }\n    static parseAttributes(jsonAttributes) {\n        const attributes = new point_attributes_PointAttributes();\n        const replacements = { rgb: 'rgba' };\n        for (const jsonAttribute of jsonAttributes) {\n            const { name, numElements, min, max } = jsonAttribute;\n            const type = typenameTypeattributeMap[jsonAttribute.type];\n            const potreeAttributeName = replacements[name] ? replacements[name] : name;\n            const attribute = new PointAttribute(potreeAttributeName, type, numElements);\n            if (numElements === 1) {\n                attribute.range = [min[0], max[0]];\n            }\n            else {\n                attribute.range = [min, max];\n            }\n            if (name === 'gps-time') { // HACK: Guard against bad gpsTime range in metadata, see potree/potree#909\n                if (typeof attribute.range[0] === 'number' && attribute.range[0] === attribute.range[1]) {\n                    attribute.range[1] += 1;\n                }\n            }\n            attribute.initialRange = attribute.range;\n            attributes.add(attribute);\n        }\n        {\n            const hasNormals = attributes.attributes.find((a) => a.name === 'NormalX') !== undefined &&\n                attributes.attributes.find((a) => a.name === 'NormalY') !== undefined &&\n                attributes.attributes.find((a) => a.name === 'NormalZ') !== undefined;\n            if (hasNormals) {\n                const vector = {\n                    name: 'NORMAL',\n                    attributes: ['NormalX', 'NormalY', 'NormalZ']\n                };\n                attributes.addVector(vector);\n            }\n        }\n        return attributes;\n    }\n    load(url, xhrRequest) {\n        return __awaiter(this, void 0, void 0, function* () {\n            const response = yield xhrRequest(url);\n            const metadata = yield response.json();\n            const attributes = OctreeLoader.parseAttributes(metadata.attributes);\n            const loader = new NodeLoader(url, this.workerPool, metadata);\n            loader.attributes = attributes;\n            loader.scale = metadata.scale;\n            loader.offset = metadata.offset;\n            const octree = new OctreeGeometry(loader, new external_three_.Box3(new external_three_.Vector3(...metadata.boundingBox.min), new external_three_.Vector3(...metadata.boundingBox.max)));\n            octree.url = url;\n            octree.spacing = metadata.spacing;\n            octree.scale = metadata.scale;\n            const min = new external_three_.Vector3(...metadata.boundingBox.min);\n            const max = new external_three_.Vector3(...metadata.boundingBox.max);\n            const boundingBox = new external_three_.Box3(min, max);\n            const offset = min.clone();\n            boundingBox.min.sub(offset);\n            boundingBox.max.sub(offset);\n            octree.projection = metadata.projection;\n            octree.boundingBox = boundingBox;\n            octree.tightBoundingBox = boundingBox.clone();\n            octree.boundingSphere = boundingBox.getBoundingSphere(new external_three_.Sphere());\n            octree.tightBoundingSphere = boundingBox.getBoundingSphere(new external_three_.Sphere());\n            octree.offset = offset;\n            octree.pointAttributes = OctreeLoader.parseAttributes(metadata.attributes);\n            const root = new OctreeGeometryNode('r', octree, boundingBox);\n            root.level = 0;\n            root.nodeType = 2;\n            root.hierarchyByteOffset = BigInt(0);\n            root.hierarchyByteSize = BigInt(metadata.hierarchy.firstChunkSize);\n            root.spacing = octree.spacing;\n            root.byteOffset = BigInt(0);\n            octree.root = root;\n            loader.load(root);\n            const result = { geometry: octree };\n            return result;\n        });\n    }\n}\n\n;// CONCATENATED MODULE: ./src/loading2/load-octree.ts\nvar load_octree_awaiter = (undefined && undefined.__awaiter) || function (thisArg, _arguments, P, generator) {\n    function adopt(value) { return value instanceof P ? value : new P(function (resolve) { resolve(value); }); }\n    return new (P || (P = Promise))(function (resolve, reject) {\n        function fulfilled(value) { try { step(generator.next(value)); } catch (e) { reject(e); } }\n        function rejected(value) { try { step(generator[\"throw\"](value)); } catch (e) { reject(e); } }\n        function step(result) { result.done ? resolve(result.value) : adopt(result.value).then(fulfilled, rejected); }\n        step((generator = generator.apply(thisArg, _arguments || [])).next());\n    });\n};\n\nfunction loadOctree(url, getUrl, xhrRequest) {\n    return load_octree_awaiter(this, void 0, void 0, function* () {\n        const trueUrl = yield getUrl(url);\n        const loader = new OctreeLoader();\n        const { geometry } = yield loader.load(trueUrl, xhrRequest);\n        return geometry;\n    });\n}\n\n;// CONCATENATED MODULE: ./src/type-predicates.ts\nfunction isGeometryNode(node) {\n    return node !== undefined && node !== null && node.isGeometryNode;\n}\nfunction isTreeNode(node) {\n    return node !== undefined && node !== null && node.isTreeNode;\n}\n\n;// CONCATENATED MODULE: ./src/utils/binary-heap.js\n/**\n * from: http://eloquentjavascript.net/1st_edition/appendix2.html\n *\n */\n\nfunction BinaryHeap(scoreFunction) {\n  this.content = [];\n  this.scoreFunction = scoreFunction;\n}\nBinaryHeap.prototype = {\n  push: function push(element) {\n    // Add the new element to the end of the array.\n    this.content.push(element);\n    // Allow it to bubble up.\n    this.bubbleUp(this.content.length - 1);\n  },\n  pop: function pop() {\n    // Store the first element so we can return it later.\n    var result = this.content[0];\n    // Get the element at the end of the array.\n    var end = this.content.pop();\n    // If there are any elements left, put the end element at the\n    // start, and let it sink down.\n    if (this.content.length > 0) {\n      this.content[0] = end;\n      this.sinkDown(0);\n    }\n    return result;\n  },\n  remove: function remove(node) {\n    var length = this.content.length;\n    // To remove a value, we must search through the array to find\n    // it.\n    for (var i = 0; i < length; i++) {\n      if (this.content[i] != node) continue;\n      // When it is found, the process seen in 'pop' is repeated\n      // to fill up the hole.\n      var end = this.content.pop();\n      // If the element we popped was the one we needed to remove,\n      // we're done.\n      if (i == length - 1) break;\n      // Otherwise, we replace the removed element with the popped\n      // one, and allow it to float up or sink down as appropriate.\n      this.content[i] = end;\n      this.bubbleUp(i);\n      this.sinkDown(i);\n      break;\n    }\n  },\n  size: function size() {\n    return this.content.length;\n  },\n  bubbleUp: function bubbleUp(n) {\n    // Fetch the element that has to be moved.\n    var element = this.content[n],\n      score = this.scoreFunction(element);\n    // When at 0, an element can not go up any further.\n    while (n > 0) {\n      // Compute the parent element's index, and fetch it.\n      var parentN = Math.floor((n + 1) / 2) - 1,\n        parent = this.content[parentN];\n      // If the parent has a lesser score, things are in order and we\n      // are done.\n      if (score >= this.scoreFunction(parent)) break;\n\n      // Otherwise, swap the parent with the current element and\n      // continue.\n      this.content[parentN] = element;\n      this.content[n] = parent;\n      n = parentN;\n    }\n  },\n  sinkDown: function sinkDown(n) {\n    // Look up the target element and its score.\n    var length = this.content.length,\n      element = this.content[n],\n      elemScore = this.scoreFunction(element);\n    while (true) {\n      // Compute the indices of the child elements.\n      var child2N = (n + 1) * 2,\n        child1N = child2N - 1;\n      // This is used to store the new position of the element,\n      // if any.\n      var swap = null;\n      // If the first child exists (is inside the array)...\n      if (child1N < length) {\n        // Look it up and compute its score.\n        var child1 = this.content[child1N],\n          child1Score = this.scoreFunction(child1);\n        // If the score is less than our element's, we need to swap.\n        if (child1Score < elemScore) swap = child1N;\n      }\n      // Do the same checks for the other child.\n      if (child2N < length) {\n        var child2 = this.content[child2N],\n          child2Score = this.scoreFunction(child2);\n        if (child2Score < (swap == null ? elemScore : child1Score)) swap = child2N;\n      }\n\n      // No need to swap further, we are done.\n      if (swap == null) break;\n\n      // Otherwise, swap and continue.\n      this.content[n] = this.content[swap];\n      this.content[swap] = element;\n      n = swap;\n    }\n  }\n};\n;// CONCATENATED MODULE: ./src/utils/box3-helper.ts\n\n/**\n *\n * code adapted from three.js BoxHelper.js\n * https://github.com/mrdoob/three.js/blob/dev/src/helpers/BoxHelper.js\n *\n * @author mrdoob / http://mrdoob.com/\n * @author Mugen87 / http://github.com/Mugen87\n * @author mschuetz / http://potree.org\n */\nclass Box3Helper extends external_three_.LineSegments {\n    constructor(box, color = new external_three_.Color(0xffff00)) {\n        // prettier-ignore\n        const indices = new Uint16Array([0, 1, 1, 2, 2, 3, 3, 0, 4, 5, 5, 6, 6, 7, 7, 4, 0, 4, 1, 5, 2, 6, 3, 7]);\n        // prettier-ignore\n        const positions = new Float32Array([\n            box.min.x, box.min.y, box.min.z,\n            box.max.x, box.min.y, box.min.z,\n            box.max.x, box.min.y, box.max.z,\n            box.min.x, box.min.y, box.max.z,\n            box.min.x, box.max.y, box.min.z,\n            box.max.x, box.max.y, box.min.z,\n            box.max.x, box.max.y, box.max.z,\n            box.min.x, box.max.y, box.max.z\n        ]);\n        const geometry = new external_three_.BufferGeometry();\n        geometry.setIndex(new external_three_.BufferAttribute(indices, 1));\n        geometry.setAttribute('position', new external_three_.BufferAttribute(positions, 3));\n        const material = new external_three_.LineBasicMaterial({ color: color });\n        super(geometry, material);\n    }\n}\n\n;// CONCATENATED MODULE: ./src/utils/lru.ts\nclass LRUItem {\n    constructor(node) {\n        this.node = node;\n        this.next = null;\n        this.previous = null;\n    }\n}\n/**\n * A doubly-linked-list of the least recently used elements.\n */\nclass LRU {\n    constructor(pointBudget = 1000000) {\n        this.pointBudget = pointBudget;\n        // the least recently used item\n        this.first = null;\n        // the most recently used item\n        this.last = null;\n        this.numPoints = 0;\n        this.items = new Map();\n    }\n    get size() {\n        return this.items.size;\n    }\n    has(node) {\n        return this.items.has(node.id);\n    }\n    /**\n     * Makes the specified the most recently used item. if the list does not contain node, it will\n     * be added.\n     */\n    touch(node) {\n        if (!node.loaded) {\n            return;\n        }\n        const item = this.items.get(node.id);\n        if (item) {\n            this.touchExisting(item);\n        }\n        else {\n            this.addNew(node);\n        }\n    }\n    addNew(node) {\n        const item = new LRUItem(node);\n        item.previous = this.last;\n        this.last = item;\n        if (item.previous) {\n            item.previous.next = item;\n        }\n        if (!this.first) {\n            this.first = item;\n        }\n        this.items.set(node.id, item);\n        this.numPoints += node.numPoints;\n    }\n    touchExisting(item) {\n        if (!item.previous) {\n            // handle touch on first element\n            if (item.next) {\n                this.first = item.next;\n                this.first.previous = null;\n                item.previous = this.last;\n                item.next = null;\n                this.last = item;\n                if (item.previous) {\n                    item.previous.next = item;\n                }\n            }\n        }\n        else if (!item.next) {\n            // handle touch on last element\n        }\n        else {\n            // handle touch on any other element\n            item.previous.next = item.next;\n            item.next.previous = item.previous;\n            item.previous = this.last;\n            item.next = null;\n            this.last = item;\n            if (item.previous) {\n                item.previous.next = item;\n            }\n        }\n    }\n    remove(node) {\n        const item = this.items.get(node.id);\n        if (!item) {\n            return;\n        }\n        if (this.items.size === 1) {\n            this.first = null;\n            this.last = null;\n        }\n        else {\n            if (!item.previous) {\n                this.first = item.next;\n                this.first.previous = null;\n            }\n            if (!item.next) {\n                this.last = item.previous;\n                this.last.next = null;\n            }\n            if (item.previous && item.next) {\n                item.previous.next = item.next;\n                item.next.previous = item.previous;\n            }\n        }\n        this.items.delete(node.id);\n        this.numPoints -= node.numPoints;\n    }\n    getLRUItem() {\n        return this.first ? this.first.node : undefined;\n    }\n    freeMemory() {\n        if (this.items.size <= 1) {\n            return;\n        }\n        while (this.numPoints > this.pointBudget * 2) {\n            const node = this.getLRUItem();\n            if (node) {\n                this.disposeSubtree(node);\n            }\n        }\n    }\n    disposeSubtree(node) {\n        // Collect all the nodes which are to be disposed and removed.\n        const nodesToDispose = [node];\n        node.traverse(n => {\n            if (n.loaded) {\n                nodesToDispose.push(n);\n            }\n        });\n        // Dispose of all the nodes in one go.\n        for (const n of nodesToDispose) {\n            n.dispose();\n            this.remove(n);\n        }\n    }\n}\n\n;// CONCATENATED MODULE: ./src/potree.ts\n\n\n\n\n\n\n\n\n\n\n\n\nclass QueueItem {\n    constructor(pointCloudIndex, weight, node, parent) {\n        this.pointCloudIndex = pointCloudIndex;\n        this.weight = weight;\n        this.node = node;\n        this.parent = parent;\n    }\n}\nconst GEOMETRY_LOADERS = {\n    v1: loadPOC,\n    v2: loadOctree\n};\nclass Potree {\n    constructor(version = \"v1\") {\n        this._pointBudget = DEFAULT_POINT_BUDGET;\n        this._rendererSize = new external_three_.Vector2();\n        this.maxNumNodesLoading = MAX_NUM_NODES_LOADING;\n        this.features = FEATURES;\n        this.lru = new LRU(this._pointBudget);\n        this.updateVisibilityStructures = (() => {\n            const frustumMatrix = new external_three_.Matrix4();\n            const inverseWorldMatrix = new external_three_.Matrix4();\n            const cameraMatrix = new external_three_.Matrix4();\n            return (pointClouds, camera) => {\n                const frustums = [];\n                const cameraPositions = [];\n                const priorityQueue = new BinaryHeap(x => 1 / x.weight);\n                for (let i = 0; i < pointClouds.length; i++) {\n                    const pointCloud = pointClouds[i];\n                    if (!pointCloud.initialized()) {\n                        continue;\n                    }\n                    pointCloud.numVisiblePoints = 0;\n                    pointCloud.visibleNodes = [];\n                    pointCloud.visibleGeometry = [];\n                    camera.updateMatrixWorld(false);\n                    // Furstum in object space.\n                    const inverseViewMatrix = camera.matrixWorldInverse;\n                    const worldMatrix = pointCloud.matrixWorld;\n                    frustumMatrix\n                        .identity()\n                        .multiply(camera.projectionMatrix)\n                        .multiply(inverseViewMatrix)\n                        .multiply(worldMatrix);\n                    frustums.push(new external_three_.Frustum().setFromProjectionMatrix(frustumMatrix));\n                    // Camera position in object space\n                    inverseWorldMatrix.copy(worldMatrix).invert();\n                    cameraMatrix\n                        .identity()\n                        .multiply(inverseWorldMatrix)\n                        .multiply(camera.matrixWorld);\n                    cameraPositions.push(new external_three_.Vector3().setFromMatrixPosition(cameraMatrix));\n                    if (pointCloud.visible && pointCloud.root !== null) {\n                        const weight = Number.MAX_VALUE;\n                        priorityQueue.push(new QueueItem(i, weight, pointCloud.root));\n                    }\n                    // Hide any previously visible nodes. We will later show only the needed ones.\n                    if (isTreeNode(pointCloud.root)) {\n                        pointCloud.hideDescendants(pointCloud.root.sceneNode);\n                    }\n                    for (const boundingBoxNode of pointCloud.boundingBoxNodes) {\n                        boundingBoxNode.visible = false;\n                    }\n                }\n                return { frustums, cameraPositions, priorityQueue };\n            };\n        })();\n        this.loadGeometry = GEOMETRY_LOADERS[version];\n    }\n    loadPointCloud(url, getUrl, xhrRequest = (input, init) => fetch(input, init)) {\n        return this.loadGeometry(url, getUrl, xhrRequest).then(geometry => new PointCloudOctree(this, geometry));\n    }\n    updatePointClouds(pointClouds, camera, renderer) {\n        const result = this.updateVisibility(pointClouds, camera, renderer);\n        for (let i = 0; i < pointClouds.length; i++) {\n            const pointCloud = pointClouds[i];\n            if (pointCloud.disposed) {\n                continue;\n            }\n            pointCloud.material.updateMaterial(pointCloud, pointCloud.visibleNodes, camera, renderer);\n            pointCloud.updateVisibleBounds();\n            pointCloud.updateBoundingBoxes();\n        }\n        this.lru.freeMemory();\n        return result;\n    }\n    static pick(pointClouds, renderer, camera, ray, params = {}) {\n        Potree.picker = Potree.picker || new PointCloudOctreePicker();\n        return Potree.picker.pick(renderer, camera, ray, pointClouds, params);\n    }\n    get pointBudget() {\n        return this._pointBudget;\n    }\n    set pointBudget(value) {\n        if (value !== this._pointBudget) {\n            this._pointBudget = value;\n            this.lru.pointBudget = value;\n            this.lru.freeMemory();\n        }\n    }\n    static set maxLoaderWorkers(value) {\n        BinaryLoader.WORKER_POOL.maxWorkers = value;\n    }\n    static get maxLoaderWorkers() {\n        return BinaryLoader.WORKER_POOL.maxWorkers;\n    }\n    updateVisibility(pointClouds, camera, renderer) {\n        let numVisiblePoints = 0;\n        const visibleNodes = [];\n        const unloadedGeometry = [];\n        // calculate object space frustum and cam pos and setup priority queue\n        const { frustums, cameraPositions, priorityQueue } = this.updateVisibilityStructures(pointClouds, camera);\n        let loadedToGPUThisFrame = 0;\n        let exceededMaxLoadsToGPU = false;\n        let nodeLoadFailed = false;\n        let queueItem;\n        while ((queueItem = priorityQueue.pop()) !== undefined) {\n            let node = queueItem.node;\n            // If we will end up with too many points, we stop right away.\n            if (numVisiblePoints + node.numPoints > this.pointBudget) {\n                break;\n            }\n            const pointCloudIndex = queueItem.pointCloudIndex;\n            const pointCloud = pointClouds[pointCloudIndex];\n            const maxLevel = pointCloud.maxLevel !== undefined ? pointCloud.maxLevel : Infinity;\n            if (node.level > maxLevel ||\n                !frustums[pointCloudIndex].intersectsBox(node.boundingBox) ||\n                this.shouldClip(pointCloud, node.boundingBox)) {\n                continue;\n            }\n            numVisiblePoints += node.numPoints;\n            pointCloud.numVisiblePoints += node.numPoints;\n            const parentNode = queueItem.parent;\n            if (isGeometryNode(node) && (!parentNode || isTreeNode(parentNode))) {\n                if (node.loaded && loadedToGPUThisFrame < MAX_LOADS_TO_GPU) {\n                    node = pointCloud.toTreeNode(node, parentNode);\n                    loadedToGPUThisFrame++;\n                }\n                else if (!node.failed) {\n                    if (node.loaded && loadedToGPUThisFrame >= MAX_LOADS_TO_GPU) {\n                        exceededMaxLoadsToGPU = true;\n                    }\n                    unloadedGeometry.push(node);\n                    pointCloud.visibleGeometry.push(node);\n                }\n                else {\n                    nodeLoadFailed = true;\n                    continue;\n                }\n            }\n            if (isTreeNode(node)) {\n                this.updateTreeNodeVisibility(pointCloud, node, visibleNodes);\n                pointCloud.visibleGeometry.push(node.geometryNode);\n            }\n            const halfHeight = 0.5 * renderer.getSize(this._rendererSize).height * renderer.getPixelRatio();\n            this.updateChildVisibility(queueItem, priorityQueue, pointCloud, node, cameraPositions[pointCloudIndex], camera, halfHeight);\n        } // end priority queue loop\n        const numNodesToLoad = Math.min(this.maxNumNodesLoading, unloadedGeometry.length);\n        const nodeLoadPromises = [];\n        for (let i = 0; i < numNodesToLoad; i++) {\n            nodeLoadPromises.push(unloadedGeometry[i].load());\n        }\n        return {\n            visibleNodes: visibleNodes,\n            numVisiblePoints: numVisiblePoints,\n            exceededMaxLoadsToGPU: exceededMaxLoadsToGPU,\n            nodeLoadFailed: nodeLoadFailed,\n            nodeLoadPromises: nodeLoadPromises,\n        };\n    }\n    updateTreeNodeVisibility(pointCloud, node, visibleNodes) {\n        this.lru.touch(node.geometryNode);\n        const sceneNode = node.sceneNode;\n        sceneNode.visible = true;\n        sceneNode.material = pointCloud.material;\n        sceneNode.updateMatrix();\n        sceneNode.matrixWorld.multiplyMatrices(pointCloud.matrixWorld, sceneNode.matrix);\n        visibleNodes.push(node);\n        pointCloud.visibleNodes.push(node);\n        this.updateBoundingBoxVisibility(pointCloud, node);\n    }\n    updateChildVisibility(queueItem, priorityQueue, pointCloud, node, cameraPosition, camera, halfHeight) {\n        const children = node.children;\n        for (let i = 0; i < children.length; i++) {\n            const child = children[i];\n            if (child === null) {\n                continue;\n            }\n            const sphere = child.boundingSphere;\n            const distance = sphere.center.distanceTo(cameraPosition);\n            const radius = sphere.radius;\n            let projectionFactor = 0.0;\n            if (camera.type === PERSPECTIVE_CAMERA) {\n                const perspective = camera;\n                const fov = (perspective.fov * Math.PI) / 180.0;\n                const slope = Math.tan(fov / 2.0);\n                projectionFactor = halfHeight / (slope * distance);\n            }\n            else {\n                const orthographic = camera;\n                projectionFactor = (2 * halfHeight) / (orthographic.top - orthographic.bottom);\n            }\n            const screenPixelRadius = radius * projectionFactor;\n            // Don't add the node if it'll be too small on the screen.\n            if (screenPixelRadius < pointCloud.minNodePixelSize) {\n                continue;\n            }\n            // Nodes which are larger will have priority in loading/displaying.\n            const weight = distance < radius ? Number.MAX_VALUE : screenPixelRadius + 1 / distance;\n            priorityQueue.push(new QueueItem(queueItem.pointCloudIndex, weight, child, node));\n        }\n    }\n    updateBoundingBoxVisibility(pointCloud, node) {\n        if (pointCloud.showBoundingBox && !node.boundingBoxNode) {\n            const boxHelper = new Box3Helper(node.boundingBox);\n            boxHelper.matrixAutoUpdate = false;\n            pointCloud.boundingBoxNodes.push(boxHelper);\n            node.boundingBoxNode = boxHelper;\n            node.boundingBoxNode.matrix.copy(pointCloud.matrixWorld);\n        }\n        else if (pointCloud.showBoundingBox && node.boundingBoxNode) {\n            node.boundingBoxNode.visible = true;\n            node.boundingBoxNode.matrix.copy(pointCloud.matrixWorld);\n        }\n        else if (!pointCloud.showBoundingBox && node.boundingBoxNode) {\n            node.boundingBoxNode.visible = false;\n        }\n    }\n    shouldClip(pointCloud, boundingBox) {\n        const material = pointCloud.material;\n        if (material.numClipBoxes === 0 || material.clipMode !== ClipMode.CLIP_OUTSIDE) {\n            return false;\n        }\n        const box2 = boundingBox.clone();\n        pointCloud.updateMatrixWorld(true);\n        box2.applyMatrix4(pointCloud.matrixWorld);\n        const clipBoxes = material.clipBoxes;\n        for (let i = 0; i < clipBoxes.length; i++) {\n            const clipMatrixWorld = clipBoxes[i].matrix;\n            const clipBoxWorld = new external_three_.Box3(new external_three_.Vector3(-0.5, -0.5, -0.5), new external_three_.Vector3(0.5, 0.5, 0.5)).applyMatrix4(clipMatrixWorld);\n            if (box2.intersectsBox(clipBoxWorld)) {\n                return false;\n            }\n        }\n        return true;\n    }\n}\n\n;// CONCATENATED MODULE: ./src/loading2/index.ts\n\n\n;// CONCATENATED MODULE: ./src/index.ts\n\n\n\n\n\n\n\n\n\n\n\n\n\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///599\n")},300:(__unused_webpack_module,__webpack_exports__,__webpack_require__)=>{eval("/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   A: () => (/* binding */ Worker_fn)\n/* harmony export */ });\n/* harmony import */ var _node_modules_worker_loader_dist_runtime_inline_js__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(512);\n/* harmony import */ var _node_modules_worker_loader_dist_runtime_inline_js__WEBPACK_IMPORTED_MODULE_0___default = /*#__PURE__*/__webpack_require__.n(_node_modules_worker_loader_dist_runtime_inline_js__WEBPACK_IMPORTED_MODULE_0__);\n\n\n\nfunction Worker_fn() {\n  return _node_modules_worker_loader_dist_runtime_inline_js__WEBPACK_IMPORTED_MODULE_0___default()(\"(()=>{\\\"use strict\\\";var __webpack_modules__={256:()=>{eval(\\\"\\\\n;// CONCATENATED MODULE: ./src/loading2/point-attributes.ts\\\\n/**\\\\n * Some types of possible point attribute data formats\\\\n *\\\\n * @class\\\\n */\\\\nconst PointAttributeTypes = {\\\\n    DATA_TYPE_DOUBLE: { ordinal: 0, name: 'double', size: 8 },\\\\n    DATA_TYPE_FLOAT: { ordinal: 1, name: 'float', size: 4 },\\\\n    DATA_TYPE_INT8: { ordinal: 2, name: 'int8', size: 1 },\\\\n    DATA_TYPE_UINT8: { ordinal: 3, name: 'uint8', size: 1 },\\\\n    DATA_TYPE_INT16: { ordinal: 4, name: 'int16', size: 2 },\\\\n    DATA_TYPE_UINT16: { ordinal: 5, name: 'uint16', size: 2 },\\\\n    DATA_TYPE_INT32: { ordinal: 6, name: 'int32', size: 4 },\\\\n    DATA_TYPE_UINT32: { ordinal: 7, name: 'uint32', size: 4 },\\\\n    DATA_TYPE_INT64: { ordinal: 8, name: 'int64', size: 8 },\\\\n    DATA_TYPE_UINT64: { ordinal: 9, name: 'uint64', size: 8 }\\\\n};\\\\nlet i = 0;\\\\nfor (const obj in PointAttributeTypes) {\\\\n    PointAttributeTypes[i] = PointAttributeTypes[obj];\\\\n    i++;\\\\n}\\\\n\\\\nclass PointAttribute {\\\\n    constructor(name, type, numElements, range = [Infinity, -Infinity]) {\\\\n        this.name = name;\\\\n        this.type = type;\\\\n        this.numElements = numElements;\\\\n        this.range = range;\\\\n        this.byteSize = this.numElements * this.type.size;\\\\n        this.description = '';\\\\n    }\\\\n}\\\\n\\\\nconst POINT_ATTRIBUTES = {\\\\n    POSITION_CARTESIAN: new PointAttribute('POSITION_CARTESIAN', PointAttributeTypes.DATA_TYPE_FLOAT, 3),\\\\n    RGBA_PACKED: new PointAttribute('COLOR_PACKED', PointAttributeTypes.DATA_TYPE_INT8, 4),\\\\n    COLOR_PACKED: new PointAttribute('COLOR_PACKED', PointAttributeTypes.DATA_TYPE_INT8, 4),\\\\n    RGB_PACKED: new PointAttribute('COLOR_PACKED', PointAttributeTypes.DATA_TYPE_INT8, 3),\\\\n    NORMAL_FLOATS: new PointAttribute('NORMAL_FLOATS', PointAttributeTypes.DATA_TYPE_FLOAT, 3),\\\\n    INTENSITY: new PointAttribute('INTENSITY', PointAttributeTypes.DATA_TYPE_UINT16, 1),\\\\n    CLASSIFICATION: new PointAttribute('CLASSIFICATION', PointAttributeTypes.DATA_TYPE_UINT8, 1),\\\\n    NORMAL_SPHEREMAPPED: new PointAttribute('NORMAL_SPHEREMAPPED', PointAttributeTypes.DATA_TYPE_UINT8, 2),\\\\n    NORMAL_OCT16: new PointAttribute('NORMAL_OCT16', PointAttributeTypes.DATA_TYPE_UINT8, 2),\\\\n    NORMAL: new PointAttribute('NORMAL', PointAttributeTypes.DATA_TYPE_FLOAT, 3),\\\\n    RETURN_NUMBER: new PointAttribute('RETURN_NUMBER', PointAttributeTypes.DATA_TYPE_UINT8, 1),\\\\n    NUMBER_OF_RETURNS: new PointAttribute('NUMBER_OF_RETURNS', PointAttributeTypes.DATA_TYPE_UINT8, 1),\\\\n    SOURCE_ID: new PointAttribute('SOURCE_ID', PointAttributeTypes.DATA_TYPE_UINT16, 1),\\\\n    INDICES: new PointAttribute('INDICES', PointAttributeTypes.DATA_TYPE_UINT32, 1),\\\\n    SPACING: new PointAttribute('SPACING', PointAttributeTypes.DATA_TYPE_FLOAT, 1),\\\\n    GPS_TIME: new PointAttribute('GPS_TIME', PointAttributeTypes.DATA_TYPE_DOUBLE, 1)\\\\n};\\\\nclass PointAttributes {\\\\n    constructor(pointAttributes, attributes = [], byteSize = 0, size = 0, vectors = []) {\\\\n        this.attributes = attributes;\\\\n        this.byteSize = byteSize;\\\\n        this.size = size;\\\\n        this.vectors = vectors;\\\\n        if (pointAttributes != null) {\\\\n            for (let i = 0; i < pointAttributes.length; i++) {\\\\n                const pointAttributeName = pointAttributes[i];\\\\n                const pointAttribute = POINT_ATTRIBUTES[pointAttributeName];\\\\n                this.attributes.push(pointAttribute);\\\\n                this.byteSize += pointAttribute.byteSize;\\\\n                this.size++;\\\\n            }\\\\n        }\\\\n    }\\\\n    add(pointAttribute) {\\\\n        this.attributes.push(pointAttribute);\\\\n        this.byteSize += pointAttribute.byteSize;\\\\n        this.size++;\\\\n    }\\\\n    addVector(vector) {\\\\n        this.vectors.push(vector);\\\\n    }\\\\n    hasNormals() {\\\\n        for (const name in this.attributes) {\\\\n            const pointAttribute = this.attributes[name];\\\\n            if (pointAttribute === POINT_ATTRIBUTES.NORMAL_SPHEREMAPPED ||\\\\n                pointAttribute === POINT_ATTRIBUTES.NORMAL_FLOATS ||\\\\n                pointAttribute === POINT_ATTRIBUTES.NORMAL ||\\\\n                pointAttribute === POINT_ATTRIBUTES.NORMAL_OCT16) {\\\\n                return true;\\\\n            }\\\\n        }\\\\n        return false;\\\\n    }\\\\n}\\\\n\\\\n;// CONCATENATED MODULE: ./node_modules/babel-loader/lib/index.js!./src/loading2/decoder.worker.js\\\\nfunction _slicedToArray(arr, i) { return _arrayWithHoles(arr) || _iterableToArrayLimit(arr, i) || _unsupportedIterableToArray(arr, i) || _nonIterableRest(); }\\\\nfunction _nonIterableRest() { throw new TypeError(\\\\\\\"Invalid attempt to destructure non-iterable instance.\\\\\\\\nIn order to be iterable, non-array objects must have a [Symbol.iterator]() method.\\\\\\\"); }\\\\nfunction _iterableToArrayLimit(r, l) { var t = null == r ? null : \\\\\\\"undefined\\\\\\\" != typeof Symbol && r[Symbol.iterator] || r[\\\\\\\"@@iterator\\\\\\\"]; if (null != t) { var e, n, i, u, a = [], f = !0, o = !1; try { if (i = (t = t.call(r)).next, 0 === l) { if (Object(t) !== t) return; f = !1; } else for (; !(f = (e = i.call(t)).done) && (a.push(e.value), a.length !== l); f = !0); } catch (r) { o = !0, n = r; } finally { try { if (!f && null != t.return && (u = t.return(), Object(u) !== u)) return; } finally { if (o) throw n; } } return a; } }\\\\nfunction _arrayWithHoles(arr) { if (Array.isArray(arr)) return arr; }\\\\nfunction _createForOfIteratorHelper(o, allowArrayLike) { var it = typeof Symbol !== \\\\\\\"undefined\\\\\\\" && o[Symbol.iterator] || o[\\\\\\\"@@iterator\\\\\\\"]; if (!it) { if (Array.isArray(o) || (it = _unsupportedIterableToArray(o)) || allowArrayLike && o && typeof o.length === \\\\\\\"number\\\\\\\") { if (it) o = it; var i = 0; var F = function F() {}; return { s: F, n: function n() { if (i >= o.length) return { done: true }; return { done: false, value: o[i++] }; }, e: function e(_e) { throw _e; }, f: F }; } throw new TypeError(\\\\\\\"Invalid attempt to iterate non-iterable instance.\\\\\\\\nIn order to be iterable, non-array objects must have a [Symbol.iterator]() method.\\\\\\\"); } var normalCompletion = true, didErr = false, err; return { s: function s() { it = it.call(o); }, n: function n() { var step = it.next(); normalCompletion = step.done; return step; }, e: function e(_e2) { didErr = true; err = _e2; }, f: function f() { try { if (!normalCompletion && it.return != null) it.return(); } finally { if (didErr) throw err; } } }; }\\\\nfunction _unsupportedIterableToArray(o, minLen) { if (!o) return; if (typeof o === \\\\\\\"string\\\\\\\") return _arrayLikeToArray(o, minLen); var n = Object.prototype.toString.call(o).slice(8, -1); if (n === \\\\\\\"Object\\\\\\\" && o.constructor) n = o.constructor.name; if (n === \\\\\\\"Map\\\\\\\" || n === \\\\\\\"Set\\\\\\\") return Array.from(o); if (n === \\\\\\\"Arguments\\\\\\\" || /^(?:Ui|I)nt(?:8|16|32)(?:Clamped)?Array$/.test(n)) return _arrayLikeToArray(o, minLen); }\\\\nfunction _arrayLikeToArray(arr, len) { if (len == null || len > arr.length) len = arr.length; for (var i = 0, arr2 = new Array(len); i < len; i++) arr2[i] = arr[i]; return arr2; }\\\\n\\\\nvar typedArrayMapping = {\\\\n  'int8': Int8Array,\\\\n  'int16': Int16Array,\\\\n  'int32': Int32Array,\\\\n  'int64': Float64Array,\\\\n  'uint8': Uint8Array,\\\\n  'uint16': Uint16Array,\\\\n  'uint32': Uint32Array,\\\\n  'uint64': Float64Array,\\\\n  'float': Float32Array,\\\\n  'double': Float64Array\\\\n};\\\\nonmessage = function onmessage(event) {\\\\n  var _event$data = event.data,\\\\n    buffer = _event$data.buffer,\\\\n    pointAttributes = _event$data.pointAttributes,\\\\n    scale = _event$data.scale,\\\\n    name = _event$data.name,\\\\n    min = _event$data.min,\\\\n    max = _event$data.max,\\\\n    size = _event$data.size,\\\\n    offset = _event$data.offset,\\\\n    numPoints = _event$data.numPoints;\\\\n  var view = new DataView(buffer);\\\\n  var attributeBuffers = {};\\\\n  var attributeOffset = 0;\\\\n  var bytesPerPoint = 0;\\\\n  var _iterator = _createForOfIteratorHelper(pointAttributes.attributes),\\\\n    _step;\\\\n  try {\\\\n    for (_iterator.s(); !(_step = _iterator.n()).done;) {\\\\n      var pointAttribute = _step.value;\\\\n      bytesPerPoint += pointAttribute.byteSize;\\\\n    }\\\\n  } catch (err) {\\\\n    _iterator.e(err);\\\\n  } finally {\\\\n    _iterator.f();\\\\n  }\\\\n  var gridSize = 32;\\\\n  var grid = new Uint32Array(Math.pow(gridSize, 3));\\\\n  var toIndex = function toIndex(x, y, z) {\\\\n    // min is already subtracted\\\\n    var dx = gridSize * x / size.x;\\\\n    var dy = gridSize * y / size.y;\\\\n    var dz = gridSize * z / size.z;\\\\n    var ix = Math.min(parseInt(dx), gridSize - 1);\\\\n    var iy = Math.min(parseInt(dy), gridSize - 1);\\\\n    var iz = Math.min(parseInt(dz), gridSize - 1);\\\\n    var index = ix + iy * gridSize + iz * gridSize * gridSize;\\\\n    return index;\\\\n  };\\\\n  var numOccupiedCells = 0;\\\\n  var _iterator2 = _createForOfIteratorHelper(pointAttributes.attributes),\\\\n    _step2;\\\\n  try {\\\\n    for (_iterator2.s(); !(_step2 = _iterator2.n()).done;) {\\\\n      var _pointAttribute = _step2.value;\\\\n      if (['POSITION_CARTESIAN', 'position'].includes(_pointAttribute.name)) {\\\\n        var _buff = new ArrayBuffer(numPoints * 4 * 3);\\\\n        var positions = new Float32Array(_buff);\\\\n        for (var _j = 0; _j < numPoints; _j++) {\\\\n          var pointOffset = _j * bytesPerPoint;\\\\n          var x = view.getInt32(pointOffset + attributeOffset + 0, true) * scale[0] + offset[0] - min.x;\\\\n          var y = view.getInt32(pointOffset + attributeOffset + 4, true) * scale[1] + offset[1] - min.y;\\\\n          var z = view.getInt32(pointOffset + attributeOffset + 8, true) * scale[2] + offset[2] - min.z;\\\\n          var index = toIndex(x, y, z);\\\\n          var count = grid[index]++;\\\\n          if (count === 0) {\\\\n            numOccupiedCells++;\\\\n          }\\\\n          positions[3 * _j + 0] = x;\\\\n          positions[3 * _j + 1] = y;\\\\n          positions[3 * _j + 2] = z;\\\\n        }\\\\n        attributeBuffers[_pointAttribute.name] = {\\\\n          buffer: _buff,\\\\n          attribute: _pointAttribute\\\\n        };\\\\n      } else if (['RGBA', 'rgba'].includes(_pointAttribute.name)) {\\\\n        var _buff2 = new ArrayBuffer(numPoints * 4);\\\\n        var colors = new Uint8Array(_buff2);\\\\n        for (var _j2 = 0; _j2 < numPoints; _j2++) {\\\\n          var _pointOffset = _j2 * bytesPerPoint;\\\\n          var r = view.getUint16(_pointOffset + attributeOffset + 0, true);\\\\n          var g = view.getUint16(_pointOffset + attributeOffset + 2, true);\\\\n          var b = view.getUint16(_pointOffset + attributeOffset + 4, true);\\\\n          colors[4 * _j2 + 0] = r > 255 ? r / 256 : r;\\\\n          colors[4 * _j2 + 1] = g > 255 ? g / 256 : g;\\\\n          colors[4 * _j2 + 2] = b > 255 ? b / 256 : b;\\\\n        }\\\\n        attributeBuffers[_pointAttribute.name] = {\\\\n          buffer: _buff2,\\\\n          attribute: _pointAttribute\\\\n        };\\\\n      } else {\\\\n        var _buff3 = new ArrayBuffer(numPoints * 4);\\\\n        var _f = new Float32Array(_buff3);\\\\n        var TypedArray = typedArrayMapping[_pointAttribute.type.name];\\\\n        var preciseBuffer = new TypedArray(numPoints);\\\\n        var _offset2 = 0,\\\\n          _scale2 = 1;\\\\n        var getterMap = {\\\\n          'int8': view.getInt8,\\\\n          'int16': view.getInt16,\\\\n          'int32': view.getInt32,\\\\n          // 'int64':  view.getInt64,\\\\n          'uint8': view.getUint8,\\\\n          'uint16': view.getUint16,\\\\n          'uint32': view.getUint32,\\\\n          // 'uint64': view.getUint64,\\\\n          'float': view.getFloat32,\\\\n          'double': view.getFloat64\\\\n        };\\\\n        var _getter = getterMap[_pointAttribute.type.name].bind(view);\\\\n\\\\n        // compute offset and scale to pack larger types into 32 bit floats\\\\n        if (_pointAttribute.type.size > 4) {\\\\n          var _pointAttribute$range = _slicedToArray(_pointAttribute.range, 2),\\\\n            amin = _pointAttribute$range[0],\\\\n            amax = _pointAttribute$range[1];\\\\n          _offset2 = amin;\\\\n          _scale2 = 1 / (amax - amin);\\\\n        }\\\\n        for (var _j3 = 0; _j3 < numPoints; _j3++) {\\\\n          var _pointOffset2 = _j3 * bytesPerPoint;\\\\n          var _value = _getter(_pointOffset2 + attributeOffset, true);\\\\n          _f[_j3] = (_value - _offset2) * _scale2;\\\\n          preciseBuffer[_j3] = _value;\\\\n        }\\\\n        attributeBuffers[_pointAttribute.name] = {\\\\n          buffer: _buff3,\\\\n          preciseBuffer: preciseBuffer,\\\\n          attribute: _pointAttribute,\\\\n          offset: _offset2,\\\\n          scale: _scale2\\\\n        };\\\\n      }\\\\n      attributeOffset += _pointAttribute.byteSize;\\\\n    }\\\\n  } catch (err) {\\\\n    _iterator2.e(err);\\\\n  } finally {\\\\n    _iterator2.f();\\\\n  }\\\\n  var occupancy = parseInt(numPoints / numOccupiedCells);\\\\n  {\\\\n    // add indices\\\\n    var buff = new ArrayBuffer(numPoints * 4);\\\\n    var indices = new Uint32Array(buff);\\\\n    for (var i = 0; i < numPoints; i++) {\\\\n      indices[i] = i;\\\\n    }\\\\n    attributeBuffers['INDICES'] = {\\\\n      buffer: buff,\\\\n      attribute: PointAttribute.INDICES\\\\n    };\\\\n  }\\\\n  {\\\\n    // handle attribute vectors\\\\n    var vectors = pointAttributes.vectors;\\\\n    var _iterator3 = _createForOfIteratorHelper(vectors),\\\\n      _step3;\\\\n    try {\\\\n      for (_iterator3.s(); !(_step3 = _iterator3.n()).done;) {\\\\n        var vector = _step3.value;\\\\n        var _name = vector.name,\\\\n          attributes = vector.attributes;\\\\n        var numVectorElements = attributes.length;\\\\n        var _buffer = new ArrayBuffer(numVectorElements * numPoints * 4);\\\\n        var f32 = new Float32Array(_buffer);\\\\n        var iElement = 0;\\\\n        var _iterator4 = _createForOfIteratorHelper(attributes),\\\\n          _step4;\\\\n        try {\\\\n          for (_iterator4.s(); !(_step4 = _iterator4.n()).done;) {\\\\n            var sourceName = _step4.value;\\\\n            var sourceBuffer = attributeBuffers[sourceName];\\\\n            var _offset = sourceBuffer.offset,\\\\n              _scale = sourceBuffer.scale;\\\\n            var _view = new DataView(sourceBuffer.buffer);\\\\n            var getter = _view.getFloat32.bind(_view);\\\\n            for (var j = 0; j < numPoints; j++) {\\\\n              var value = getter(j * 4, true);\\\\n              f32[j * numVectorElements + iElement] = value / _scale + _offset;\\\\n            }\\\\n            iElement++;\\\\n          }\\\\n        } catch (err) {\\\\n          _iterator4.e(err);\\\\n        } finally {\\\\n          _iterator4.f();\\\\n        }\\\\n        var vecAttribute = new PointAttribute(_name, PointAttributeTypes.DATA_TYPE_FLOAT, 3);\\\\n        attributeBuffers[_name] = {\\\\n          buffer: _buffer,\\\\n          attribute: vecAttribute\\\\n        };\\\\n      }\\\\n    } catch (err) {\\\\n      _iterator3.e(err);\\\\n    } finally {\\\\n      _iterator3.f();\\\\n    }\\\\n  }\\\\n  var message = {\\\\n    buffer: buffer,\\\\n    attributeBuffers: attributeBuffers,\\\\n    density: occupancy\\\\n  };\\\\n  var transferables = [];\\\\n  for (var property in message.attributeBuffers) {\\\\n    transferables.push(message.attributeBuffers[property].buffer);\\\\n  }\\\\n  transferables.push(buffer);\\\\n  postMessage(message, transferables);\\\\n};//# sourceURL=[module]\\\\n\\\")}},__webpack_exports__={};__webpack_modules__[256]()})();\", \"Worker\", undefined, undefined);\n}\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///300\n")},91:(__unused_webpack_module,__webpack_exports__,__webpack_require__)=>{eval('/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   A: () => (/* binding */ Worker_fn)\n/* harmony export */ });\n/* harmony import */ var _node_modules_worker_loader_dist_runtime_inline_js__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(512);\n/* harmony import */ var _node_modules_worker_loader_dist_runtime_inline_js__WEBPACK_IMPORTED_MODULE_0___default = /*#__PURE__*/__webpack_require__.n(_node_modules_worker_loader_dist_runtime_inline_js__WEBPACK_IMPORTED_MODULE_0__);\n\n\n\nfunction Worker_fn() {\n  return _node_modules_worker_loader_dist_runtime_inline_js__WEBPACK_IMPORTED_MODULE_0___default()("(()=>{\\"use strict\\";var __webpack_modules__={717:()=>{eval(\'\\\\n;// CONCATENATED MODULE: ./src/point-attributes.ts\\\\n// -------------------------------------------------------------------------------------------------\\\\n// Converted to Typescript and adapted from https://github.com/potree/potree\\\\n// -------------------------------------------------------------------------------------------------\\\\nvar PointAttributeName;\\\\n(function (PointAttributeName) {\\\\n    PointAttributeName[PointAttributeName[\\"POSITION_CARTESIAN\\"] = 0] = \\"POSITION_CARTESIAN\\";\\\\n    PointAttributeName[PointAttributeName[\\"COLOR_PACKED\\"] = 1] = \\"COLOR_PACKED\\";\\\\n    PointAttributeName[PointAttributeName[\\"COLOR_FLOATS_1\\"] = 2] = \\"COLOR_FLOATS_1\\";\\\\n    PointAttributeName[PointAttributeName[\\"COLOR_FLOATS_255\\"] = 3] = \\"COLOR_FLOATS_255\\";\\\\n    PointAttributeName[PointAttributeName[\\"NORMAL_FLOATS\\"] = 4] = \\"NORMAL_FLOATS\\";\\\\n    PointAttributeName[PointAttributeName[\\"FILLER\\"] = 5] = \\"FILLER\\";\\\\n    PointAttributeName[PointAttributeName[\\"INTENSITY\\"] = 6] = \\"INTENSITY\\";\\\\n    PointAttributeName[PointAttributeName[\\"CLASSIFICATION\\"] = 7] = \\"CLASSIFICATION\\";\\\\n    PointAttributeName[PointAttributeName[\\"NORMAL_SPHEREMAPPED\\"] = 8] = \\"NORMAL_SPHEREMAPPED\\";\\\\n    PointAttributeName[PointAttributeName[\\"NORMAL_OCT16\\"] = 9] = \\"NORMAL_OCT16\\";\\\\n    PointAttributeName[PointAttributeName[\\"NORMAL\\"] = 10] = \\"NORMAL\\";\\\\n})(PointAttributeName || (PointAttributeName = {}));\\\\nconst POINT_ATTRIBUTE_TYPES = {\\\\n    DATA_TYPE_DOUBLE: { ordinal: 0, size: 8 },\\\\n    DATA_TYPE_FLOAT: { ordinal: 1, size: 4 },\\\\n    DATA_TYPE_INT8: { ordinal: 2, size: 1 },\\\\n    DATA_TYPE_UINT8: { ordinal: 3, size: 1 },\\\\n    DATA_TYPE_INT16: { ordinal: 4, size: 2 },\\\\n    DATA_TYPE_UINT16: { ordinal: 5, size: 2 },\\\\n    DATA_TYPE_INT32: { ordinal: 6, size: 4 },\\\\n    DATA_TYPE_UINT32: { ordinal: 7, size: 4 },\\\\n    DATA_TYPE_INT64: { ordinal: 8, size: 8 },\\\\n    DATA_TYPE_UINT64: { ordinal: 9, size: 8 },\\\\n};\\\\nfunction makePointAttribute(name, type, numElements) {\\\\n    return {\\\\n        name,\\\\n        type,\\\\n        numElements,\\\\n        byteSize: numElements * type.size,\\\\n    };\\\\n}\\\\nconst RGBA_PACKED = makePointAttribute(PointAttributeName.COLOR_PACKED, POINT_ATTRIBUTE_TYPES.DATA_TYPE_INT8, 4);\\\\nconst POINT_ATTRIBUTES = {\\\\n    POSITION_CARTESIAN: makePointAttribute(PointAttributeName.POSITION_CARTESIAN, POINT_ATTRIBUTE_TYPES.DATA_TYPE_FLOAT, 3),\\\\n    RGBA_PACKED,\\\\n    COLOR_PACKED: RGBA_PACKED,\\\\n    RGB_PACKED: makePointAttribute(PointAttributeName.COLOR_PACKED, POINT_ATTRIBUTE_TYPES.DATA_TYPE_INT8, 3),\\\\n    NORMAL_FLOATS: makePointAttribute(PointAttributeName.NORMAL_FLOATS, POINT_ATTRIBUTE_TYPES.DATA_TYPE_FLOAT, 3),\\\\n    FILLER_1B: makePointAttribute(PointAttributeName.FILLER, POINT_ATTRIBUTE_TYPES.DATA_TYPE_UINT8, 1),\\\\n    INTENSITY: makePointAttribute(PointAttributeName.INTENSITY, POINT_ATTRIBUTE_TYPES.DATA_TYPE_UINT16, 1),\\\\n    CLASSIFICATION: makePointAttribute(PointAttributeName.CLASSIFICATION, POINT_ATTRIBUTE_TYPES.DATA_TYPE_UINT8, 1),\\\\n    NORMAL_SPHEREMAPPED: makePointAttribute(PointAttributeName.NORMAL_SPHEREMAPPED, POINT_ATTRIBUTE_TYPES.DATA_TYPE_UINT8, 2),\\\\n    NORMAL_OCT16: makePointAttribute(PointAttributeName.NORMAL_OCT16, POINT_ATTRIBUTE_TYPES.DATA_TYPE_UINT8, 2),\\\\n    NORMAL: makePointAttribute(PointAttributeName.NORMAL, POINT_ATTRIBUTE_TYPES.DATA_TYPE_FLOAT, 3),\\\\n};\\\\nclass PointAttributes {\\\\n    constructor(pointAttributeNames = []) {\\\\n        this.attributes = [];\\\\n        this.byteSize = 0;\\\\n        this.size = 0;\\\\n        for (let i = 0; i < pointAttributeNames.length; i++) {\\\\n            const pointAttributeName = pointAttributeNames[i];\\\\n            const pointAttribute = POINT_ATTRIBUTES[pointAttributeName];\\\\n            this.attributes.push(pointAttribute);\\\\n            this.byteSize += pointAttribute.byteSize;\\\\n            this.size++;\\\\n        }\\\\n    }\\\\n    add(pointAttribute) {\\\\n        this.attributes.push(pointAttribute);\\\\n        this.byteSize += pointAttribute.byteSize;\\\\n        this.size++;\\\\n    }\\\\n    hasColors() {\\\\n        return this.attributes.find(isColorAttribute) !== undefined;\\\\n    }\\\\n    hasNormals() {\\\\n        return this.attributes.find(isNormalAttribute) !== undefined;\\\\n    }\\\\n}\\\\nfunction isColorAttribute({ name }) {\\\\n    return name === PointAttributeName.COLOR_PACKED;\\\\n}\\\\nfunction isNormalAttribute({ name }) {\\\\n    return (name === PointAttributeName.NORMAL_SPHEREMAPPED ||\\\\n        name === PointAttributeName.NORMAL_FLOATS ||\\\\n        name === PointAttributeName.NORMAL ||\\\\n        name === PointAttributeName.NORMAL_OCT16);\\\\n}\\\\n\\\\n;// CONCATENATED MODULE: ./src/version.ts\\\\nclass Version {\\\\n    constructor(version) {\\\\n        this.versionMinor = 0;\\\\n        this.version = version;\\\\n        const vmLength = version.indexOf(\\\\\'.\\\\\') === -1 ? version.length : version.indexOf(\\\\\'.\\\\\');\\\\n        this.versionMajor = parseInt(version.substr(0, vmLength), 10);\\\\n        this.versionMinor = parseInt(version.substr(vmLength + 1), 10);\\\\n        if (isNaN(this.versionMinor)) {\\\\n            this.versionMinor = 0;\\\\n        }\\\\n    }\\\\n    newerThan(version) {\\\\n        const v = new Version(version);\\\\n        if (this.versionMajor > v.versionMajor) {\\\\n            return true;\\\\n        }\\\\n        else if (this.versionMajor === v.versionMajor && this.versionMinor > v.versionMinor) {\\\\n            return true;\\\\n        }\\\\n        else {\\\\n            return false;\\\\n        }\\\\n    }\\\\n    equalOrHigher(version) {\\\\n        const v = new Version(version);\\\\n        if (this.versionMajor > v.versionMajor) {\\\\n            return true;\\\\n        }\\\\n        else if (this.versionMajor === v.versionMajor && this.versionMinor >= v.versionMinor) {\\\\n            return true;\\\\n        }\\\\n        else {\\\\n            return false;\\\\n        }\\\\n    }\\\\n    upTo(version) {\\\\n        return !this.newerThan(version);\\\\n    }\\\\n}\\\\n\\\\n;// CONCATENATED MODULE: ./src/workers/custom-array-view.ts\\\\n/**\\\\n * Adapted from Potree.js http://potree.org\\\\n * Potree License: https://github.com/potree/potree/blob/1.5/LICENSE\\\\n */\\\\n// http://jsperf.com/uint8array-vs-dataview3/3\\\\n// tslint:disable:no-bitwise\\\\nclass CustomArrayView {\\\\n    constructor(buffer) {\\\\n        this.tmp = new ArrayBuffer(4);\\\\n        this.tmpf = new Float32Array(this.tmp);\\\\n        this.tmpu8 = new Uint8Array(this.tmp);\\\\n        this.u8 = new Uint8Array(buffer);\\\\n    }\\\\n    getUint32(i) {\\\\n        return (this.u8[i + 3] << 24) | (this.u8[i + 2] << 16) | (this.u8[i + 1] << 8) | this.u8[i];\\\\n    }\\\\n    getUint16(i) {\\\\n        return (this.u8[i + 1] << 8) | this.u8[i];\\\\n    }\\\\n    getFloat32(i) {\\\\n        const tmpu8 = this.tmpu8;\\\\n        const u8 = this.u8;\\\\n        const tmpf = this.tmpf;\\\\n        tmpu8[0] = u8[i + 0];\\\\n        tmpu8[1] = u8[i + 1];\\\\n        tmpu8[2] = u8[i + 2];\\\\n        tmpu8[3] = u8[i + 3];\\\\n        return tmpf[0];\\\\n    }\\\\n    getUint8(i) {\\\\n        return this.u8[i];\\\\n    }\\\\n}\\\\n// tslint:enable:no-bitwise\\\\n\\\\n;// CONCATENATED MODULE: ./src/workers/binary-decoder-worker-internal.ts\\\\n/**\\\\n * Adapted from Potree.js http://potree.org\\\\n * Potree License: https://github.com/potree/potree/blob/1.5/LICENSE\\\\n */\\\\n\\\\n\\\\n\\\\n// IE11 does not have Math.sign(), this has been adapted from CoreJS es6.math.sign.js for TypeScript\\\\nconst mathSign = Math.sign ||\\\\n    function (x) {\\\\n        // tslint:disable-next-line:triple-equals\\\\n        return (x = +x) == 0 || x != x ? x : x < 0 ? -1 : 1;\\\\n    };\\\\nfunction handleMessage(event) {\\\\n    const buffer = event.data.buffer;\\\\n    const pointAttributes = event.data.pointAttributes;\\\\n    const ctx = {\\\\n        attributeBuffers: {},\\\\n        currentOffset: 0,\\\\n        data: new CustomArrayView(buffer),\\\\n        mean: [0, 0, 0],\\\\n        nodeOffset: event.data.offset,\\\\n        numPoints: event.data.buffer.byteLength / pointAttributes.byteSize,\\\\n        pointAttributes,\\\\n        scale: event.data.scale,\\\\n        tightBoxMax: [Number.NEGATIVE_INFINITY, Number.NEGATIVE_INFINITY, Number.NEGATIVE_INFINITY],\\\\n        tightBoxMin: [Number.POSITIVE_INFINITY, Number.POSITIVE_INFINITY, Number.POSITIVE_INFINITY],\\\\n        transferables: [],\\\\n        version: new Version(event.data.version),\\\\n    };\\\\n    for (const pointAttribute of ctx.pointAttributes.attributes) {\\\\n        decodeAndAddAttribute(pointAttribute, ctx);\\\\n        ctx.currentOffset += pointAttribute.byteSize;\\\\n    }\\\\n    const indices = new ArrayBuffer(ctx.numPoints * 4);\\\\n    const iIndices = new Uint32Array(indices);\\\\n    for (let i = 0; i < ctx.numPoints; i++) {\\\\n        iIndices[i] = i;\\\\n    }\\\\n    if (!ctx.attributeBuffers[PointAttributeName.CLASSIFICATION]) {\\\\n        addEmptyClassificationBuffer(ctx);\\\\n    }\\\\n    const message = {\\\\n        buffer: buffer,\\\\n        mean: ctx.mean,\\\\n        attributeBuffers: ctx.attributeBuffers,\\\\n        tightBoundingBox: { min: ctx.tightBoxMin, max: ctx.tightBoxMax },\\\\n        indices,\\\\n    };\\\\n    postMessage(message, ctx.transferables);\\\\n}\\\\nfunction addEmptyClassificationBuffer(ctx) {\\\\n    const buffer = new ArrayBuffer(ctx.numPoints * 4);\\\\n    const classifications = new Float32Array(buffer);\\\\n    for (let i = 0; i < ctx.numPoints; i++) {\\\\n        classifications[i] = 0;\\\\n    }\\\\n    ctx.attributeBuffers[PointAttributeName.CLASSIFICATION] = {\\\\n        buffer,\\\\n        attribute: POINT_ATTRIBUTES.CLASSIFICATION,\\\\n    };\\\\n}\\\\nfunction decodeAndAddAttribute(attribute, ctx) {\\\\n    const decodedAttribute = decodePointAttribute(attribute, ctx);\\\\n    if (decodedAttribute === undefined) {\\\\n        return;\\\\n    }\\\\n    ctx.attributeBuffers[decodedAttribute.attribute.name] = decodedAttribute;\\\\n    ctx.transferables.push(decodedAttribute.buffer);\\\\n}\\\\nfunction decodePointAttribute(attribute, ctx) {\\\\n    switch (attribute.name) {\\\\n        case PointAttributeName.POSITION_CARTESIAN:\\\\n            return decodePositionCartesian(attribute, ctx);\\\\n        case PointAttributeName.COLOR_PACKED:\\\\n            return decodeColor(attribute, ctx);\\\\n        case PointAttributeName.INTENSITY:\\\\n            return decodeIntensity(attribute, ctx);\\\\n        case PointAttributeName.CLASSIFICATION:\\\\n            return decodeClassification(attribute, ctx);\\\\n        case PointAttributeName.NORMAL_SPHEREMAPPED:\\\\n            return decodeNormalSphereMapped(attribute, ctx);\\\\n        case PointAttributeName.NORMAL_OCT16:\\\\n            return decodeNormalOct16(attribute, ctx);\\\\n        case PointAttributeName.NORMAL:\\\\n            return decodeNormal(attribute, ctx);\\\\n        default:\\\\n            return undefined;\\\\n    }\\\\n}\\\\nfunction decodePositionCartesian(attribute, ctx) {\\\\n    const buffer = new ArrayBuffer(ctx.numPoints * 4 * 3);\\\\n    const positions = new Float32Array(buffer);\\\\n    for (let i = 0; i < ctx.numPoints; i++) {\\\\n        let x;\\\\n        let y;\\\\n        let z;\\\\n        if (ctx.version.newerThan(\\\\\'1.3\\\\\')) {\\\\n            x = ctx.data.getUint32(ctx.currentOffset + i * ctx.pointAttributes.byteSize + 0) * ctx.scale;\\\\n            y = ctx.data.getUint32(ctx.currentOffset + i * ctx.pointAttributes.byteSize + 4) * ctx.scale;\\\\n            z = ctx.data.getUint32(ctx.currentOffset + i * ctx.pointAttributes.byteSize + 8) * ctx.scale;\\\\n        }\\\\n        else {\\\\n            x = ctx.data.getFloat32(i * ctx.pointAttributes.byteSize + 0) + ctx.nodeOffset[0];\\\\n            y = ctx.data.getFloat32(i * ctx.pointAttributes.byteSize + 4) + ctx.nodeOffset[1];\\\\n            z = ctx.data.getFloat32(i * ctx.pointAttributes.byteSize + 8) + ctx.nodeOffset[2];\\\\n        }\\\\n        positions[3 * i + 0] = x;\\\\n        positions[3 * i + 1] = y;\\\\n        positions[3 * i + 2] = z;\\\\n        ctx.mean[0] += x / ctx.numPoints;\\\\n        ctx.mean[1] += y / ctx.numPoints;\\\\n        ctx.mean[2] += z / ctx.numPoints;\\\\n        ctx.tightBoxMin[0] = Math.min(ctx.tightBoxMin[0], x);\\\\n        ctx.tightBoxMin[1] = Math.min(ctx.tightBoxMin[1], y);\\\\n        ctx.tightBoxMin[2] = Math.min(ctx.tightBoxMin[2], z);\\\\n        ctx.tightBoxMax[0] = Math.max(ctx.tightBoxMax[0], x);\\\\n        ctx.tightBoxMax[1] = Math.max(ctx.tightBoxMax[1], y);\\\\n        ctx.tightBoxMax[2] = Math.max(ctx.tightBoxMax[2], z);\\\\n    }\\\\n    return { buffer, attribute };\\\\n}\\\\nfunction decodeColor(attribute, ctx) {\\\\n    const buffer = new ArrayBuffer(ctx.numPoints * 3);\\\\n    const colors = new Uint8Array(buffer);\\\\n    for (let i = 0; i < ctx.numPoints; i++) {\\\\n        colors[3 * i + 0] = ctx.data.getUint8(ctx.currentOffset + i * ctx.pointAttributes.byteSize + 0);\\\\n        colors[3 * i + 1] = ctx.data.getUint8(ctx.currentOffset + i * ctx.pointAttributes.byteSize + 1);\\\\n        colors[3 * i + 2] = ctx.data.getUint8(ctx.currentOffset + i * ctx.pointAttributes.byteSize + 2);\\\\n    }\\\\n    return { buffer, attribute };\\\\n}\\\\nfunction decodeIntensity(attribute, ctx) {\\\\n    const buffer = new ArrayBuffer(ctx.numPoints * 4);\\\\n    const intensities = new Float32Array(buffer);\\\\n    for (let i = 0; i < ctx.numPoints; i++) {\\\\n        intensities[i] = ctx.data.getUint16(ctx.currentOffset + i * ctx.pointAttributes.byteSize);\\\\n    }\\\\n    return { buffer, attribute };\\\\n}\\\\nfunction decodeClassification(attribute, ctx) {\\\\n    const buffer = new ArrayBuffer(ctx.numPoints);\\\\n    const classifications = new Uint8Array(buffer);\\\\n    for (let j = 0; j < ctx.numPoints; j++) {\\\\n        classifications[j] = ctx.data.getUint8(ctx.currentOffset + j * ctx.pointAttributes.byteSize);\\\\n    }\\\\n    return { buffer, attribute };\\\\n}\\\\nfunction decodeNormalSphereMapped(attribute, ctx) {\\\\n    const buffer = new ArrayBuffer(ctx.numPoints * 4 * 3);\\\\n    const normals = new Float32Array(buffer);\\\\n    for (let j = 0; j < ctx.numPoints; j++) {\\\\n        const bx = ctx.data.getUint8(ctx.currentOffset + j * ctx.pointAttributes.byteSize + 0);\\\\n        const by = ctx.data.getUint8(ctx.currentOffset + j * ctx.pointAttributes.byteSize + 1);\\\\n        const ex = bx / 255;\\\\n        const ey = by / 255;\\\\n        let nx = ex * 2 - 1;\\\\n        let ny = ey * 2 - 1;\\\\n        let nz = 1;\\\\n        const nw = -1;\\\\n        const l = nx * -nx + ny * -ny + nz * -nw;\\\\n        nz = l;\\\\n        nx = nx * Math.sqrt(l);\\\\n        ny = ny * Math.sqrt(l);\\\\n        nx = nx * 2;\\\\n        ny = ny * 2;\\\\n        nz = nz * 2 - 1;\\\\n        normals[3 * j + 0] = nx;\\\\n        normals[3 * j + 1] = ny;\\\\n        normals[3 * j + 2] = nz;\\\\n    }\\\\n    return { buffer, attribute };\\\\n}\\\\nfunction decodeNormalOct16(attribute, ctx) {\\\\n    const buff = new ArrayBuffer(ctx.numPoints * 4 * 3);\\\\n    const normals = new Float32Array(buff);\\\\n    for (let j = 0; j < ctx.numPoints; j++) {\\\\n        const bx = ctx.data.getUint8(ctx.currentOffset + j * ctx.pointAttributes.byteSize + 0);\\\\n        const by = ctx.data.getUint8(ctx.currentOffset + j * ctx.pointAttributes.byteSize + 1);\\\\n        const u = (bx / 255) * 2 - 1;\\\\n        const v = (by / 255) * 2 - 1;\\\\n        let z = 1 - Math.abs(u) - Math.abs(v);\\\\n        let x = 0;\\\\n        let y = 0;\\\\n        if (z >= 0) {\\\\n            x = u;\\\\n            y = v;\\\\n        }\\\\n        else {\\\\n            x = -(v / mathSign(v) - 1) / mathSign(u);\\\\n            y = -(u / mathSign(u) - 1) / mathSign(v);\\\\n        }\\\\n        const length = Math.sqrt(x * x + y * y + z * z);\\\\n        x = x / length;\\\\n        y = y / length;\\\\n        z = z / length;\\\\n        normals[3 * j + 0] = x;\\\\n        normals[3 * j + 1] = y;\\\\n        normals[3 * j + 2] = z;\\\\n    }\\\\n    return { buffer: buff, attribute };\\\\n}\\\\nfunction decodeNormal(attribute, ctx) {\\\\n    const buffer = new ArrayBuffer(ctx.numPoints * 4 * 3);\\\\n    const normals = new Float32Array(buffer);\\\\n    for (let j = 0; j < ctx.numPoints; j++) {\\\\n        const x = ctx.data.getFloat32(ctx.currentOffset + j * ctx.pointAttributes.byteSize + 0);\\\\n        const y = ctx.data.getFloat32(ctx.currentOffset + j * ctx.pointAttributes.byteSize + 4);\\\\n        const z = ctx.data.getFloat32(ctx.currentOffset + j * ctx.pointAttributes.byteSize + 8);\\\\n        normals[3 * j + 0] = x;\\\\n        normals[3 * j + 1] = y;\\\\n        normals[3 * j + 2] = z;\\\\n    }\\\\n    return { buffer, attribute };\\\\n}\\\\n\\\\n;// CONCATENATED MODULE: ./node_modules/babel-loader/lib/index.js!./src/workers/binary-decoder.worker.js\\\\n\\\\n\\\\n/*eslint-disable */\\\\nonmessage = handleMessage;//# sourceURL=[module]\\\\n\')}},__webpack_exports__={};__webpack_modules__[717]()})();", "Worker", undefined, undefined);\n}\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///91\n')},512:module=>{eval('\n\n/* eslint-env browser */\n\n/* eslint-disable no-undef, no-use-before-define, new-cap */\nmodule.exports = function (content, workerConstructor, workerOptions, url) {\n  var globalScope = self || window;\n\n  try {\n    try {\n      var blob;\n\n      try {\n        // New API\n        blob = new globalScope.Blob([content]);\n      } catch (e) {\n        // BlobBuilder = Deprecated, but widely implemented\n        var BlobBuilder = globalScope.BlobBuilder || globalScope.WebKitBlobBuilder || globalScope.MozBlobBuilder || globalScope.MSBlobBuilder;\n        blob = new BlobBuilder();\n        blob.append(content);\n        blob = blob.getBlob();\n      }\n\n      var URL = globalScope.URL || globalScope.webkitURL;\n      var objectURL = URL.createObjectURL(blob);\n      var worker = new globalScope[workerConstructor](objectURL, workerOptions);\n      URL.revokeObjectURL(objectURL);\n      return worker;\n    } catch (e) {\n      return new globalScope[workerConstructor]("data:application/javascript,".concat(encodeURIComponent(content)), workerOptions);\n    }\n  } catch (e) {\n    if (!url) {\n      throw Error("Inline worker is not supported");\n    }\n\n    return new globalScope[workerConstructor](url, workerOptions);\n  }\n};//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiNTEyLmpzIiwibWFwcGluZ3MiOiJBQUFBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQSIsInNvdXJjZXMiOlsid2VicGFjazovL3BvdHJlZS8uL25vZGVfbW9kdWxlcy93b3JrZXItbG9hZGVyL2Rpc3QvcnVudGltZS9pbmxpbmUuanM/ZWNkNiJdLCJzb3VyY2VzQ29udGVudCI6WyJcInVzZSBzdHJpY3RcIjtcblxuLyogZXNsaW50LWVudiBicm93c2VyICovXG5cbi8qIGVzbGludC1kaXNhYmxlIG5vLXVuZGVmLCBuby11c2UtYmVmb3JlLWRlZmluZSwgbmV3LWNhcCAqL1xubW9kdWxlLmV4cG9ydHMgPSBmdW5jdGlvbiAoY29udGVudCwgd29ya2VyQ29uc3RydWN0b3IsIHdvcmtlck9wdGlvbnMsIHVybCkge1xuICB2YXIgZ2xvYmFsU2NvcGUgPSBzZWxmIHx8IHdpbmRvdztcblxuICB0cnkge1xuICAgIHRyeSB7XG4gICAgICB2YXIgYmxvYjtcblxuICAgICAgdHJ5IHtcbiAgICAgICAgLy8gTmV3IEFQSVxuICAgICAgICBibG9iID0gbmV3IGdsb2JhbFNjb3BlLkJsb2IoW2NvbnRlbnRdKTtcbiAgICAgIH0gY2F0Y2ggKGUpIHtcbiAgICAgICAgLy8gQmxvYkJ1aWxkZXIgPSBEZXByZWNhdGVkLCBidXQgd2lkZWx5IGltcGxlbWVudGVkXG4gICAgICAgIHZhciBCbG9iQnVpbGRlciA9IGdsb2JhbFNjb3BlLkJsb2JCdWlsZGVyIHx8IGdsb2JhbFNjb3BlLldlYktpdEJsb2JCdWlsZGVyIHx8IGdsb2JhbFNjb3BlLk1vekJsb2JCdWlsZGVyIHx8IGdsb2JhbFNjb3BlLk1TQmxvYkJ1aWxkZXI7XG4gICAgICAgIGJsb2IgPSBuZXcgQmxvYkJ1aWxkZXIoKTtcbiAgICAgICAgYmxvYi5hcHBlbmQoY29udGVudCk7XG4gICAgICAgIGJsb2IgPSBibG9iLmdldEJsb2IoKTtcbiAgICAgIH1cblxuICAgICAgdmFyIFVSTCA9IGdsb2JhbFNjb3BlLlVSTCB8fCBnbG9iYWxTY29wZS53ZWJraXRVUkw7XG4gICAgICB2YXIgb2JqZWN0VVJMID0gVVJMLmNyZWF0ZU9iamVjdFVSTChibG9iKTtcbiAgICAgIHZhciB3b3JrZXIgPSBuZXcgZ2xvYmFsU2NvcGVbd29ya2VyQ29uc3RydWN0b3JdKG9iamVjdFVSTCwgd29ya2VyT3B0aW9ucyk7XG4gICAgICBVUkwucmV2b2tlT2JqZWN0VVJMKG9iamVjdFVSTCk7XG4gICAgICByZXR1cm4gd29ya2VyO1xuICAgIH0gY2F0Y2ggKGUpIHtcbiAgICAgIHJldHVybiBuZXcgZ2xvYmFsU2NvcGVbd29ya2VyQ29uc3RydWN0b3JdKFwiZGF0YTphcHBsaWNhdGlvbi9qYXZhc2NyaXB0LFwiLmNvbmNhdChlbmNvZGVVUklDb21wb25lbnQoY29udGVudCkpLCB3b3JrZXJPcHRpb25zKTtcbiAgICB9XG4gIH0gY2F0Y2ggKGUpIHtcbiAgICBpZiAoIXVybCkge1xuICAgICAgdGhyb3cgRXJyb3IoXCJJbmxpbmUgd29ya2VyIGlzIG5vdCBzdXBwb3J0ZWRcIik7XG4gICAgfVxuXG4gICAgcmV0dXJuIG5ldyBnbG9iYWxTY29wZVt3b3JrZXJDb25zdHJ1Y3Rvcl0odXJsLCB3b3JrZXJPcHRpb25zKTtcbiAgfVxufTsiXSwibmFtZXMiOltdLCJzb3VyY2VSb290IjoiIn0=\n//# sourceURL=webpack-internal:///512\n')},604:g=>{g.exports=__WEBPACK_EXTERNAL_MODULE__604__}},__webpack_module_cache__={};function __webpack_require__(g){var I=__webpack_module_cache__[g];if(void 0!==I)return I.exports;var t=__webpack_module_cache__[g]={exports:{}};return __webpack_modules__[g](t,t.exports,__webpack_require__),t.exports}__webpack_require__.n=g=>{var I=g&&g.__esModule?()=>g.default:()=>g;return __webpack_require__.d(I,{a:I}),I},__webpack_require__.d=(g,I)=>{for(var t in I)__webpack_require__.o(I,t)&&!__webpack_require__.o(g,t)&&Object.defineProperty(g,t,{enumerable:!0,get:I[t]})},__webpack_require__.o=(g,I)=>Object.prototype.hasOwnProperty.call(g,I),__webpack_require__.r=g=>{"undefined"!=typeof Symbol&&Symbol.toStringTag&&Object.defineProperty(g,Symbol.toStringTag,{value:"Module"}),Object.defineProperty(g,"__esModule",{value:!0})};var __webpack_exports__=__webpack_require__(599);return __webpack_exports__})()));